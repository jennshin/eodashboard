{"version":3,"file":"rx-ext.js","sources":["../src/rx-ext/observable.js","../src/rx-ext/operators.js"],"sourcesContent":["import { fromEventPattern, merge as mergeObs, Observable } from 'rxjs'\nimport { distinctUntilChanged, map as mapObs } from 'rxjs/operators'\nimport { identity, isEqual, isFunction } from '../utils'\n\n/**\n * Creates an Observable using OpenLayers event pattern that emits events coming from the given event target.\n *\n * @example **Subscribe on view center change events**\n * const map = ol.Map({ ... })\n * const changes = Observable.fromOlEvent(map.getView(), 'change:center')\n *\n * changes.subscribe(({ coordinate }) => console.log(coordinate))\n *\n * @param {module:ol/Observable~Observable} target OpenLayers event target.\n * @param {string|Object[]} eventName The event name of interest, being emitted by the `target`\n *                          or an array of events/selectors like `[{ event: 'event1', selector?: x => x }, ...]`.\n * @param {function(...*): *} [selector] An optional function to post-process results. It takes the arguments\n *    from the event handler and should return a single value.\n * @param {Observable[]} [pipeEach]\n * @return {Observable<T>}\n * @memberOf {Observable}\n */\nexport function fromOlEvent (target, eventName, selector, pipeEach = []) {\n  if (Array.isArray(eventName)) {\n    return mergeObs(\n      ...eventName.map(\n        elem => {\n          let eventName, selector\n\n          if (typeof elem === 'object') {\n            eventName = elem.event\n            selector = elem.selector\n          } else {\n            eventName = elem\n          }\n\n          return fromOlEvent(target, eventName, selector).pipe(...pipeEach)\n        },\n      ),\n    )\n  }\n\n  selector || (selector = identity)\n\n  return fromEventPattern(\n    handler => target.on(eventName, handler),\n    handler => target.un(eventName, handler),\n  ).pipe(mapObs(selector))\n}\n\n/**\n * Creates Observable from OpenLayers change:* event\n * @param {module:ol/Observable~Observable} target\n * @param {string|string[]} [prop]\n * @param {boolean|function(a, b):boolean|undefined} [distinct] Distinct values by isEqual fn or by custom comparator\n * @param {function|undefined} [selector] Custom selector\n * @param {Observable[]} [pipeEach]\n * @return {Observable<{prop: string, value: *}>}\n */\nexport function fromOlChangeEvent (\n  target,\n  prop,\n  distinct,\n  selector,\n  pipeEach = [],\n) {\n  if (Array.isArray(prop)) {\n    return mergeObs(...prop.map(p => fromOlChangeEvent(target, p, distinct, selector).pipe(...pipeEach)))\n  }\n\n  selector || (selector = identity)\n  const event = `change:${prop}`\n  const observable = fromOlEvent(target, event, () => target.get(prop))\n  const operations = []\n\n  if (distinct) {\n    isFunction(distinct) || (distinct = isEqual)\n    operations.push(distinctUntilChanged(distinct))\n  }\n\n  operations.push(mapObs(value => selector({ prop, value })))\n\n  return observable.pipe(...operations)\n}\n\nexport function fromVueEvent (target, eventName, selector) {\n  if (Array.isArray(eventName)) {\n    return mergeObs(\n      ...eventName.map(\n        elem => {\n          let eventName, selector\n\n          if (typeof elem === 'object') {\n            eventName = elem.event\n            selector = elem.selector\n          } else {\n            eventName = elem\n          }\n\n          return fromVueEvent(target, eventName, selector)\n        },\n      ),\n    )\n  }\n\n  selector || (selector = identity)\n\n  return fromEventPattern(\n    handler => target.$on(eventName, handler),\n    handler => target.$off(eventName, handler),\n  ).pipe(mapObs(selector))\n}\n\nexport function fromVueWatcher (target, exprOrFn, options = {}) {\n  return new Observable(s => {\n    return target.$watch(exprOrFn, (value, previous) => s.next({ value, previous }), options)\n  })\n}\n","import { debounceTime, map, tap } from 'rxjs/operators'\n\nexport function bufferDebounceTime (time = 0) {\n  return source => {\n    let bufferedValues = []\n\n    return source.pipe(\n      tap(value => bufferedValues.push(value)),\n      debounceTime(time),\n      map(() => bufferedValues),\n      tap(() => { bufferedValues = [] }),\n    )\n  }\n}\n"],"names":["fromOlEvent","target","eventName","selector","pipeEach","Array","isArray","mergeObs","map","elem","event","pipe","identity","fromEventPattern","handler","on","un","mapObs","fromOlChangeEvent","prop","distinct","p","observable","get","operations","isFunction","isEqual","push","distinctUntilChanged","value","fromVueEvent","$on","$off","fromVueWatcher","exprOrFn","options","Observable","s","$watch","previous","next","bufferDebounceTime","time","source","bufferedValues","tap","debounceTime"],"mappings":"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"}