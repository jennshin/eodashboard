{"remainingRequest":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorMap.vue","mtime":1624532486000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzLzhwcy9Eb3dubG9hZHMvZW9kYXNoLXN0YWdpbmcvYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvOHBzL0Rvd25sb2Fkcy9lb2Rhc2gtc3RhZ2luZy9hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwoKdmFyIF90aGlzID0gdGhpczsKCmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8gVXRpbGl0aWVzCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IGdlb0pzb24sIGxhdExuZ0JvdW5kcywgbGF0TG5nLCBjaXJjbGVNYXJrZXIsIERpdkljb24sIFBvaW50IH0gZnJvbSAnbGVhZmxldCc7CmltcG9ydCB7IHRlbXBsYXRlIH0gZnJvbSAnQC91dGlscyc7CmltcG9ydCB7IExNYXAsIExUaWxlTGF5ZXIsIExXTVNUaWxlTGF5ZXIsIExHZW9Kc29uLCBMQ2lyY2xlTWFya2VyLCBMQ29udHJvbExheWVycywgTENvbnRyb2xBdHRyaWJ1dGlvbiwgTENvbnRyb2xab29tLCBMTGF5ZXJHcm91cCwgTEZlYXR1cmVHcm91cCwgTENvbnRyb2wsIExUb29sdGlwIH0gZnJvbSAndnVlMi1sZWFmbGV0JzsKaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7CmltcG9ydCAnbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzJzsKaW1wb3J0ICdsZWFmbGV0LW1vdXNlLXBvc2l0aW9uJzsKaW1wb3J0ICdsZWFmbGV0LXNpZGUtYnktc2lkZSc7CmltcG9ydCAnbGVhZmxldC1sb2FkaW5nJzsKaW1wb3J0ICdsZWFmbGV0LWxvYWRpbmcvc3JjL0NvbnRyb2wuTG9hZGluZy5jc3MnOwppbXBvcnQgJ2xlYWZsZXQtZHJhdyc7CmltcG9ydCAnbGVhZmxldC1kcmF3L2Rpc3QvbGVhZmxldC5kcmF3LmNzcyc7CmltcG9ydCBWdWUyTGVhZmxldE1hcmtlckNsdXN0ZXIgZnJvbSAndnVlMi1sZWFmbGV0LW1hcmtlcmNsdXN0ZXInOwppbXBvcnQgJ2xlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuY3NzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMKCmltcG9ydCAnbGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5EZWZhdWx0LmNzcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzCgppbXBvcnQgdHVyZkRpZmZlcmVuY2UgZnJvbSAnQHR1cmYvZGlmZmVyZW5jZSc7CmltcG9ydCBjb3VudHJpZXMgZnJvbSAnQC9hc3NldHMvY291bnRyaWVzLmpzb24nOwppbXBvcnQgZ3NhRmlsZSBmcm9tICdAL2Fzc2V0cy9nc2FfZGF0YS5qc29uJzsKdmFyIGVtcHR5RiA9IHsKICB0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLAogIGZlYXR1cmVzOiBbXQp9Owp2YXIgZGF0YUYgPSBlbXB0eUY7CnZhciBjb21wYXJlRiA9IGVtcHR5RjsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ2N1cnJlbnRJbmRpY2F0b3InXSwKICBjb21wb25lbnRzOiB7CiAgICBMTWFwOiBMTWFwLAogICAgTFRpbGVMYXllcjogTFRpbGVMYXllciwKICAgIExXTVNUaWxlTGF5ZXI6IExXTVNUaWxlTGF5ZXIsCiAgICBMR2VvSnNvbjogTEdlb0pzb24sCiAgICBMQ2lyY2xlTWFya2VyOiBMQ2lyY2xlTWFya2VyLAogICAgTENvbnRyb2xMYXllcnM6IExDb250cm9sTGF5ZXJzLAogICAgTENvbnRyb2xBdHRyaWJ1dGlvbjogTENvbnRyb2xBdHRyaWJ1dGlvbiwKICAgIExDb250cm9sWm9vbTogTENvbnRyb2xab29tLAogICAgTExheWVyR3JvdXA6IExMYXllckdyb3VwLAogICAgTEZlYXR1cmVHcm91cDogTEZlYXR1cmVHcm91cCwKICAgIExDb250cm9sOiBMQ29udHJvbCwKICAgIExUb29sdGlwOiBMVG9vbHRpcCwKICAgICdsLW1hcmtlci1jbHVzdGVyJzogVnVlMkxlYWZsZXRNYXJrZXJDbHVzdGVyCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbWFwOiBudWxsLAogICAgICBjb21wYXJlTGF5ZXJLZXlYWVo6IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1XSwKICAgICAgZGF0YUxheWVyS2V5WFlaOiBbNDEsIDQyLCA0MywgNDQsIDQ1LCA0NiwgNDcsIDQ4LCA0OSwgNTAsIDUxLCA1MiwgNTMsIDU0LCA1NV0sCiAgICAgIGRhdGFKc29uS2V5OiAwLAogICAgICBjb21wYXJlSnNvbktleTogLTEsCiAgICAgIHpvb206IG51bGwsCiAgICAgIGNlbnRlcjogbnVsbCwKICAgICAgYm91bmRzOiBudWxsLAogICAgICBlbmFibGVDb21wYXJlOiBmYWxzZSwKICAgICAgb3BhY2l0eVRlcnJhaW46IFsxXSwKICAgICAgb3BhY2l0eU92ZXJsYXk6IFsxXSwKICAgICAgdGlsZVBhbmU6ICd0aWxlUGFuZScsCiAgICAgIG92ZXJsYXlQYW5lOiAnb3ZlcmxheVBhbmUnLAogICAgICBtYXJrZXJQYW5lOiAnbWFya2VyUGFuZScsCiAgICAgIHNoYWRvd1BhbmU6ICdzaGFkb3dQYW5lJywKICAgICAgdG9vbHRpcFBhbmU6ICd0b29sdGlwUGFuZScsCiAgICAgIHBvcHVwUGFuZTogJ3BvcHVwUGFuZScsCiAgICAgIGxlZ2VuZEV4cGFuZGVkOiBmYWxzZSwKICAgICAgc2xpZGVyOiBudWxsLAogICAgICBkcmF3Q29udHJvbDogbnVsbCwKICAgICAgcmVuZGVyVHJhc2hCaW46IGZhbHNlLAogICAgICBkZWZhdWx0TWFwT3B0aW9uczogewogICAgICAgIGF0dHJpYnV0aW9uQ29udHJvbDogZmFsc2UsCiAgICAgICAgem9vbUNvbnRyb2w6IGZhbHNlCiAgICAgIH0sCiAgICAgIGRhdGFMYXllclRpbWU6IG51bGwsCiAgICAgIGNvbXBhcmVMYXllclRpbWU6IG51bGwsCiAgICAgIGRhdGFMYXllckluZGV4OiAwLAogICAgICBjb21wYXJlTGF5ZXJJbmRleDogMCwKICAgICAgZGF0YUZlYXR1cmVzQ291bnQ6IDAsCiAgICAgIGNvbXBhcmVGZWF0dXJlc0NvdW50OiAwLAogICAgICBzZWxlY3RlZENvdW50cnk6IG51bGwsCiAgICAgIHNlbGVjdGVkQm9yZGVyOiBudWxsLAogICAgICBzZWxlY3RlZExheWVyOiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBTdGF0ZSgnY29uZmlnJywgWydhcHBDb25maWcnLCAnYmFzZUNvbmZpZyddKSksIG1hcEdldHRlcnMoJ2luZGljYXRvcnMnLCBbJ2dldEluZGljYXRvckZpbHRlcmVkSW5wdXREYXRhJ10pKSwge30sIHsKICAgIGNvdW50cmllc0pzb246IGZ1bmN0aW9uIGNvdW50cmllc0pzb24oKSB7CiAgICAgIHJldHVybiBjb3VudHJpZXM7CiAgICB9LAogICAgZ3NhSnNvbjogZnVuY3Rpb24gZ3NhSnNvbigpIHsKICAgICAgcmV0dXJuIGdzYUZpbGU7CiAgICB9LAogICAgY291bnRyaWVzU3R5bGU6IGZ1bmN0aW9uIGNvdW50cmllc1N0eWxlKCkgewogICAgICByZXR1cm4gewogICAgICAgIGNvbG9yOiAnIzIyMicsCiAgICAgICAgd2VpZ2h0OiAxLAogICAgICAgIGZpbGxDb2xvcjogJyNmZmYnLAogICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgZmlsbE9wYWNpdHk6IDAuNQogICAgICB9OwogICAgfSwKICAgIGRhdGFKc29uQ29tcHV0ZWQ6IHsKICAgICAgLy8gdG8gYXZvaWQgZWFjaCBvZiB0aG91c2FuZHMgb2YgZ2VvanNvbiBmZWF0dXJlcyBoYXZlIGl0cyBvd24KICAgICAgLy8gZ2V0dGVyL3NldHRlciBzZXQgYnkgdnVlIC0gZnJlZXppbmcgdGhlIGFwcCBvbiBsYXJnZSBudW1iZXIgb2YgcHRzCiAgICAgIC8vIHdlIG1hbnVhbGx5IHJlcmVuZGVyIHJlbGV2YW50IHZ1ZSBjb21wb25lbnRzIGFueXdheQogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gX3RoaXMuZ2V0RGF0YUYoKTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodikgewogICAgICAgIGRhdGFGID0gdjsKICAgICAgfQogICAgfSwKICAgIGNvbXBhcmVKc29uQ29tcHV0ZWQ6IHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmdldENvbXBhcmVGKCk7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHsKICAgICAgICBjb21wYXJlRiA9IHY7CiAgICAgIH0KICAgIH0sCiAgICBzdWJBb2lJbnZlcnNlU3R5bGU6IGZ1bmN0aW9uIHN1YkFvaUludmVyc2VTdHlsZSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdHJva2U6IGZhbHNlLAogICAgICAgIGZpbGxDb2xvcjogdGhpcy5nZXRJbmRpY2F0b3JDb2xvcigncHJpbWFyeScpLAogICAgICAgIGZpbGxPcGFjaXR5OiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5zdWJBb2lGaWxsT3BhY2l0eSB8fCAwLjUKICAgICAgfTsKICAgIH0sCiAgICBiYXNlTGF5ZXJzOiBmdW5jdGlvbiBiYXNlTGF5ZXJzKCkgewogICAgICAvLyBleHBlY3RzIGFuIGFycmF5IG9mIG9iamVjdHMKICAgICAgcmV0dXJuIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmJhc2VMYXllcnMgfHwgdGhpcy5iYXNlQ29uZmlnLmJhc2VMYXllcnNSaWdodE1hcDsKICAgIH0sCiAgICBvdmVybGF5TGF5ZXJzOiBmdW5jdGlvbiBvdmVybGF5TGF5ZXJzKCkgewogICAgICByZXR1cm4gdGhpcy5tZXJnZWRDb25maWdzKClbMF0ub3ZlcmxheUxheWVycyB8fCB0aGlzLmJhc2VDb25maWcub3ZlcmxheUxheWVyc1JpZ2h0TWFwOwogICAgfSwKICAgIG1hcERlZmF1bHRzOiBmdW5jdGlvbiBtYXBEZWZhdWx0cygpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5iYXNlQ29uZmlnLm1hcERlZmF1bHRzKSwgdGhpcy5tZXJnZWRDb25maWdzKClbMF0pOwogICAgfSwKICAgIGNvdW50cnlTZWxlY3Rpb246IGZ1bmN0aW9uIGNvdW50cnlTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5jb3VudHJ5U2VsZWN0aW9uOwogICAgfSwKICAgIGJvcmRlclNlbGVjdGlvbjogZnVuY3Rpb24gYm9yZGVyU2VsZWN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYm9yZGVyU2VsZWN0aW9uOwogICAgfSwKICAgIGluZERlZmluaXRpb246IGZ1bmN0aW9uIGluZERlZmluaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmJhc2VDb25maWcuaW5kaWNhdG9yc0RlZmluaXRpb25bdGhpcy5pbmRpY2F0b3IuaW5kaWNhdG9yXTsKICAgIH0sCiAgICBhZGRpdGlvbmFsTWFwVGltZXM6IGZ1bmN0aW9uIGFkZGl0aW9uYWxNYXBUaW1lcygpIHsKICAgICAgcmV0dXJuIHRoaXMuYmFzZUNvbmZpZy5hZGRpdGlvbmFsTWFwVGltZXMgJiYgdGhpcy5iYXNlQ29uZmlnLmFkZGl0aW9uYWxNYXBUaW1lc1siIi5jb25jYXQodGhpcy5pbmRpY2F0b3IuYW9pSUQsICItIikuY29uY2F0KHRoaXMuaW5kaWNhdG9yLmluZGljYXRvcildOwogICAgfSwKICAgIGV4Y2x1ZGVNYXBUaW1lczogZnVuY3Rpb24gZXhjbHVkZU1hcFRpbWVzKCkgewogICAgICByZXR1cm4gdGhpcy5iYXNlQ29uZmlnLmV4Y2x1ZGVNYXBUaW1lcyAmJiB0aGlzLmJhc2VDb25maWcuZXhjbHVkZU1hcFRpbWVzWyIiLmNvbmNhdCh0aGlzLmluZGljYXRvci5hb2lJRCwgIi0iKS5jb25jYXQodGhpcy5pbmRpY2F0b3IuaW5kaWNhdG9yKV07CiAgICB9LAogICAgcmVwbGFjZU1hcFRpbWVzOiBmdW5jdGlvbiByZXBsYWNlTWFwVGltZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmJhc2VDb25maWcucmVwbGFjZU1hcFRpbWVzICYmIHRoaXMuYmFzZUNvbmZpZy5yZXBsYWNlTWFwVGltZXNbIiIuY29uY2F0KHRoaXMuaW5kaWNhdG9yLmFvaUlELCAiLSIpLmNvbmNhdCh0aGlzLmluZGljYXRvci5pbmRpY2F0b3IpXTsKICAgIH0sCiAgICBpbmRpY2F0b3I6IGZ1bmN0aW9uIGluZGljYXRvcigpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5kaWNhdG9yRmlsdGVyZWRJbnB1dERhdGEodGhpcy5jdXJyZW50SW5kaWNhdG9yIHx8IG51bGwpOwogICAgfSwKICAgIHNob3dBb2k6IGZ1bmN0aW9uIHNob3dBb2koKSB7CiAgICAgIHJldHVybiB0aGlzLmFvaSAmJiAoIXRoaXMuc3ViQW9pIHx8IHRoaXMuc3ViQW9pLmZlYXR1cmVzLmxlbmd0aCA9PT0gMCk7CiAgICB9LAogICAgdmFsaWREcmF3bkFyZWE6IGZ1bmN0aW9uIHZhbGlkRHJhd25BcmVhKCkgewogICAgICAvLyBhbGxvd3MgZm9yIGZ1cnRoZXIgdmFsaWRhdGlvbiBvbiBhcmVhIHNpemUgZXRjLgogICAgICByZXR1cm4gdGhpcy5kcmF3bkFyZWEgIT09IG51bGw7CiAgICB9LAogICAgZHJhd25BcmVhOiBmdW5jdGlvbiBkcmF3bkFyZWEoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5mZWF0dXJlcy5zZWxlY3RlZEFyZWE7CiAgICB9LAogICAgY3VzdG9tQXJlYUZpbHRlcjogZnVuY3Rpb24gY3VzdG9tQXJlYUZpbHRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFGZWF0dXJlcyB8fCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5jdXN0b21BcmVhSW5kaWNhdG9yOwogICAgfSwKICAgIHVzZWRUaW1lczogZnVuY3Rpb24gdXNlZFRpbWVzKCkgewogICAgICB2YXIgdGltZXMgPSB0aGlzLmluZGljYXRvci50aW1lOwogICAgICB2YXIgZW9TZW5zb3IgPSBBcnJheS5pc0FycmF5KHRoaXMuaW5kaWNhdG9yLmVvU2Vuc29yKSAmJiB0aGlzLmluZGljYXRvci5lb1NlbnNvcjsKICAgICAgdmFyIGlucHV0RGF0YSA9IEFycmF5LmlzQXJyYXkodGhpcy5pbmRpY2F0b3IuaW5wdXREYXRhKSAmJiB0aGlzLmluZGljYXRvci5pbnB1dERhdGE7CiAgICAgIHZhciBjb2xvckNvZGUgPSBBcnJheS5pc0FycmF5KHRoaXMuaW5kaWNhdG9yLmNvbG9yQ29kZSkgJiYgdGhpcy5pbmRpY2F0b3IuY29sb3JDb2RlOyAvLyBjb21wbGV0ZWx5IHJlcGxhY2UgZ2l2ZW4gdGltZXMgb3IgZW9TZW5zb3IKCiAgICAgIGlmICh0aGlzLnJlcGxhY2VNYXBUaW1lcyAmJiBBcnJheS5pc0FycmF5KHRoaXMucmVwbGFjZU1hcFRpbWVzLnRpbWUpKSB7CiAgICAgICAgdGltZXMgPSB0aGlzLnJlcGxhY2VNYXBUaW1lcy50aW1lOwogICAgICB9CgogICAgICBpZiAodGhpcy5yZXBsYWNlTWFwVGltZXMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnJlcGxhY2VNYXBUaW1lcy5lb1NlbnNvcikpIHsKICAgICAgICBlb1NlbnNvciA9IHRoaXMucmVwbGFjZU1hcFRpbWVzLmVvU2Vuc29yOyAvLyBqdXN0IGZvciBkaXNwbGF5CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnJlcGxhY2VNYXBUaW1lcyAmJiBBcnJheS5pc0FycmF5KHRoaXMucmVwbGFjZU1hcFRpbWVzLmlucHV0RGF0YSkpIHsKICAgICAgICBpbnB1dERhdGEgPSB0aGlzLnJlcGxhY2VNYXBUaW1lcy5pbnB1dERhdGE7IC8vIG5lZWRzIHRvIGJlIHVzZWQgdW5sZXNzIGluZGljYXRvci5kaXNwbGF5IGlzIHVzZWQgKHRoYXQgb3ZlcnJpZGVzIGl0KQogICAgICB9CgogICAgICBpZiAodGhpcy5yZXBsYWNlTWFwVGltZXMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLnJlcGxhY2VNYXBUaW1lcy5jb2xvckNvZGUpKSB7CiAgICAgICAgY29sb3JDb2RlID0gdGhpcy5yZXBsYWNlTWFwVGltZXMuY29sb3JDb2RlOwogICAgICB9CgogICAgICBpZiAodGhpcy5hZGRpdGlvbmFsTWFwVGltZXMpIHsKICAgICAgICAvLyBhZGQgYWRkaXRpb25hbCB0aW1lcyBhbmQgZW9TZW5zb3IgdG8gb3JpZ2luYWwgYXJyYXlzCiAgICAgICAgLy8gc29ydCB0aW1lIGFzY2VuZGluZyBhbmQgc29ydCBhcnJheXMgYmFzZWQgb24gdGltZSBhcnJheSB2aWEgaGVscGVyIGxpc3QgY29tYmluaW5nIGFsbAogICAgICAgIHZhciBkdE9iamVjdHMgPSB0aGlzLmFkZGl0aW9uYWxNYXBUaW1lcy50aW1lLm1hcChmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08odCk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIG1lcmdlZFRpbWVzID0gdGltZXMuY29uY2F0KGR0T2JqZWN0cyk7CiAgICAgICAgdmFyIG1lcmdlZFNlbnNvcnMgPSBlb1NlbnNvci5jb25jYXQodGhpcy5hZGRpdGlvbmFsTWFwVGltZXMuZW9TZW5zb3IpOwogICAgICAgIHZhciBtZXJnZWRJbnB1dERhdGEgPSBpbnB1dERhdGEuY29uY2F0KHRoaXMuYWRkaXRpb25hbE1hcFRpbWVzLmlucHV0RGF0YSk7CiAgICAgICAgdmFyIG1lcmdlZENvbG9yQ29kZSA9IGNvbG9yQ29kZS5jb25jYXQodGhpcy5hZGRpdGlvbmFsTWFwVGltZXMuY29sb3JDb2RlKTsgLy8gY29tYmluZSB0aGUgYXJyYXlzCgogICAgICAgIHZhciBsaXN0ID0gW107CgogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVyZ2VkVGltZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGxpc3QucHVzaCh7CiAgICAgICAgICAgIHRpbWU6IG1lcmdlZFRpbWVzW2pdLAogICAgICAgICAgICBlb1NlbnNvcjogbWVyZ2VkU2Vuc29yc1tqXSwKICAgICAgICAgICAgaW5wdXREYXRhOiBtZXJnZWRJbnB1dERhdGFbal0sCiAgICAgICAgICAgIGNvbG9yQ29kZTogbWVyZ2VkQ29sb3JDb2RlW2pdCiAgICAgICAgICB9KTsKICAgICAgICB9IC8vIHNvcnQgbWFwcGluZyBieSB0aW1lIGFzYwoKCiAgICAgICAgbGlzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gYS50aW1lLnRvTWlsbGlzKCkgLSBiLnRpbWUudG9NaWxsaXMoKTsKICAgICAgICB9KTsgLy8gc2VwYXJhdGUgdGhlbSBiYWNrIG91dAoKICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGxpc3QubGVuZ3RoOyBrKyspIHsKICAgICAgICAgIG1lcmdlZFRpbWVzW2tdID0gbGlzdFtrXS50aW1lOwogICAgICAgICAgbWVyZ2VkU2Vuc29yc1trXSA9IGxpc3Rba10uZW9TZW5zb3I7CiAgICAgICAgICBtZXJnZWRJbnB1dERhdGFba10gPSBsaXN0W2tdLmlucHV0RGF0YTsKICAgICAgICAgIG1lcmdlZENvbG9yQ29kZVtrXSA9IGxpc3Rba10uY29sb3JDb2RlOwogICAgICAgIH0KCiAgICAgICAgdGltZXMgPSBtZXJnZWRUaW1lczsKICAgICAgICBlb1NlbnNvciA9IG1lcmdlZFNlbnNvcnM7CiAgICAgICAgaW5wdXREYXRhID0gbWVyZ2VkSW5wdXREYXRhOwogICAgICAgIGNvbG9yQ29kZSA9IG1lcmdlZENvbG9yQ29kZTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZXhjbHVkZU1hcFRpbWVzICYmIEFycmF5LmlzQXJyYXkodGhpcy5leGNsdWRlTWFwVGltZXMpKSB7CiAgICAgICAgLy8gZXhjbHVkZSB0aW1lcyBhbmQgcmVzcGVjdGl2ZSBlbnRyaWVzIGZyb20gb3RoZXIgYXJyYXlzCiAgICAgICAgdmFyIF9kdE9iamVjdHMgPSB0aGlzLmV4Y2x1ZGVNYXBUaW1lcy5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tSVNPKHQpOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgaW5kVG9EZWxldGUgPSB0aW1lcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGUsIGkpIHsKICAgICAgICAgIC8vIGZpbmQgaWYgYW55IHRpbWUgaXMgaW4gdG8gYmUgZGVsZXRlZAogICAgICAgICAgdmFyIGZvdW5kID0gX2R0T2JqZWN0cy5maW5kKGZ1bmN0aW9uICh0aW1lKSB7CiAgICAgICAgICAgIHJldHVybiB0aW1lLnRvTWlsbGlzKCkgPT09IGUudG9NaWxsaXMoKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmICh0eXBlb2YgZm91bmQgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIC8vIGFkZCBpdHMgaW5kZXggdG8gbGlzdAogICAgICAgICAgICBhLnB1c2goaSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGE7CiAgICAgICAgfSwgW10pOyAvLyBzZXQgaXRlbXMgaW4gYWxsIGFycmF5cyB0byBudWxsCgogICAgICAgIGluZFRvRGVsZXRlLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICAgIHRpbWVzW2ldID0gbnVsbDsKCiAgICAgICAgICBpZiAodHlwZW9mIGVvU2Vuc29yW2ldICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBlb1NlbnNvcltpXSA9IG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dERhdGFbaV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGlucHV0RGF0YVtpXSA9IG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiBjb2xvckNvZGVbaV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGNvbG9yQ29kZVtpXSA9IG51bGw7CiAgICAgICAgICB9CiAgICAgICAgfSk7IC8vIGZpbHRlciBvdXQgbnVsbHMKCiAgICAgICAgdGltZXMgPSB0aW1lcy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlICE9PSBudWxsOwogICAgICAgIH0pOwogICAgICAgIGVvU2Vuc29yID0gZW9TZW5zb3IuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZSAhPT0gbnVsbDsKICAgICAgICB9KTsKICAgICAgICBpbnB1dERhdGEgPSBpbnB1dERhdGEuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZSAhPT0gbnVsbDsKICAgICAgICB9KTsKICAgICAgICBjb2xvckNvZGUgPSBjb2xvckNvZGUuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gZSAhPT0gbnVsbDsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICB0aW1lOiB0aW1lcywKICAgICAgICBlb1NlbnNvcjogZW9TZW5zb3IsCiAgICAgICAgaW5wdXREYXRhOiBpbnB1dERhdGEsCiAgICAgICAgY29sb3JDb2RlOiBjb2xvckNvZGUKICAgICAgfTsKICAgIH0sCiAgICBhcnJheU9mT2JqZWN0czogZnVuY3Rpb24gYXJyYXlPZk9iamVjdHMoKSB7CiAgICAgIHZhciBzZWxlY3Rpb25PcHRpb25zID0gW107CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudXNlZFRpbWVzLnRpbWUubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmdldFRpbWVMYWJlbCh0aGlzLnVzZWRUaW1lcy50aW1lW2ldKTsKCiAgICAgICAgaWYgKHRoaXMudXNlZFRpbWVzLmVvU2Vuc29yKSB7CiAgICAgICAgICB2YXIgZW9TZW5zb3IgPSB0aGlzLnVzZWRUaW1lcy5lb1NlbnNvci5sZW5ndGggPT09IDEgPyB0aGlzLnVzZWRUaW1lcy5lb1NlbnNvclswXSA6IHRoaXMudXNlZFRpbWVzLmVvU2Vuc29yW2ldOwogICAgICAgICAgbGFiZWwgKz0gIiAtICIuY29uY2F0KGVvU2Vuc29yKTsKICAgICAgICB9CgogICAgICAgIHNlbGVjdGlvbk9wdGlvbnMucHVzaCh7CiAgICAgICAgICB2YWx1ZTogdGhpcy51c2VkVGltZXMudGltZVtpXSwKICAgICAgICAgIG5hbWU6IGxhYmVsCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZWxlY3Rpb25PcHRpb25zOwogICAgfSwKICAgIGN1cnJlbnRUaW1lOiBmdW5jdGlvbiBjdXJyZW50VGltZSgpIHsKICAgICAgdmFyIHJldHVyblRpbWUgPSB0aGlzLnVzZWRUaW1lcy50aW1lW3RoaXMudXNlZFRpbWVzLnRpbWUubGVuZ3RoIC0gMV07CgogICAgICBpZiAodGhpcy5kYXRhTGF5ZXJUaW1lICE9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuVGltZSA9IHRoaXMuZGF0YUxheWVyVGltZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJldHVyblRpbWU7CiAgICB9LAogICAgY3VycmVudENvbXBhcmVUaW1lOiBmdW5jdGlvbiBjdXJyZW50Q29tcGFyZVRpbWUoKSB7CiAgICAgIHZhciByZXR1cm5UaW1lID0gdGhpcy5nZXRJbml0aWFsQ29tcGFyZVRpbWUoKTsKCiAgICAgIGlmICh0aGlzLmNvbXBhcmVMYXllclRpbWUgIT09IG51bGwpIHsKICAgICAgICByZXR1cm5UaW1lID0gdGhpcy5jb21wYXJlTGF5ZXJUaW1lOwogICAgICB9CgogICAgICBpZiAodGhpcy5pbmRpY2F0b3IuY29tcGFyZURpc3BsYXkpIHsKICAgICAgICAvLyBzaGFyZWQgdGltZSBvbiBib3RoIGxheWVycyBpbiBjYXNlIG9mIGNvbXBhcmVEaXNwbGF5IGJlaW5nIHNldAogICAgICAgIHJldHVyblRpbWUgPSB0aGlzLmRhdGFMYXllclRpbWU7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXR1cm5UaW1lOwogICAgfSwKICAgIGFvaTogZnVuY3Rpb24gYW9pKCkgewogICAgICByZXR1cm4gdGhpcy5pbmRpY2F0b3IuYW9pOwogICAgfSwKICAgIHN1YkFvaTogZnVuY3Rpb24gc3ViQW9pKCkgewogICAgICByZXR1cm4gdGhpcy5pbmRpY2F0b3Iuc3ViQW9pOwogICAgfSwKICAgIHN1YkFvaUludmVyc2U6IGZ1bmN0aW9uIHN1YkFvaUludmVyc2UoKSB7CiAgICAgIC8vIGNyZWF0ZSBhbiBpbnZlcnNlIG9mIHN1YmFvaSwgdXNpbmcgZGlmZmVyZW5jZSBvZiB3aG9sZSB3b3JsZCBhbmQgc3ViYW9pCiAgICAgIHZhciBzdWJhb2lJbnYgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuc3ViQW9pKSk7IC8vIGJvdGggT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdWJBb2kpIGFuZCB7IC4uLnRoaXMuc3ViQW9pIH0gY3JlYXRlIHNoYWxsb3cgY29weQoKICAgICAgaWYgKHN1YmFvaUludi5mZWF0dXJlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICB2YXIgZ2xvYmFsQm94ID0gewogICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLAogICAgICAgICAgcHJvcGVydGllczoge30sCiAgICAgICAgICBnZW9tZXRyeTogewogICAgICAgICAgICB0eXBlOiAnUG9seWdvbicsCiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbW1stMTgwLCAtOTBdLCBbMTgwLCAtOTBdLCBbMTgwLCA5MF0sIFstMTgwLCA5MF0sIFstMTgwLCAtOTBdXV0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBkaWZmID0gdHVyZkRpZmZlcmVuY2UoZ2xvYmFsQm94LCBzdWJhb2lJbnYuZmVhdHVyZXNbMF0pOwogICAgICAgIHN1YmFvaUludi5mZWF0dXJlc1swXSA9IGRpZmY7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdWJhb2lJbnY7CiAgICB9LAogICAgY2x1c3Rlck9wdGlvbnM6IGZ1bmN0aW9uIGNsdXN0ZXJPcHRpb25zKCkgewogICAgICByZXR1cm4gewogICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiAxMywKICAgICAgICBhbmltYXRlOiBmYWxzZSwKICAgICAgICAvLyB6b29tVG9Cb3VuZHNPbkNsaWNrOiBmYWxzZSwKICAgICAgICBpY29uQ3JlYXRlRnVuY3Rpb246IGZ1bmN0aW9uIGljb25DcmVhdGVGdW5jdGlvbihjbHVzdGVyKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZXMKICAgICAgICAgIC8vIG1vZGlmaWVkIHNlbGVjdGVkIGNsdXN0ZXIgc3R5bGUKICAgICAgICAgIHZhciBjaGlsZENvdW50ID0gY2x1c3Rlci5nZXRDaGlsZENvdW50KCk7CiAgICAgICAgICByZXR1cm4gbmV3IERpdkljb24oewogICAgICAgICAgICBodG1sOiAiPGRpdj48c3Bhbj4iLmNvbmNhdChjaGlsZENvdW50LCAiPC9zcGFuPjwvZGl2PiIpLAogICAgICAgICAgICBjbGFzc05hbWU6ICdtYXJrZXItY2x1c3RlcicsCiAgICAgICAgICAgIGljb25TaXplOiBuZXcgUG9pbnQoNDAsIDQwKQogICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBwb2x5Z29uT3B0aW9uczogewogICAgICAgICAgZmlsbENvbG9yOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IsCiAgICAgICAgICBjb2xvcjogdGhpcy5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yLAogICAgICAgICAgd2VpZ2h0OiAwLjUsCiAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgZmlsbE9wYWNpdHk6IDAuMywKICAgICAgICAgIGRhc2hBcnJheTogNAogICAgICAgIH0KICAgICAgfTsKICAgIH0sCiAgICBkcmF3T3B0aW9uczogZnVuY3Rpb24gZHJhd09wdGlvbnMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgcG9zaXRpb246ICd0b3ByaWdodCcsCiAgICAgICAgZHJhdzogewogICAgICAgICAgcG9seWxpbmU6IGZhbHNlLAogICAgICAgICAgY2lyY2xlOiBmYWxzZSwKICAgICAgICAgIG1hcmtlcjogZmFsc2UsCiAgICAgICAgICBjaXJjbGVtYXJrZXI6IGZhbHNlLAogICAgICAgICAgcG9seWdvbjogewogICAgICAgICAgICBzaGFwZU9wdGlvbnM6IHsKICAgICAgICAgICAgICBjb2xvcjogdGhpcy5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICByZWN0YW5nbGU6IHsKICAgICAgICAgICAgc2hvd0FyZWE6IGZhbHNlLAogICAgICAgICAgICBzaGFwZU9wdGlvbnM6IHsKICAgICAgICAgICAgICBjb2xvcjogdGhpcy5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgfSksCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZGF0YUxheWVySW5kZXggPSB0aGlzLnVzZWRUaW1lcy50aW1lLmxlbmd0aCAtIDE7CiAgICB0aGlzLmRhdGFMYXllclRpbWUgPSB7CiAgICAgIHZhbHVlOiB0aGlzLnVzZWRUaW1lcy50aW1lW3RoaXMuZGF0YUxheWVySW5kZXhdCiAgICB9OwogICAgdGhpcy5jb21wYXJlTGF5ZXJUaW1lID0gewogICAgICB2YWx1ZTogdGhpcy5nZXRJbml0aWFsQ29tcGFyZVRpbWUoKQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNyZWF0ZUxhdExuZzogZnVuY3Rpb24gY3JlYXRlTGF0TG5nKGxhdGxuZykgewogICAgICB2YXIgbGxvYmogPSBsYXRsbmcuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTsKICAgICAgY29uc29sZS5sb2cobGxvYmopOwogICAgICByZXR1cm4gbGxvYmo7CiAgICB9LAogICAgem9vbVVwZGF0ZWQ6IGZ1bmN0aW9uIHpvb21VcGRhdGVkKHpvb20pIHsKICAgICAgdGhpcy56b29tID0gem9vbTsKICAgIH0sCiAgICBjZW50ZXJVcGRhdGVkOiBmdW5jdGlvbiBjZW50ZXJVcGRhdGVkKGNlbnRlcikgewogICAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjsKICAgIH0sCiAgICBib3VuZHNVcGRhdGVkOiBmdW5jdGlvbiBib3VuZHNVcGRhdGVkKGJvdW5kcykgewogICAgICB0aGlzLmJvdW5kcyA9IGJvdW5kczsKICAgIH0sCiAgICBvbk1hcFJlYWR5OiBmdW5jdGlvbiBvbk1hcFJlYWR5KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMubWFwID0gdGhpcy4kcmVmcy5tYXAubWFwT2JqZWN0OwogICAgICB2YXIgbGF5ZXJCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlJyk7CiAgICAgIGxheWVyQnV0dG9ucy5mb3JFYWNoKGZ1bmN0aW9uIChsQikgewogICAgICAgIHJldHVybiBsQi5pbm5lckhUTUwgPSAiPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCIiLmNvbmNhdChfdGhpczIuYXBwQ29uZmlnLmJyYW5kaW5nLnByaW1hcnlDb2xvciwgIlwiIHdpZHRoPVwiMzJweFwiIGhlaWdodD1cIjMycHhcIj48cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIvPjxwYXRoIGQ9XCJNMTEuOTkgMTguNTRsLTcuMzctNS43M0wzIDE0LjA3bDkgNyA5LTctMS42My0xLjI3LTcuMzggNS43NHpNMTIgMTZsNy4zNi01LjczTDIxIDlsLTktNy05IDcgMS42MyAxLjI3TDEyIDE2elwiLz48L3N2Zz4iKTsKICAgICAgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgLy8gdXBkYXRlIGxlYWZsZXQgY29udHJvbHMKCiAgICAgIEwuY29udHJvbC5tb3VzZVBvc2l0aW9uKHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmCiAgICAgICAgZW1wdHlTdHJpbmc6ICcnLAogICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKGxvbiwgbGF0KSB7CiAgICAgICAgICByZXR1cm4gIiIuY29uY2F0KGxvbi50b0ZpeGVkKDMpLCAiLCAiKS5jb25jYXQobGF0LnRvRml4ZWQoMykpOwogICAgICAgIH0sCiAgICAgICAgcG9zaXRpb246ICdib3R0b21yaWdodCcKICAgICAgfSkuYWRkVG8odGhpcy5tYXApOyAvLyBoaWRlIGF0dHJpYnV0aW9uIHVuZGVyIGljb24KCiAgICAgIHRoaXMubWFwLmF0dHJpYnV0aW9uQ29udHJvbC5fdXBkYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgICB2YXIgYXR0cmlicyA9IFtdOwogICAgICAgIHZhciBrayA9IE9iamVjdC5rZXlzKHRoaXMuX2F0dHJpYnV0aW9ucyk7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2subGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgIGlmICh0aGlzLl9hdHRyaWJ1dGlvbnNba2tbaV1dKSB7CiAgICAgICAgICAgIGF0dHJpYnMucHVzaChra1tpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgcHJlZml4QW5kQXR0cmlicyA9IFtdOwoKICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZWZpeCkgewogICAgICAgICAgcHJlZml4QW5kQXR0cmlicy5wdXNoKHRoaXMub3B0aW9ucy5wcmVmaXgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGF0dHJpYnMubGVuZ3RoKSB7CiAgICAgICAgICBwcmVmaXhBbmRBdHRyaWJzLnB1c2goYXR0cmlicy5qb2luKCcsICcpKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2NvbnRhaW5lci5pbm5lckhUTUwgPSAiPGRpdiBjbGFzcz0nYXR0cmlidXRpb24tYm9keSc+Ii5jb25jYXQocHJlZml4QW5kQXR0cmlicy5qb2luKCcgfCAnKSwgIjwvZGl2PjxkaXYgY2xhc3M9J2F0dHJpYnV0aW9uLWljb24nPlx1MjEzOTwvZGl2PiIpOwogICAgICB9OwoKICAgICAgdGhpcy5tYXAuYXR0cmlidXRpb25Db250cm9sLl91cGRhdGUoKTsgLy8gYWRkIGxvYWRpbmcgaW5kaWNhdG9yCgoKICAgICAgTC5Db250cm9sLmxvYWRpbmcoewogICAgICAgIHBvc2l0aW9uOiAnYm90dG9tbGVmdCcsCiAgICAgICAgZGVsYXlJbmRpY2F0b3I6IDIwMAogICAgICB9KS5hZGRUbyh0aGlzLm1hcCk7IC8vIGFkZCBBL0Igc2xpZGVyCgogICAgICB2YXIgbGVmdExheWVycyA9IHRoaXMuZXh0cmFjdEFjdHVhbExheWVycyh0aGlzLiRyZWZzLmNvbXBhcmVMYXllcnMpOwogICAgICB2YXIgcmlnaHRMYXllcnMgPSB0aGlzLmV4dHJhY3RBY3R1YWxMYXllcnModGhpcy4kcmVmcy5kYXRhTGF5ZXJzKTsKICAgICAgdGhpcy5zbGlkZXIgPSBMLmNvbnRyb2wuc2lkZUJ5U2lkZShsZWZ0TGF5ZXJzLCByaWdodExheWVycyk7CiAgICAgIHRoaXMuZHJhd0NvbnRyb2wgPSBuZXcgTC5Db250cm9sLkRyYXcodGhpcy5kcmF3T3B0aW9ucyk7CiAgICAgIHRoaXMubWFwLm9uKEwuRHJhdy5FdmVudC5DUkVBVEVELCBmdW5jdGlvbiAoZSkgewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgICAvLyBzZXQgZ2xvYmFsIGFyZWEgZ2VvbWV0cnkgYXMganNvbgogICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnZmVhdHVyZXMvU0VUX1NFTEVDVEVEX0FSRUEnLCBlLmxheWVyLnRvR2VvSlNPTigpLmdlb21ldHJ5KTsKICAgICAgfS5iaW5kKHRoaXMpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAvLyBvbmx5IGRyYXcgb25lIGZlYXR1cmUgYXQgYSB0aW1lCgogICAgICB0aGlzLm1hcC5vbihMLkRyYXcuRXZlbnQuRFJBV1NUQVJULCBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgIHRoaXMuY2xlYXJDdXN0b21BcmVhRmlsdGVyKCk7CiAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgIHRoaXMuaW5pdGlhbERyYXdTZWxlY3RlZEFyZWEoKTsKICAgICAgdGhpcy5vblJlc2l6ZSgpOwoKICAgICAgaWYgKCF0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5jdXN0b21BcmVhRmVhdHVyZXMgfHwgdGhpcy52YWxpZERyYXduQXJlYSkgewogICAgICAgIHRoaXMuZmV0Y2hGZWF0dXJlcygnZGF0YScpOwogICAgICB9CgogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuZmx5VG9Cb3VuZHMoKTsKICAgICAgfSwgMTAwKTsKICAgIH0sCiAgICBvblJlc2l6ZTogZnVuY3Rpb24gb25SZXNpemUoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgLy8gdG8gZml4IHBhbmVsIHNpemUgZm9yIHJlZmVyZW5jZSBpbWFnZSB3aW5kb3cKICAgICAgaWYgKHRoaXMubWFwKSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczMubWFwLmludmFsaWRhdGVTaXplKCk7CiAgICAgICAgfSwgMTAwKTsKICAgICAgfQogICAgfSwKICAgIGluaXRpYWxEcmF3U2VsZWN0ZWRBcmVhOiBmdW5jdGlvbiBpbml0aWFsRHJhd1NlbGVjdGVkQXJlYSgpIHsKICAgICAgaWYgKHRoaXMuY3VzdG9tQXJlYUZpbHRlcikgewogICAgICAgIC8vIGFkZCBkcmF3IGNvbnRyb2xzCiAgICAgICAgdGhpcy5kcmF3Q29udHJvbC5hZGRUbyh0aGlzLm1hcCk7CiAgICAgICAgdGhpcy5yZW5kZXJUcmFzaEJpbiA9IHRydWU7CiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEFyZWFGZWF0dXJlKCk7CiAgICAgIH0KICAgIH0sCiAgICB1cGRhdGVTZWxlY3RlZEFyZWFGZWF0dXJlOiBmdW5jdGlvbiB1cGRhdGVTZWxlY3RlZEFyZWFGZWF0dXJlKCkgewogICAgICB2YXIgZnRycyA9IG51bGw7CgogICAgICBpZiAodGhpcy52YWxpZERyYXduQXJlYSkgewogICAgICAgIHRoaXMuZmV0Y2hGZWF0dXJlcygnZGF0YScpOwoKICAgICAgICBpZiAodGhpcy5lbmFibGVDb21wYXJlKSB7CiAgICAgICAgICB0aGlzLmZldGNoRmVhdHVyZXMoJ2NvbXBhcmUnKTsKICAgICAgICB9CgogICAgICAgIGZ0cnMgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmRyYXduQXJlYSk7CiAgICAgIH0KCiAgICAgIGlmIChmdHJzKSB7CiAgICAgICAgLy8gYWRkIGZlYXR1cmUgdG8gYmUgZHJhd24gaW50byBsYXllcgogICAgICAgIHRoaXMuJHJlZnMuY3VzdG9tQXJlYUZpbHRlckZlYXR1cmVzLm1hcE9iamVjdC5hZGRMYXllcihnZW9Kc29uKGZ0cnMsIHsKICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IKICAgICAgICAgIH0KICAgICAgICB9KSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kcmVmcy5jdXN0b21BcmVhRmlsdGVyRmVhdHVyZXMubWFwT2JqZWN0LmNsZWFyTGF5ZXJzKCk7CiAgICAgIH0KICAgIH0sCiAgICBjb3VudHJpZXNPcHRpb25zOiBmdW5jdGlvbiBjb3VudHJpZXNPcHRpb25zKCkgewogICAgICB2YXIgY3VycmVudEluZGljYXRvciA9IHRoaXMuaW5kaWNhdG9yOwogICAgICByZXR1cm4gewogICAgICAgIG9uRWFjaEZlYXR1cmU6IGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHsKICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgICAgIGxheWVyLmJpbmRUb29sdGlwKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmUucHJvcGVydGllcy5uYW1lOwogICAgICAgICAgfSwgewogICAgICAgICAgICBkaXJlY3Rpb246ICd0b3AnLAogICAgICAgICAgICBzdGlja3k6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgICAgbGF5ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY291bnRyeUEyID0gZmVhdHVyZS5wcm9wZXJ0aWVzLmFscGhhMjsKCiAgICAgICAgICAgIF90aGlzNC5mZXRjaE1vYmlsaXR5RGF0YShjb3VudHJ5QTIsIGN1cnJlbnRJbmRpY2F0b3IuYW9pSUQpOwoKICAgICAgICAgICAgaWYgKF90aGlzNC5zZWxlY3RlZExheWVyICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgX3RoaXM0LnNlbGVjdGVkTGF5ZXIuc2V0U3R5bGUoewogICAgICAgICAgICAgICAgY29sb3I6ICcjMjIyJywKICAgICAgICAgICAgICAgIHdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmYnLAogICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXM0LnNlbGVjdGVkQ291bnRyeSA9IGNvdW50cnlBMjsKICAgICAgICAgICAgX3RoaXM0LnNlbGVjdGVkTGF5ZXIgPSBsYXllcjsKICAgICAgICAgICAgX3RoaXM0LnBvcHVwTmFtZSA9IGZlYXR1cmUucHJvcGVydGllcy5uYW1lOwogICAgICAgICAgfSk7CiAgICAgICAgICBsYXllci5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIGN1cnJMYXllciA9IGUudGFyZ2V0OwogICAgICAgICAgICBjdXJyTGF5ZXIuc2V0U3R5bGUoewogICAgICAgICAgICAgIHdlaWdodDogMiwKICAgICAgICAgICAgICBjb2xvcjogX3RoaXM0LiR2dWV0aWZ5LnRoZW1lLmN1cnJlbnRUaGVtZS5wcmltYXJ5LAogICAgICAgICAgICAgIGZpbGxDb2xvcjogX3RoaXM0LiR2dWV0aWZ5LnRoZW1lLmN1cnJlbnRUaGVtZS5wcmltYXJ5LAogICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjcKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoIUwuQnJvd3Nlci5pZSAmJiAhTC5Ccm93c2VyLm9wZXJhKSB7CiAgICAgICAgICAgICAgbGF5ZXIuYnJpbmdUb0Zyb250KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgbGF5ZXIub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIGN1cnJMYXllciA9IGUudGFyZ2V0OwoKICAgICAgICAgICAgaWYgKF90aGlzNC5zZWxlY3RlZENvdW50cnkgIT09IGZlYXR1cmUucHJvcGVydGllcy5hbHBoYTIpIHsKICAgICAgICAgICAgICBjdXJyTGF5ZXIuc2V0U3R5bGUoewogICAgICAgICAgICAgICAgY29sb3I6ICcjMjIyJywKICAgICAgICAgICAgICAgIHdlaWdodDogMSwKICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmYnLAogICAgICAgICAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfS5iaW5kKHRoaXMpCiAgICAgIH07CiAgICB9LAogICAgZmVhdHVyZU9wdGlvbnM6IGZ1bmN0aW9uIGZlYXR1cmVPcHRpb25zKHNpZGUpIHsKICAgICAgdmFyIHN0eWxlID0gdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdLmZlYXR1cmVzICYmIHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKVswXS5mZWF0dXJlcy5zdHlsZSA/IHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKVswXS5mZWF0dXJlcy5zdHlsZSA6IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICByZXR1cm4gewogICAgICAgIG9uRWFjaEZlYXR1cmU6IGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHsKICAgICAgICAgIC8vIGlmIGZlYXR1cmVzUGFyYW1ldGVycyBhdmFpbGFibGUsIHNob3cgb25seSBwcm9wZXJ0aWVzIGZyb20gbWFwcGluZywgb3RoZXJ3aXNlIGR1bXAgYWxsCiAgICAgICAgICB2YXIgYWxsb3dlZFBhcmFtcyA9IHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKVswXS5mZWF0dXJlcyA/IHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKVswXS5mZWF0dXJlcy5hbGxvd2VkUGFyYW1ldGVycyA6IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgICB2YXIgYWxsS2V5cyA9IE9iamVjdC5rZXlzKGZlYXR1cmUucHJvcGVydGllcyk7CiAgICAgICAgICB2YXIgdG9vbHRpcCA9ICcnOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsS2V5cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoIWFsbG93ZWRQYXJhbXMgfHwgX3R5cGVvZihhbGxvd2VkUGFyYW1zKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoYWxsb3dlZFBhcmFtcykuaW5jbHVkZXMoYWxsS2V5c1tpXSkgfHwgQXJyYXkuaXNBcnJheShhbGxvd2VkUGFyYW1zKSAmJiBhbGxvd2VkUGFyYW1zLmluY2x1ZGVzKGFsbEtleXNbaV0pKSB7CiAgICAgICAgICAgICAgdG9vbHRpcCArPSAiPHNwYW4+PGI+Ii5jb25jYXQoYWxsS2V5c1tpXSwgIjwvYj46ICIpLmNvbmNhdChmZWF0dXJlLnByb3BlcnRpZXNbYWxsS2V5c1tpXV0sICI8L3NwYW4+PGJyPiIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRvb2x0aXAgIT09ICcnKSB7CiAgICAgICAgICAgIGxheWVyLmJpbmRUb29sdGlwKHRvb2x0aXAsIHsKICAgICAgICAgICAgICBwYW5lOiB0aGlzLnBvcHVwUGFuZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gLy8gdG8gbWFrZSBjbHVzdGVyaW5nIHdvcmsKCgogICAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzQ2x1c3RlcmluZykgewogICAgICAgICAgICBsYXllci5nZXRMYXRMbmcgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGdlb0pzb24oZmVhdHVyZSkuZ2V0Qm91bmRzKCkuZ2V0Q2VudGVyKCk7CiAgICAgICAgICAgIH07IC8vZXNsaW50LWRpc2FibGUtbGluZQoKCiAgICAgICAgICAgIGxheWVyLnNldExhdExuZyA9IGZ1bmN0aW9uICgpIHt9OyAvL2VzbGludC1kaXNhYmxlLWxpbmUKCgogICAgICAgICAgICBsYXllci5fbGF0bG5nID0gbGF5ZXIuZ2V0TGF0TG5nKCk7IC8vZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgICAgfQogICAgICAgIH0uYmluZCh0aGlzKSwKICAgICAgICAvLyBwb2ludCBjaXJjbGUgbWFya2VyIHN0eWxpbmcKICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChmZWF0dXJlLCBsYXRsbmcpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgICAgIHJldHVybiBjaXJjbGVNYXJrZXIobGF0bG5nLCB7CiAgICAgICAgICAgIHJhZGl1czogc3R5bGUucmFkaXVzIHx8IDgsCiAgICAgICAgICAgIGNvbG9yOiBzdHlsZS5jb2xvciB8fCAnI0ZGQTUwMCcsCiAgICAgICAgICAgIHdlaWdodDogc3R5bGUud2VpZ2h0IHx8IDIsCiAgICAgICAgICAgIG9wYWNpdHk6IHN0eWxlLm9wYWNpdHkgfHwgMSwKICAgICAgICAgICAgZGFzaEFycmF5OiBzdHlsZS5kYXNoQXJyYXkgfHwgbnVsbCwKICAgICAgICAgICAgZGFzaE9mZnNldDogc3R5bGUuZGFzaE9mZnNldCB8fCBudWxsLAogICAgICAgICAgICBmaWxsT3BhY2l0eTogc3R5bGUuZmlsbE9wYWNpdHkgfHwgMSwKICAgICAgICAgICAgZmlsbENvbG9yOiBzdHlsZS5maWxsQ29sb3IgfHwgJyNGRkE1MDAnLAogICAgICAgICAgICBmaWxsOiBzdHlsZS5maWxsIHx8IHRydWUsCiAgICAgICAgICAgIHBhbmU6IHNpZGUgPT09ICdkYXRhJyA/IHRoaXMudG9vbHRpcFBhbmUgOiB0aGlzLnNoYWRvd1BhbmUKICAgICAgICAgIH0pOwogICAgICAgIH0uYmluZCh0aGlzKSwKICAgICAgICAvLyBwb2x5Z29uIGFuZCBsaW5lIHN0eWxpbmcKICAgICAgICBzdHlsZTogewogICAgICAgICAgY29sb3I6IHN0eWxlLmNvbG9yIHx8ICcjRkZBNTAwJywKICAgICAgICAgIHdlaWdodDogc3R5bGUud2VpZ2h0IHx8IDIsCiAgICAgICAgICBvcGFjaXR5OiBzdHlsZS5vcGFjaXR5IHx8IDEsCiAgICAgICAgICBkYXNoQXJyYXk6IHN0eWxlLmRhc2hBcnJheSB8fCBudWxsLAogICAgICAgICAgZGFzaE9mZnNldDogc3R5bGUuZGFzaE9mZnNldCB8fCBudWxsLAogICAgICAgICAgZmlsbE9wYWNpdHk6IHN0eWxlLmZpbGxPcGFjaXR5IHx8IDAsCiAgICAgICAgICBmaWxsQ29sb3I6IHN0eWxlLmZpbGxDb2xvciB8fCAnI0ZGQTUwMCcsCiAgICAgICAgICBmaWxsOiBzdHlsZS5maWxsIHx8IHRydWUKICAgICAgICB9CiAgICAgIH07CiAgICB9LAogICAgZ2V0Q29sb3JDb2RlOiBmdW5jdGlvbiBnZXRDb2xvckNvZGUoc2lkZSkgewogICAgICB2YXIgaSA9IHNpZGUgPT09ICdjb21wYXJlJyA/IHRoaXMuY29tcGFyZUxheWVySW5kZXggOiB0aGlzLmRhdGFMYXllckluZGV4OwogICAgICB2YXIgY3VycmVudFZhbHVlID0gbnVsbDsgLy8gY29tcGVuc2F0ZSBmb3IgY29sb3IgY29kZSB3aXRoIG9ubHkgb25lIGVudHJ5LCBzdGlsbCBzaG93aW5nIGl0CgogICAgICBpZiAodGhpcy51c2VkVGltZXMuY29sb3JDb2RlKSB7CiAgICAgICAgdmFyIGNvbG9ycyA9IHRoaXMudXNlZFRpbWVzLmNvbG9yQ29kZTsKCiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JzKSAmJiBjb2xvcnMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICBjdXJyZW50VmFsdWUgPSBjb2xvcnNbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmcKICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JzKSAmJiBjb2xvcnNbaV0pIHsKICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGNvbG9yc1tpXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTsKICAgIH0sCiAgICBnZXRBb2lGaWxsOiBmdW5jdGlvbiBnZXRBb2lGaWxsKHNpZGUpIHsKICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZ2V0Q29sb3JDb2RlKHNpZGUpOwogICAgICByZXR1cm4gY3VycmVudFZhbHVlID8gdGhpcy5nZXRJbmRpY2F0b3JDb2xvcihjdXJyZW50VmFsdWUpIDogdGhpcy5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yOwogICAgfSwKICAgIHN1YkFvaVN0eWxlOiBmdW5jdGlvbiBzdWJBb2lTdHlsZShzaWRlKSB7CiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmdldENvbG9yQ29kZShzaWRlKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBjb2xvcjogY3VycmVudFZhbHVlID8gdGhpcy5nZXRJbmRpY2F0b3JDb2xvcihjdXJyZW50VmFsdWUpIDogdGhpcy5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yLAogICAgICAgIHdlaWdodDogMywKICAgICAgICBmaWxsOiBmYWxzZQogICAgICB9OwogICAgfSwKICAgIGNvbmZpZ0Zyb21JbnB1dERhdGE6IGZ1bmN0aW9uIGNvbmZpZ0Zyb21JbnB1dERhdGEoc2lkZSkgewogICAgICB2YXIgaSA9IHNpZGUgPT09ICdjb21wYXJlJyA/IHRoaXMuY29tcGFyZUxheWVySW5kZXggOiB0aGlzLmRhdGFMYXllckluZGV4OwogICAgICB2YXIgaW5wdXREYXRhID0gdGhpcy51c2VkVGltZXMuaW5wdXREYXRhLmxlbmd0aCA9PT0gMSA/IHRoaXMudXNlZFRpbWVzLmlucHV0RGF0YVswXSA6IHRoaXMudXNlZFRpbWVzLmlucHV0RGF0YVtpXTsKCiAgICAgIGlmICh0aGlzLmJhc2VDb25maWcubGF5ZXJOYW1lTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShpbnB1dERhdGEpKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgIHZhciBjb25maWcgPSB0aGlzLmJhc2VDb25maWcubGF5ZXJOYW1lTWFwcGluZ1tpbnB1dERhdGFdOwoKICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29uZmlnKSkgewogICAgICAgICAgLy8gYXNzdXJlIGFycmF5IGlzIHJldHVybmVkCiAgICAgICAgICBjb25maWcgPSBbY29uZmlnXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjb25maWc7CiAgICAgIH0gLy8gZW1wdHkgY29uZmlnIHVzZWQgbGF0ZXIgZm9yIG1lcmdpbmcKCgogICAgICByZXR1cm4gW107CiAgICB9LAogICAgZ2V0Q29tYmluZWRXTVNMYXllcnM6IGZ1bmN0aW9uIGdldENvbWJpbmVkV01TTGF5ZXJzKHNpZGUpIHsKICAgICAgdmFyIGNvbWJMYXllcnMgPSB0aGlzLm1lcmdlZENvbmZpZ3Moc2lkZSkuZmlsdGVyKGZ1bmN0aW9uIChsKSB7CiAgICAgICAgcmV0dXJuIGwucHJvdG9jb2wgPT09ICdXTVMnICYmIE9iamVjdC5rZXlzKGwpLmluZGV4T2YoJ2NvbWJpbmVkTGF5ZXJzJykgIT09IC0xOwogICAgICB9KTsKICAgICAgcmV0dXJuIGNvbWJMYXllcnM7CiAgICB9LAogICAgZ2V0U2ltcGxlV01TTGF5ZXJzOiBmdW5jdGlvbiBnZXRTaW1wbGVXTVNMYXllcnMoc2lkZSkgewogICAgICB2YXIgY29tYkxheWVycyA9IHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKS5maWx0ZXIoZnVuY3Rpb24gKGwpIHsKICAgICAgICByZXR1cm4gbC5wcm90b2NvbCA9PT0gJ1dNUycgJiYgT2JqZWN0LmtleXMobCkuaW5kZXhPZignY29tYmluZWRMYXllcnMnKSA9PT0gLTE7CiAgICAgIH0pOwogICAgICByZXR1cm4gY29tYkxheWVyczsKICAgIH0sCiAgICBtZXJnZWRDb25maWdzOiBmdW5jdGlvbiBtZXJnZWRDb25maWdzKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGF0YSc7CiAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHNwZWNpYWwgY29tcGFyZSBsYXllciBjb25maWd1cmVkCiAgICAgIHZhciBkaXNwbGF5VG1wID0gc2lkZSA9PT0gJ2NvbXBhcmUnICYmIHRoaXMuaW5kaWNhdG9yLmNvbXBhcmVEaXNwbGF5ID8gdGhpcy5pbmRpY2F0b3IuY29tcGFyZURpc3BsYXkgOiB0aGlzLmluZGljYXRvci5kaXNwbGF5OyAvLyBmb2xsb3dpbmcgY29uZmlndXJhdGlvbiBtZXJnaW5nIGlzIGRvbmU6CiAgICAgIC8vIGRlZmF1bHRMYXllcnNEaXNwbGF5ICh0byBhdm9pZCBoYXZpbmcgdG8gY29uZmlndXJlIGl0IGJlZm9yZSkKICAgICAgLy8gaW5kRGVmaW5pdGlvbiAtIGluZGljYXRvciBjb2RlIHNwZWNpZmljIGNvbmZpZ3VyYXRpb24KICAgICAgLy8gZGlzcGxheSAtIGNvbWluZyBmcm9tIGpzIGNvbmZpZ3VyYXRpb24gLSBlc2EuanMgT1IKICAgICAgLy8gY29uZmlnRnJvbUlucHV0RGF0YSAtIGNvbWluZyBmcm9tIGlucHV0IGRhdGEgcmVmZXJlbmNlIGZyb20gY3N2cwoKICAgICAgaWYgKGRpc3BsYXlUbXApIHsKICAgICAgICAvLyBmcm9tIGxheWVyIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlzcGxheVRtcCkpIHsKICAgICAgICAgIC8vIGFsd2F5cyBtYWtlIGFuIEFycmF5IG9mIGxheWVyIGNvbmZpZ3VyYXRpb25zCiAgICAgICAgICBkaXNwbGF5VG1wID0gW2Rpc3BsYXlUbXBdOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIGZpbmFsQ29uZmlncyA9IFtdOwogICAgICB2YXIgdXNlZENvbmZpZ0Zvck1lcmdlID0ge307CiAgICAgIHZhciBuYW1lID0gdGhpcy5pbmRpY2F0b3IuZGVzY3JpcHRpb247CgogICAgICBpZiAoIWRpc3BsYXlUbXAgJiYgdGhpcy5jb25maWdGcm9tSW5wdXREYXRhKHNpZGUpLmxlbmd0aCA9PT0gMCkgewogICAgICAgIC8vIG5vIGFkZGl0aW9uYWwgY29uZmlnIHNwZWNpZmllZCwgdXNlIGRlZmF1bHRzCiAgICAgICAgdXNlZENvbmZpZ0Zvck1lcmdlID0gW3sKICAgICAgICAgIG5hbWU6IG5hbWUKICAgICAgICB9XTsKICAgICAgfSBlbHNlIGlmICghZGlzcGxheVRtcCkgewogICAgICAgIC8vIHVzZSBjb25maWdGcm9tSW5wdXREYXRhCiAgICAgICAgdXNlZENvbmZpZ0Zvck1lcmdlID0gdGhpcy5jb25maWdGcm9tSW5wdXREYXRhKHNpZGUpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHVzZSBkaXNwbGF5VG1wIGV2ZW4gaWYgY29uZmlnRnJvbUlucHV0RGF0YSBzZXQgdG9vCiAgICAgICAgdXNlZENvbmZpZ0Zvck1lcmdlID0gZGlzcGxheVRtcDsKICAgICAgfQoKICAgICAgdXNlZENvbmZpZ0Zvck1lcmdlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAvLyBtZXJnZSBjb25maWdzIGZvciBlYWNoIGxheWVyCiAgICAgICAgbmFtZSA9IGl0ZW0ubmFtZSB8fCBuYW1lOyAvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBncm91cGVkIGxheWVycywgaWYgd2UgZG8gd2UgbmVlZCB0byBhZGQKICAgICAgICAvLyB0aGUgZGVmYXVsdCB0byB0aGVtIHRvbwoKICAgICAgICB2YXIgZXh0ZW5kZWRJdGVtID0gaXRlbTsKCiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGl0ZW0pLmluZGV4T2YoJ2NvbWJpbmVkTGF5ZXJzJykgIT09IC0xKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0uY29tYmluZWRMYXllcnMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgZXh0ZW5kZWRJdGVtLmNvbWJpbmVkTGF5ZXJzW2ldID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzNS5iYXNlQ29uZmlnLmRlZmF1bHRMYXllcnNEaXNwbGF5KSwgX3RoaXM1LmluZERlZmluaXRpb24pLCBpdGVtLmNvbWJpbmVkTGF5ZXJzW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZpbmFsQ29uZmlncy5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzNS5iYXNlQ29uZmlnLmRlZmF1bHRMYXllcnNEaXNwbGF5KSwgX3RoaXM1LmluZERlZmluaXRpb24pLCBleHRlbmRlZEl0ZW0pLCB7fSwgewogICAgICAgICAgbmFtZTogbmFtZQogICAgICAgIH0pKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBmaW5hbENvbmZpZ3M7CiAgICB9LAogICAgZmx5VG9Cb3VuZHM6IGZ1bmN0aW9uIGZseVRvQm91bmRzKCkgewogICAgICAvLyB6b29tcyB0byBzdWJhb2kgaWYgcHJlc2VudCBvciBhcmVhIGFyb3VuZCBhb2kgaWYgbm90CiAgICAgIHZhciBib3VuZHNQYWQgPSB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5sYXJnZVN1YkFvaSA/IDUgOiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5taWRTdWJBb2kgPyAxIDogMC4xNTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgaWYgKHRoaXMuc3ViQW9pICYmIHRoaXMuc3ViQW9pLmZlYXR1cmVzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgdmlld0JvdW5kcyA9IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLnByZXNldFZpZXcgPyBnZW9Kc29uKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLnByZXNldFZpZXcpLmdldEJvdW5kcygpIDogZ2VvSnNvbih0aGlzLnN1YkFvaSkuZ2V0Qm91bmRzKCk7CiAgICAgICAgdmFyIGJvdW5kcyA9IGdlb0pzb24odGhpcy5zdWJBb2kpLmdldEJvdW5kcygpOwogICAgICAgIHZhciBjb3JuZXJNYXgxID0gbGF0TG5nKFtib3VuZHMuZ2V0U291dGgoKSAtIGJvdW5kc1BhZCwgYm91bmRzLmdldFdlc3QoKSAtIGJvdW5kc1BhZF0pOwogICAgICAgIHZhciBjb3JuZXJNYXgyID0gbGF0TG5nKFtib3VuZHMuZ2V0Tm9ydGgoKSArIGJvdW5kc1BhZCwgYm91bmRzLmdldEVhc3QoKSArIGJvdW5kc1BhZF0pOwogICAgICAgIHZhciBib3VuZHNNYXggPSBsYXRMbmdCb3VuZHMoY29ybmVyTWF4MSwgY29ybmVyTWF4Mik7CiAgICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKHZpZXdCb3VuZHMpOyAvLyBsaW1pdCB1c2VyIG1vdmVtZW50IGFyb3VuZCBtYXAKCiAgICAgICAgdGhpcy5tYXAuc2V0TWF4Qm91bmRzKGJvdW5kc01heCk7CgogICAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5sYXJnZVN1YkFvaSkgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSgyKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLm1pZFN1YkFvaSkgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSg5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSgxMyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLnByZXNldFZpZXcpIHsKICAgICAgICAvLyBpZiBvbmx5IHByZXNldCB2aWV3IG1vdmUgbWFwIHRoZXJlIHdpdGhvdXQgbGltaXRpbmcgbW92ZW1lbnQKICAgICAgICB2YXIgX3ZpZXdCb3VuZHMgPSBnZW9Kc29uKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLnByZXNldFZpZXcpLmdldEJvdW5kcygpOwoKICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoX3ZpZXdCb3VuZHMpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYW9pKSB7CiAgICAgICAgdmFyIF9jb3JuZXJNYXggPSBsYXRMbmcoW3RoaXMuYW9pLmxhdCAtIGJvdW5kc1BhZCwgdGhpcy5hb2kubG5nIC0gYm91bmRzUGFkXSk7CgogICAgICAgIHZhciBfY29ybmVyTWF4MiA9IGxhdExuZyhbdGhpcy5hb2kubGF0ICsgYm91bmRzUGFkLCB0aGlzLmFvaS5sbmcgKyBib3VuZHNQYWRdKTsKCiAgICAgICAgdmFyIF9ib3VuZHNNYXggPSBsYXRMbmdCb3VuZHMoX2Nvcm5lck1heCwgX2Nvcm5lck1heDIpOwoKICAgICAgICB0aGlzLm1hcC5zZXRab29tKDE2KTsKICAgICAgICB0aGlzLm1hcC5wYW5Ubyh0aGlzLmFvaSk7CgogICAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5sYXJnZVN1YkFvaSkgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSgyKTsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLm1pZFN1YkFvaSkgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSg5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSgxMik7CiAgICAgICAgfSAvLyBsaW1pdCB1c2VyIG1vdmVtZW50IGFyb3VuZCBtYXAKCgogICAgICAgIHRoaXMubWFwLnNldE1heEJvdW5kcyhfYm91bmRzTWF4KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB6b29tIHRvIGRlZmF1bHQgYmJveCBmcm9tIGNvbmZpZwogICAgICAgIHRoaXMubWFwLnNldE1pblpvb20odGhpcy5tYXBEZWZhdWx0cy5taW5NYXBab29tKTsKICAgICAgICB0aGlzLm1hcC5zZXRNYXhCb3VuZHMobnVsbCk7CiAgICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKGxhdExuZ0JvdW5kcyh0aGlzLm1hcERlZmF1bHRzLmJvdW5kcykpOwogICAgICB9CiAgICB9LAogICAgZ2V0VGltZUxhYmVsOiBmdW5jdGlvbiBnZXRUaW1lTGFiZWwodGltZSkgewogICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aW1lKSAmJiB0aW1lLmxlbmd0aCA9PT0gMikgewogICAgICAgIC8vIHNob3cgc3RhcnQgLSBlbmQKICAgICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0ubWFwVGltZUxhYmVsRXh0ZW5kZWQpIHsKICAgICAgICAgIHJldHVybiB0aW1lLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkKS50b0lTTyh7CiAgICAgICAgICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KS5qb2luKCcgLSAnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aW1lLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08oZCkudG9JU09EYXRlKCk7CiAgICAgICAgfSkuam9pbignIC0gJyk7CiAgICAgIH0gZWxzZSBpZiAodGltZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbHNlLXJldHVybgogICAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5tYXBUaW1lTGFiZWxFeHRlbmRlZCkgewogICAgICAgICAgcmV0dXJuIHRpbWUudG9JU08oewogICAgICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGltZS50b0lTT0RhdGUoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLm1hcFRpbWVMYWJlbEV4dGVuZGVkKSB7CiAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08odGltZSkudG9JU08oewogICAgICAgICAgc3VwcHJlc3NNaWxsaXNlY29uZHM6IHRydWUKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08odGltZSkudG9JU09EYXRlKCk7CiAgICB9LAogICAgbGF5ZXJPcHRpb25zOiBmdW5jdGlvbiBsYXllck9wdGlvbnModGltZSwgc291cmNlT3B0aW9uc09iaikgewogICAgICB2YXIgYWRkaXRpb25hbFNldHRpbmdzID0ge307CgogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZU9wdGlvbnNPYmosICdzaXRlTWFwcGluZycpKSB7CiAgICAgICAgdmFyIGN1cnJTaXRlID0gc291cmNlT3B0aW9uc09iai5zaXRlTWFwcGluZyh0aGlzLmluZGljYXRvci5hb2lJRCk7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLnNpdGUgPSBjdXJyU2l0ZTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBzb3VyY2VPcHRpb25zT2JqLm1pblpvb20gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLm1pblpvb20gPSBzb3VyY2VPcHRpb25zT2JqLm1pblpvb207CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2Ygc291cmNlT3B0aW9uc09iai5tYXhab29tICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGFkZGl0aW9uYWxTZXR0aW5ncy5tYXhab29tID0gc291cmNlT3B0aW9uc09iai5tYXhab29tOwogICAgICB9CgogICAgICBpZiAodHlwZW9mIHNvdXJjZU9wdGlvbnNPYmoubWluTmF0aXZlWm9vbSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3MubWluTmF0aXZlWm9vbSA9IHNvdXJjZU9wdGlvbnNPYmoubWluTmF0aXZlWm9vbTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBzb3VyY2VPcHRpb25zT2JqLm1heE5hdGl2ZVpvb20gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLm1heE5hdGl2ZVpvb20gPSBzb3VyY2VPcHRpb25zT2JqLm1heE5hdGl2ZVpvb207CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2Ygc291cmNlT3B0aW9uc09iai5ib3VuZHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLmJvdW5kcyA9IHNvdXJjZU9wdGlvbnNPYmouYm91bmRzOwogICAgICB9CgogICAgICBpZiAodGltZSAhPT0gbnVsbCkgewogICAgICAgIC8vIHRpbWUgYXMgaXMgZ2V0cyBhdXRvbWF0aWNhbGx5IGluamVjdGVkIHRvIFdNUyBxdWVyeSBPUiB4eXogdXJsIHt0aW1lfSB0ZW1wbGF0ZQogICAgICAgIHZhciBmaXhUaW1lID0gdGltZS52YWx1ZSB8fCB0aW1lOwogICAgICAgIGFkZGl0aW9uYWxTZXR0aW5ncy50aW1lID0gdHlwZW9mIHNvdXJjZU9wdGlvbnNPYmouZGF0ZUZvcm1hdEZ1bmN0aW9uID09PSAnZnVuY3Rpb24nID8gc291cmNlT3B0aW9uc09iai5kYXRlRm9ybWF0RnVuY3Rpb24oZml4VGltZSkgOiBmaXhUaW1lOwoKICAgICAgICBpZiAoc291cmNlT3B0aW9uc09iai5mZWF0dXJlcykgewogICAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLmZlYXR1cmVzVGltZSA9IHR5cGVvZiBzb3VyY2VPcHRpb25zT2JqLmZlYXR1cmVzLmRhdGVGb3JtYXRGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZU9wdGlvbnNPYmouZmVhdHVyZXMuZGF0ZUZvcm1hdEZ1bmN0aW9uKGZpeFRpbWUpIDogZml4VGltZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRpdGlvbmFsU2V0dGluZ3M7CiAgICB9LAogICAgZGF0YUxheWVyVGltZVNlbGVjdGlvbjogZnVuY3Rpb24gZGF0YUxheWVyVGltZVNlbGVjdGlvbihwYXlsb2FkKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgLy8gRGlmZmVyZW50IG9iamVjdCByZXR1cm5lZCBlaXRoZXIgYnkgYXJyb3cgdXNlIG9yIGJ5IGRyb3Bkb3duIHVzZQogICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXlsb2FkKSB8fCAhcGF5bG9hZC52YWx1ZSkgewogICAgICAgIHRoaXMuZGF0YUxheWVyVGltZSA9IHsKICAgICAgICAgIHZhbHVlOiBwYXlsb2FkLAogICAgICAgICAgbmFtZTogIiIuY29uY2F0KHBheWxvYWQpCiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmRhdGFMYXllclRpbWUgPSBwYXlsb2FkOwogICAgICB9CgogICAgICB2YXIgbmV3SW5kZXggPSB0aGlzLmFycmF5T2ZPYmplY3RzLm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLnZhbHVlOwogICAgICB9KS5pbmRleE9mKHRoaXMuZGF0YUxheWVyVGltZS52YWx1ZSA/IHRoaXMuZGF0YUxheWVyVGltZS52YWx1ZSA6IHRoaXMuZGF0YUxheWVyVGltZSk7CiAgICAgIHRoaXMuZGF0YUxheWVySW5kZXggPSBuZXdJbmRleDsKICAgICAgdGhpcy5yZWZyZXNoTGF5ZXJzKCdkYXRhJyk7CiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczYuc2xpZGVyLnNldFJpZ2h0TGF5ZXJzKF90aGlzNi5leHRyYWN0QWN0dWFsTGF5ZXJzKF90aGlzNi4kcmVmcy5kYXRhTGF5ZXJzKSk7CiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMuaW5kaWNhdG9yLmNvbXBhcmVEaXNwbGF5KSB7CiAgICAgICAgLy8gc2hhcmVkIHRpbWUgb24gYm90aCBzaWRlcyBpbiBjYXNlIG9mIGNvbXBhcmVEaXNwbGF5IGJlaW5nIHNldAogICAgICAgIHRoaXMuY29tcGFyZUxheWVyVGltZSA9IHRoaXMuZGF0YUxheWVyVGltZTsKICAgICAgICB0aGlzLmNvbXBhcmVMYXllckluZGV4ID0gbmV3SW5kZXg7CiAgICAgICAgdGhpcy5yZWZyZXNoTGF5ZXJzKCdjb21wYXJlJyk7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM2LnNsaWRlci5zZXRMZWZ0TGF5ZXJzKF90aGlzNi5leHRyYWN0QWN0dWFsTGF5ZXJzKF90aGlzNi4kcmVmcy5jb21wYXJlTGF5ZXJzKSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBleHRyYWN0QWN0dWFsTGF5ZXJzOiBmdW5jdGlvbiBleHRyYWN0QWN0dWFsTGF5ZXJzKGdyb3VwKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIGFjdHVhbExheWVycyA9IFtdOwoKICAgICAgaWYgKGdyb3VwLiRjaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgZ3JvdXAuJGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgICBhY3R1YWxMYXllcnMgPSBhY3R1YWxMYXllcnMuY29uY2F0KF90aGlzNy5leHRyYWN0QWN0dWFsTGF5ZXJzKGNoaWxkKSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0dWFsTGF5ZXJzLnB1c2goZ3JvdXAubWFwT2JqZWN0KTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFjdHVhbExheWVyczsKICAgIH0sCiAgICBjb21wYXJlTGF5ZXJUaW1lU2VsZWN0aW9uOiBmdW5jdGlvbiBjb21wYXJlTGF5ZXJUaW1lU2VsZWN0aW9uKHBheWxvYWQpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICAvLyBEaWZmZXJlbnQgb2JqZWN0IHJldHVybmVkIGVpdGhlciBieSBhcnJvdyB1c2Ugb3IgYnkgZHJvcGRvd24gdXNlCiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpIHx8ICFwYXlsb2FkLnZhbHVlKSB7CiAgICAgICAgdGhpcy5jb21wYXJlTGF5ZXJUaW1lID0gewogICAgICAgICAgdmFsdWU6IHBheWxvYWQsCiAgICAgICAgICBuYW1lOiAiIi5jb25jYXQocGF5bG9hZCkKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGFyZUxheWVyVGltZSA9IHBheWxvYWQ7CiAgICAgIH0KCiAgICAgIHZhciBuZXdJbmRleCA9IHRoaXMuYXJyYXlPZk9iamVjdHMubWFwKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkudmFsdWU7CiAgICAgIH0pLmluZGV4T2YodGhpcy5jb21wYXJlTGF5ZXJUaW1lLnZhbHVlID8gdGhpcy5jb21wYXJlTGF5ZXJUaW1lLnZhbHVlIDogdGhpcy5jb21wYXJlTGF5ZXJUaW1lKTsKICAgICAgdGhpcy5jb21wYXJlTGF5ZXJJbmRleCA9IG5ld0luZGV4OwogICAgICB0aGlzLnJlZnJlc2hMYXllcnMoJ2NvbXBhcmUnKTsKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzOC5zbGlkZXIuc2V0TGVmdExheWVycyhfdGhpczguZXh0cmFjdEFjdHVhbExheWVycyhfdGhpczguJHJlZnMuY29tcGFyZUxheWVycykpOwogICAgICB9KTsKICAgIH0sCiAgICBkYXRhTGF5ZXJSZWR1Y2U6IGZ1bmN0aW9uIGRhdGFMYXllclJlZHVjZSgpIHsKICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMuYXJyYXlPZk9iamVjdHMubWFwKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkudmFsdWU7CiAgICAgIH0pLmluZGV4T2YodGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlID8gdGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlIDogdGhpcy5kYXRhTGF5ZXJUaW1lKTsKICAgICAgdGhpcy5kYXRhTGF5ZXJJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7CiAgICAgIHRoaXMuZGF0YUxheWVyVGltZVNlbGVjdGlvbih0aGlzLmFycmF5T2ZPYmplY3RzW2N1cnJlbnRJbmRleCAtIDFdKTsKICAgIH0sCiAgICBkYXRhTGF5ZXJJbmNyZWFzZTogZnVuY3Rpb24gZGF0YUxheWVySW5jcmVhc2UoKSB7CiAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmFycmF5T2ZPYmplY3RzLm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLnZhbHVlOwogICAgICB9KS5pbmRleE9mKHRoaXMuZGF0YUxheWVyVGltZS52YWx1ZSA/IHRoaXMuZGF0YUxheWVyVGltZS52YWx1ZSA6IHRoaXMuZGF0YUxheWVyVGltZSk7CiAgICAgIHRoaXMuZGF0YUxheWVySW5kZXggPSBjdXJyZW50SW5kZXggKyAxOwogICAgICB0aGlzLmRhdGFMYXllclRpbWVTZWxlY3Rpb24odGhpcy5hcnJheU9mT2JqZWN0c1tjdXJyZW50SW5kZXggKyAxXSk7CiAgICB9LAogICAgY29tcGFyZUxheWVyUmVkdWNlOiBmdW5jdGlvbiBjb21wYXJlTGF5ZXJSZWR1Y2UoKSB7CiAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmFycmF5T2ZPYmplY3RzLm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLnZhbHVlOwogICAgICB9KS5pbmRleE9mKHRoaXMuY29tcGFyZUxheWVyVGltZS52YWx1ZSA/IHRoaXMuY29tcGFyZUxheWVyVGltZS52YWx1ZSA6IHRoaXMuY29tcGFyZUxheWVyVGltZSk7CiAgICAgIHRoaXMuY29tcGFyZUxheWVySW5kZXggPSBjdXJyZW50SW5kZXggLSAxOwogICAgICB0aGlzLmNvbXBhcmVMYXllclRpbWVTZWxlY3Rpb24odGhpcy5hcnJheU9mT2JqZWN0c1tjdXJyZW50SW5kZXggLSAxXSk7CiAgICB9LAogICAgY29tcGFyZUxheWVySW5jcmVhc2U6IGZ1bmN0aW9uIGNvbXBhcmVMYXllckluY3JlYXNlKCkgewogICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5hcnJheU9mT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS52YWx1ZTsKICAgICAgfSkuaW5kZXhPZih0aGlzLmNvbXBhcmVMYXllclRpbWUudmFsdWUgPyB0aGlzLmNvbXBhcmVMYXllclRpbWUudmFsdWUgOiB0aGlzLmNvbXBhcmVMYXllclRpbWUpOwogICAgICB0aGlzLmNvbXBhcmVMYXllckluZGV4ID0gY3VycmVudEluZGV4ICsgMTsKICAgICAgdGhpcy5jb21wYXJlTGF5ZXJUaW1lU2VsZWN0aW9uKHRoaXMuYXJyYXlPZk9iamVjdHNbY3VycmVudEluZGV4ICsgMV0pOwogICAgfSwKICAgIGdldEluaXRpYWxDb21wYXJlVGltZTogZnVuY3Rpb24gZ2V0SW5pdGlhbENvbXBhcmVUaW1lKCkgewogICAgICAvLyBmaW5kIGNsb3Nlc3QgZW50cnkgb25lIHllYXIgYmVmb3JlIGxhdGVzdCB0aW1lCiAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5sYXJnZVRpbWVEdXJhdGlvbikgewogICAgICAgIC8vIGlmIGludGVydmFsLCB1c2UganVzdCBzdGFydCB0byBnZXQgY2xvc2VzdAogICAgICAgIHZhciB0aW1lcyA9IHRoaXMudXNlZFRpbWVzLnRpbWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW1bMF0gOiBpdGVtOwogICAgICAgIH0pOwogICAgICAgIHZhciBsYXN0VGltZUVudHJ5ID0gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lc1t0aW1lcy5sZW5ndGggLSAxXSk7CiAgICAgICAgdmFyIG9uZVllYXJCZWZvcmUgPSBsYXN0VGltZUVudHJ5Lm1pbnVzKHsKICAgICAgICAgIHllYXJzOiAxCiAgICAgICAgfSk7IC8vIHNlbGVjdCBjbG9zZXN0IHRvIG9uZSB5ZWFyIGJlZm9yZQoKICAgICAgICB2YXIgY2xvc2VzdE9uZVllYXJCZWZvcmUgPSB0aW1lcy5maW5kKGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICAgICAgICByZXR1cm4gaSA9PT0gdGltZXMubGVuZ3RoIC0gMSB8fCBNYXRoLmFicyhvbmVZZWFyQmVmb3JlLnRvTWlsbGlzKCkgLSBEYXRlVGltZS5mcm9tSVNPKGl0ZW0pLnRvTWlsbGlzKCkpIDwgTWF0aC5hYnMob25lWWVhckJlZm9yZS50b01pbGxpcygpIC0gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lc1tpICsgMV0pLnRvTWlsbGlzKCkpOwogICAgICAgIH0pOyAvLyBHZXQgaW5kZXggYW5kIHJldHVybiBvYmplY3QgZnJvbSBvcmlnaW5hbCB0aW1lcyBhcyB0aGVyZSBhcmUgYWxzbwogICAgICAgIC8vIGFycmF5cyBvZiB0aW1lIHR1cGxlIGFycmF5cwoKICAgICAgICB2YXIgZm91bmRJbmRleCA9IHRpbWVzLmluZGV4T2YoY2xvc2VzdE9uZVllYXJCZWZvcmUpOwogICAgICAgIHJldHVybiB0aGlzLnVzZWRUaW1lcy50aW1lW2ZvdW5kSW5kZXhdOwogICAgICB9IC8vIHVzZSBmaXJzdCB0aW1lCgoKICAgICAgcmV0dXJuIHRoaXMudXNlZFRpbWVzLnRpbWVbMF07CiAgICB9LAogICAgcmVmcmVzaEdyb3VwOiBmdW5jdGlvbiByZWZyZXNoR3JvdXAoZ3JvdXAsIHRpbWUpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICAvLyBHcm91cCBjYW4gYWxzbyBiZSBhbiBhcnJheSBkZXBlbmRpbmcgb24gdHlwZQogICAgICBpZiAoZ3JvdXApIHsKICAgICAgICB2YXIgdG9JdGVyYXRlOwoKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShncm91cCkpIHsKICAgICAgICAgIHRvSXRlcmF0ZSA9IGdyb3VwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0b0l0ZXJhdGUgPSBncm91cC4kY2hpbGRyZW47CiAgICAgICAgfQoKICAgICAgICBpZiAodG9JdGVyYXRlKSB7CiAgICAgICAgICB0b0l0ZXJhdGUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAvLyBXZSBjaGVjayBpZiB3ZSBoYXZlIGEgc2ltcGxlIGxheWVyIG9yIGEgZ3JvdXBlZCBsYXllcgogICAgICAgICAgICBpZiAoaXRlbS4kY2hpbGRyZW4ubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBncm91cGVkIGxheWVyLCB3ZSBpdGVyYXRlIG92ZXIgdGhlIGxheWVycwogICAgICAgICAgICAgIGl0ZW0uJGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHN1Ykl0ZW0pIHsKICAgICAgICAgICAgICAgIC8vIFRPRE86IHByb3BzRGF0YSBkbyBub3QgaGF2ZSBhbGwgdGhlIHBhcmFtZXRlcnMgd2UgbmVlZCAobGlrZSBkYXRlRm9ybWF0RnVuY3Rpb24pCiAgICAgICAgICAgICAgICAvLyBUT0RPIGV4dGVuZCB0aGlzIGdldHRpbmcgdGhlIG1lcmdlZENvbmZpZ3MgaW4gYSBzYW1lIHdheSBhcyB3aGVuIG5vbi1ncm91cGVkCiAgICAgICAgICAgICAgICBzdWJJdGVtLm1hcE9iamVjdC5zZXRQYXJhbXMoX3RoaXM5LmxheWVyT3B0aW9ucyh0aW1lLCBzdWJJdGVtLiRvcHRpb25zLnByb3BzRGF0YSkpOyAvLyBmb3JjZSByZWRyYXcgb2YgbGF5ZXIKCiAgICAgICAgICAgICAgICBzdWJJdGVtLiRmb3JjZVVwZGF0ZSgpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBvcmlnaW5hbENvbmZpZyA9IF90aGlzOS5tZXJnZWRDb25maWdzKCkuZmluZChmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnLm5hbWUgPT09IGl0ZW0ubmFtZTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaXRlbS5tYXBPYmplY3Quc2V0UGFyYW1zKF90aGlzOS5sYXllck9wdGlvbnModGltZSwgb3JpZ2luYWxDb25maWcpKTsgLy8gZm9yY2UgcmVkcmF3IG9mIGxheWVyCgogICAgICAgICAgICAgIGl0ZW0uJGZvcmNlVXBkYXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHJlZnJlc2hMYXllcnM6IGZ1bmN0aW9uIHJlZnJlc2hMYXllcnMoc2lkZSkgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICAvLyBjb21wYXJlKGxlZnQpIG9yIGRhdGEocmlnaHQpCiAgICAgIGlmIChzaWRlID09PSAnY29tcGFyZScgfHwgdGhpcy5pbmRpY2F0b3IuY29tcGFyZURpc3BsYXkpIHsKICAgICAgICB0aGlzLnJlZnJlc2hHcm91cCh0aGlzLiRyZWZzLmNvbXBhcmVMYXllckFycmF5V01TLCB0aGlzLmN1cnJlbnRDb21wYXJlVGltZSk7CgogICAgICAgIGlmICh0aGlzLiRyZWZzLmNvbXBhcmVMYXllckFycmF5WFlaKSB7CiAgICAgICAgICB0aGlzLiRyZWZzLmNvbXBhcmVMYXllckFycmF5WFlaLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgdmFyIG9yaWdpbmFsSW5kZXggPSBwYXJzZUludChpdGVtLiRhdHRyc1snZGF0YS1rZXktb3JpZ2luYWxpbmRleCddLCAxMCk7CiAgICAgICAgICAgIF90aGlzMTAuY29tcGFyZUxheWVyS2V5WFlaW29yaWdpbmFsSW5kZXhdID0gTWF0aC5yYW5kb20oKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKCF0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlc1N0YXRpYyAmJiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFGZWF0dXJlcyB8fCB0aGlzLnZhbGlkRHJhd25BcmVhKSkgewogICAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzQ2x1c3RlcmluZykgewogICAgICAgICAgICB0aGlzLiRyZWZzLmZlYXR1cmVzQ29tcGFyZUNsdXN0ZXIubWFwT2JqZWN0LmNsZWFyTGF5ZXJzKCk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5mZXRjaEZlYXR1cmVzKCdjb21wYXJlJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoc2lkZSA9PT0gJ2RhdGEnKSB7CiAgICAgICAgdGhpcy5yZWZyZXNoR3JvdXAodGhpcy4kcmVmcy5kYXRhTGF5ZXJBcnJheVdNUywgdGhpcy5jdXJyZW50VGltZSk7CgogICAgICAgIGlmICh0aGlzLiRyZWZzLmRhdGFMYXllckFycmF5WFlaKSB7CiAgICAgICAgICB0aGlzLiRyZWZzLmRhdGFMYXllckFycmF5WFlaLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgdmFyIG9yaWdpbmFsSW5kZXggPSBwYXJzZUludChpdGVtLiRhdHRyc1snZGF0YS1rZXktb3JpZ2luYWxpbmRleCddLCAxMCk7CiAgICAgICAgICAgIF90aGlzMTAuZGF0YUxheWVyS2V5WFlaW29yaWdpbmFsSW5kZXhdID0gTWF0aC5yYW5kb20oKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKCF0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlc1N0YXRpYyAmJiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFGZWF0dXJlcyB8fCB0aGlzLnZhbGlkRHJhd25BcmVhKSkgewogICAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzQ2x1c3RlcmluZykgewogICAgICAgICAgICB0aGlzLiRyZWZzLmZlYXR1cmVzRGF0YUNsdXN0ZXIubWFwT2JqZWN0LmNsZWFyTGF5ZXJzKCk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5mZXRjaEZlYXR1cmVzKCdkYXRhJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZmV0Y2hGZWF0dXJlczogZnVuY3Rpb24gZmV0Y2hGZWF0dXJlcyhzaWRlKSB7CiAgICAgIHZhciBfdGhpczExID0gdGhpczsKCiAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3Moc2lkZSlbMF0uZmVhdHVyZXMpIHsKICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMubGF5ZXJPcHRpb25zKHNpZGUgPT09ICdjb21wYXJlJyA/IHRoaXMuY3VycmVudENvbXBhcmVUaW1lIDogdGhpcy5jdXJyZW50VGltZSwgdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdKTsgLy8gYWRkIGN1c3RvbSBhcmVhIGlmIHByZXNlbnQKCiAgICAgICAgdmFyIGN1c3RvbUFyZWEgPSB7fTsKCiAgICAgICAgaWYgKHRoaXMudmFsaWREcmF3bkFyZWEpIHsKICAgICAgICAgIGN1c3RvbUFyZWEgPSB0eXBlb2YgdGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMuYXJlYUZvcm1hdEZ1bmN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMuYXJlYUZvcm1hdEZ1bmN0aW9uKHRoaXMuZHJhd25BcmVhKSA6IHsKICAgICAgICAgICAgYXJlYTogSlNPTi5zdHJpbmdpZnkodGhpcy5kcmF3bkFyZWEpCiAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgdmFyIHRlbXBsYXRlU3Vic3QgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5pbmRpY2F0b3IpLCBvcHRpb25zKSwgY3VzdG9tQXJlYSk7CgogICAgICAgIHZhciB0ZW1wbGF0ZVJlID0gL1x7ICooW1x3XyAtXSspICpcfS9nOwogICAgICAgIHZhciB1cmwgPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVJlLCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy51cmwsIHRlbXBsYXRlU3Vic3QpOwogICAgICAgIHZhciByZXF1ZXN0Qm9keSA9IG51bGw7CgogICAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy5yZXF1ZXN0Qm9keSkgewogICAgICAgICAgcmVxdWVzdEJvZHkgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy5yZXF1ZXN0Qm9keSk7CiAgICAgICAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMocmVxdWVzdEJvZHkpOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIC8vIHN1YnN0aXR1dGUgdGVtcGxhdGUgc3RyaW5ncyB3aXRoIHZhbHVlcwogICAgICAgICAgICByZXF1ZXN0Qm9keVtwYXJhbXNbaV1dID0gdGVtcGxhdGUodGVtcGxhdGVSZSwgcmVxdWVzdEJvZHlbcGFyYW1zW2ldXSwgdGVtcGxhdGVTdWJzdCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVxdWVzdE9wdHMgPSB7CiAgICAgICAgICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJywKICAgICAgICAgIG1ldGhvZDogdGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMucmVxdWVzdE1ldGhvZCB8fCAnR0VUJywKICAgICAgICAgIGhlYWRlcnM6IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLnJlcXVlc3RIZWFkZXJzIHx8IHt9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKHJlcXVlc3RCb2R5KSB7CiAgICAgICAgICByZXF1ZXN0T3B0cy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZGluZycpOwogICAgICAgIGZldGNoKHVybCwgcmVxdWVzdE9wdHMpLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICAgIHJldHVybiByLmpzb24oKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyYXdkYXRhKSB7CiAgICAgICAgICAvLyBpZiBjdXN0b20gcmVzcG9uc2UgLT4gZmVhdHVyZSBtYXBwaW5nIGZ1bmN0aW9uIGNvbmZpZ3VyZWQsIGFwcGx5IGl0CiAgICAgICAgICBpZiAodHlwZW9mIF90aGlzMTEubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLmNhbGxiYWNrRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMTEubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLmNhbGxiYWNrRnVuY3Rpb24ocmF3ZGF0YSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHJhd2RhdGE7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgX3RoaXMxMS5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZCcpOwoKICAgICAgICAgIF90aGlzMTEudXBkYXRlSnNvbkxheWVycyhkYXRhLCBzaWRlKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczExLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7CgogICAgICAgICAgX3RoaXMxMS51cGRhdGVKc29uTGF5ZXJzKGVtcHR5Riwgc2lkZSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy51cGRhdGVKc29uTGF5ZXJzKGVtcHR5Riwgc2lkZSk7CiAgICAgIH0KICAgIH0sCiAgICBzZWxlY3RHU0FJbmRpY2F0b3I6IGZ1bmN0aW9uIHNlbGVjdEdTQUluZGljYXRvcihmZWF0dXJlKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKCiAgICAgIHRoaXMuc2VsZWN0ZWRCb3JkZXIgPSBmZWF0dXJlLmJvcmRlcklkOwogICAgICB2YXIgZGF0YVVybCA9ICIuL2VvZGFzaC1kYXRhL2ludGVybmFsLyIuY29uY2F0KGZlYXR1cmUuYm9yZGVySWQsICIuanNvbiIpOwogICAgICB0aGlzLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkaW5nJyk7CiAgICAgIGZldGNoKGRhdGFVcmwpLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICByZXR1cm4gci5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGluZGljYXRvcikgewogICAgICAgIHZhciByZXR1cm5JbmRpY2F0b3IgPSB7fTsKICAgICAgICByZXR1cm5JbmRpY2F0b3IudmFsdWVzID0gX29iamVjdFNwcmVhZCh7fSwgaW5kaWNhdG9yKTsKICAgICAgICByZXR1cm5JbmRpY2F0b3IuaW5kaWNhdG9yID0gJ0dTQSc7IC8vIEdldCBhbGwgdGltZXMgb2YgYXZhaWxhYmxlIGJvcmRlciBjcm9zc2luZ3MgdG8gYWxsb3cgZmluZGluZyBtaW4gbWF4CgogICAgICAgIHJldHVybkluZGljYXRvci50aW1lID0gW107CiAgICAgICAgT2JqZWN0LmtleXMoaW5kaWNhdG9yKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIHZhciBjdXJyVmFscyA9IGluZGljYXRvcltrZXldLnZhbHVlczsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJWYWxzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHJldHVybkluZGljYXRvci50aW1lLnB1c2goRGF0ZVRpbWUuZnJvbUlTTyhjdXJyVmFsc1tpXS50aW1lc3RhbXApKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm5JbmRpY2F0b3IubWVhc3VyZW1lbnQgPSBbMF07CiAgICAgICAgcmV0dXJuSW5kaWNhdG9yLnRpdGxlID0gZmVhdHVyZS5uYW1lOwogICAgICAgIHJldHVybkluZGljYXRvci55QXhpcyA9IF90aGlzMTIuaW5kaWNhdG9yLnlBeGlzOwoKICAgICAgICBfdGhpczEyLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7CgogICAgICAgIF90aGlzMTIuJHN0b3JlLmNvbW1pdCgnaW5kaWNhdG9ycy9DVVNUT01fQVJFQV9JTkRJQ0FUT1JfTE9BRF9GSU5JU0hFRCcsIHJldHVybkluZGljYXRvcik7CgogICAgICAgIF90aGlzMTIuJGVtaXQoJ2ZldGNoQ3VzdG9tQXJlYUluZGljYXRvcicpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgX3RoaXMxMi5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZCcpOyAvLyBJdCBzZWVtcyBkYXRhIGNvdWxkIG5vdCBiZSBsb2FkZWQgbGV0cyBzaG93IGEgbm8gZGF0YSBmb3VuZCBtZXNzYWdlCgoKICAgICAgICBfdGhpczEyLiRzdG9yZS5jb21taXQoJ2luZGljYXRvcnMvQ1VTVE9NX0FSRUFfSU5ESUNBVE9SX0xPQURfRklOSVNIRUQnLCB7CiAgICAgICAgICBpc0VtcHR5OiB0cnVlCiAgICAgICAgfSk7CgogICAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICAgIH0pOwogICAgfSwKICAgIGZldGNoTW9iaWxpdHlEYXRhOiBmdW5jdGlvbiBmZXRjaE1vYmlsaXR5RGF0YShjb3VudHJ5Q29kZSwgYW9pSUQpIHsKICAgICAgdmFyIF90aGlzMTMgPSB0aGlzOwoKICAgICAgdmFyIGRhdGFVcmwgPSAiLi9lb2Rhc2gtZGF0YS9pbnRlcm5hbC8iLmNvbmNhdChjb3VudHJ5Q29kZSwgIi0iKS5jb25jYXQoYW9pSUQsICIuanNvbiIpOwogICAgICB0aGlzLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkaW5nJyk7CiAgICAgIGZldGNoKGRhdGFVcmwpLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICByZXR1cm4gci5qc29uKCk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGluZGljYXRvcikgewogICAgICAgIGluZGljYXRvci5pbmRpY2F0b3IgPSBhb2lJRDsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBpbmRpY2F0b3IudGltZSA9IGluZGljYXRvci5WYWx1ZXMubWFwKGZ1bmN0aW9uIChyb3cpIHsKICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tSVNPKHJvdy5kYXRlKTsKICAgICAgICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBpbmRpY2F0b3IubWVhc3VyZW1lbnQgPSBbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgaW5kaWNhdG9yLmNvdW50cnkgPSBpbmRpY2F0b3IuQ291bnRyeUNvZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgaW5kaWNhdG9yLnRpdGxlID0gaW5kaWNhdG9yLkNvdW50cnlOYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgIGluZGljYXRvci55QXhpcyA9IF90aGlzMTMuaW5kaWNhdG9yLnlBeGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgIF90aGlzMTMubWFwLmZpcmVFdmVudCgnZGF0YWxvYWQnKTsKCiAgICAgICAgX3RoaXMxMy4kc3RvcmUuY29tbWl0KCdpbmRpY2F0b3JzL0NVU1RPTV9BUkVBX0lORElDQVRPUl9MT0FEX0ZJTklTSEVEJywgaW5kaWNhdG9yKTsKCiAgICAgICAgX3RoaXMxMy4kZW1pdCgnZmV0Y2hDdXN0b21BcmVhSW5kaWNhdG9yJyk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBfdGhpczEzLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7IC8vIEl0IHNlZW1zIGRhdGEgY291bGQgbm90IGJlIGxvYWRlZCBsZXRzIHNob3cgYSBubyBkYXRhIGZvdW5kIG1lc3NhZ2UKCgogICAgICAgIF90aGlzMTMuJHN0b3JlLmNvbW1pdCgnaW5kaWNhdG9ycy9DVVNUT01fQVJFQV9JTkRJQ0FUT1JfTE9BRF9GSU5JU0hFRCcsIHsKICAgICAgICAgIGlzRW1wdHk6IHRydWUKICAgICAgICB9KTsKCiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgfSk7CiAgICB9LAogICAgZmV0Y2hDdXN0b21BcmVhSW5kaWNhdG9yOiBmdW5jdGlvbiBmZXRjaEN1c3RvbUFyZWFJbmRpY2F0b3IoKSB7CiAgICAgIHZhciBfdGhpczE0ID0gdGhpczsKCiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5sYXllck9wdGlvbnModGhpcy5jdXJyZW50VGltZSwgdGhpcy5tZXJnZWRDb25maWdzKClbMF0pOyAvLyBhZGQgY3VzdG9tIGFyZWEgaWYgcHJlc2VudAoKICAgICAgdmFyIGN1c3RvbUFyZWEgPSB7fTsKCiAgICAgIGlmICh0aGlzLnZhbGlkRHJhd25BcmVhKSB7CiAgICAgICAgY3VzdG9tQXJlYSA9IHR5cGVvZiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLmFyZWFGb3JtYXRGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmFyZWFJbmRpY2F0b3IuYXJlYUZvcm1hdEZ1bmN0aW9uKHRoaXMuZHJhd25BcmVhKSA6IHsKICAgICAgICAgIGFyZWE6IEpTT04uc3RyaW5naWZ5KHRoaXMuZHJhd25BcmVhKQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHRoaXMuaW5kaWNhdG9yLnRpdGxlID0gJ1VzZXIgZGVmaW5lZCBhcmVhIG9mIGludGVyZXN0JzsKCiAgICAgIHZhciB0ZW1wbGF0ZVN1YnN0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuaW5kaWNhdG9yKSwgb3B0aW9ucyksIGN1c3RvbUFyZWEpOwoKICAgICAgdmFyIHRlbXBsYXRlUmUgPSAvXHsgKihbXHdfIC1dKykgKlx9L2c7CiAgICAgIHZhciB1cmwgPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVJlLCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLnVybCwgdGVtcGxhdGVTdWJzdCk7CiAgICAgIHZhciByZXF1ZXN0Qm9keSA9IG51bGw7CgogICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5yZXF1ZXN0Qm9keSkgewogICAgICAgIHJlcXVlc3RCb2R5ID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5yZXF1ZXN0Qm9keSk7CiAgICAgICAgdmFyIHBhcmFtcyA9IE9iamVjdC5rZXlzKHJlcXVlc3RCb2R5KTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgIC8vIHN1YnN0aXR1dGUgdGVtcGxhdGUgc3RyaW5ncyB3aXRoIHZhbHVlcwogICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0Qm9keVtwYXJhbXNbaV1dID09PSAnc3RyaW5nJykgewogICAgICAgICAgICByZXF1ZXN0Qm9keVtwYXJhbXNbaV1dID0gdGVtcGxhdGUodGVtcGxhdGVSZSwgcmVxdWVzdEJvZHlbcGFyYW1zW2ldXSwgdGVtcGxhdGVTdWJzdCk7CiAgICAgICAgICB9IC8vIENvbnZlcnQgZ2VvanNvbnMgYmFjayB0byBhbiBvYmplY3QKCgogICAgICAgICAgaWYgKHBhcmFtc1tpXSA9PT0gJ2dlb2pzb24nKSB7CiAgICAgICAgICAgIHJlcXVlc3RCb2R5W3BhcmFtc1tpXV0gPSBKU09OLnBhcnNlKHJlcXVlc3RCb2R5W3BhcmFtc1tpXV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHJlcXVlc3RPcHRzID0gewogICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogICAgICAgIG1ldGhvZDogdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5yZXF1ZXN0TWV0aG9kIHx8ICdHRVQnLAogICAgICAgIGhlYWRlcnM6IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmFyZWFJbmRpY2F0b3IucmVxdWVzdEhlYWRlcnMgfHwge30KICAgICAgfTsKCiAgICAgIGlmIChyZXF1ZXN0Qm9keSkgewogICAgICAgIHJlcXVlc3RPcHRzLmJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSk7CiAgICAgIH0KCiAgICAgIHRoaXMubWFwLmZpcmVFdmVudCgnZGF0YWxvYWRpbmcnKTsKICAgICAgZmV0Y2godXJsLCByZXF1ZXN0T3B0cykudGhlbihmdW5jdGlvbiAocikgewogICAgICAgIHJldHVybiByLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmF3ZGF0YSkgewogICAgICAgIGlmICh0eXBlb2YgX3RoaXMxNC5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5jYWxsYmFja0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAvLyBtZXJnZSBkYXRhIGZyb20gY3VycmVudCBpbmRpY2F0b3IgZGF0YSBhbmQgbmV3IGRhdGEgZnJvbSBhcGkKICAgICAgICAgIC8vIHJldHVybnMgbmV3IGluZGljYXRvciBvYmplY3QgdG8gc2V0IGFzIGN1c3RvbSBhcmVhIGluZGljYXRvcgogICAgICAgICAgcmV0dXJuIF90aGlzMTQubWVyZ2VkQ29uZmlncygpWzBdLmFyZWFJbmRpY2F0b3IuY2FsbGJhY2tGdW5jdGlvbihyYXdkYXRhLCBfdGhpczE0LmluZGljYXRvcik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmF3ZGF0YTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5kaWNhdG9yKSB7CiAgICAgICAgX3RoaXMxNC5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZCcpOwoKICAgICAgICBfdGhpczE0LiRzdG9yZS5jb21taXQoJ2luZGljYXRvcnMvQ1VTVE9NX0FSRUFfSU5ESUNBVE9SX0xPQURfRklOSVNIRUQnLCBpbmRpY2F0b3IpOwoKICAgICAgICBfdGhpczE0LiRlbWl0KCdmZXRjaEN1c3RvbUFyZWFJbmRpY2F0b3InKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIF90aGlzMTQubWFwLmZpcmVFdmVudCgnZGF0YWxvYWQnKTsKCiAgICAgICAgX3RoaXMxNC4kc3RvcmUuY29tbWl0KCdpbmRpY2F0b3JzL0NVU1RPTV9BUkVBX0lORElDQVRPUl9MT0FEX0ZJTklTSEVEJywgbnVsbCk7CgogICAgICAgIGNvbnNvbGUubG9nKGVycik7CiAgICAgIH0pOwogICAgfSwKICAgIGNsZWFyQ3VzdG9tQXJlYUZpbHRlcjogZnVuY3Rpb24gY2xlYXJDdXN0b21BcmVhRmlsdGVyKCkgewogICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ2ZlYXR1cmVzL1NFVF9TRUxFQ1RFRF9BUkVBJywgbnVsbCk7CiAgICB9LAogICAgZ2V0RGF0YUY6IGZ1bmN0aW9uIGdldERhdGFGKCkgewogICAgICByZXR1cm4gZGF0YUY7CiAgICB9LAogICAgZ2V0Q29tcGFyZUY6IGZ1bmN0aW9uIGdldENvbXBhcmVGKCkgewogICAgICByZXR1cm4gY29tcGFyZUY7CiAgICB9LAogICAgdXBkYXRlSnNvbkxheWVyczogZnVuY3Rpb24gdXBkYXRlSnNvbkxheWVycyhmdHJzLCBzaWRlKSB7CiAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlc0NsdXN0ZXJpbmcpIHsKICAgICAgICAvLyBtYXJrZXJjbHVzdGVyIG5lZWRzIG1hbnVhbCBhZGRpbmcgb2YgYWxsIGdlb2pzb25zIGl0IHdpbGwgc2hvdwogICAgICAgIC8vIGFuZCBjbGVhbnVwIG9mIHByZXZpb3VzIGNvbnRlbnQKICAgICAgICB2YXIgZ2VvanNvbkZyb21EYXRhID0gZ2VvSnNvbihmdHJzLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuZmVhdHVyZU9wdGlvbnMoc2lkZSkpLCB7fSwgewogICAgICAgICAgcGFuZTogc2lkZSA9PT0gJ2RhdGEnID8gdGhpcy50b29sdGlwUGFuZSA6IHRoaXMuc2hhZG93UGFuZQogICAgICAgIH0pKTsKCiAgICAgICAgaWYgKHRoaXMuJHJlZnMuZmVhdHVyZXNEYXRhQ2x1c3RlcikgewogICAgICAgICAgaWYgKHNpZGUgPT09ICdkYXRhJykgewogICAgICAgICAgICB0aGlzLiRyZWZzLmZlYXR1cmVzRGF0YUNsdXN0ZXIubWFwT2JqZWN0LmNsZWFyTGF5ZXJzKCk7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmVhdHVyZXNEYXRhQ2x1c3Rlci5tYXBPYmplY3QuYWRkTGF5ZXJzKFtnZW9qc29uRnJvbURhdGFdKTsKICAgICAgICAgICAgdGhpcy5kYXRhRmVhdHVyZXNDb3VudCA9IGZ0cnMuZmVhdHVyZXMubGVuZ3RoOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4kcmVmcy5mZWF0dXJlc0NvbXBhcmVDbHVzdGVyLm1hcE9iamVjdC5jbGVhckxheWVycygpOwogICAgICAgICAgICB0aGlzLiRyZWZzLmZlYXR1cmVzQ29tcGFyZUNsdXN0ZXIubWFwT2JqZWN0LmFkZExheWVycyhbZ2VvanNvbkZyb21EYXRhXSk7CiAgICAgICAgICAgIHRoaXMuY29tcGFyZUZlYXR1cmVzQ291bnQgPSBmdHJzLmZlYXR1cmVzLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoc2lkZSA9PT0gJ2RhdGEnKSB7CiAgICAgICAgLy8gbm9ybWFsIGdlb2pzb24gbGF5ZXIganVzdCBuZWVkcyBtYW51YWwgcmVmcmVzaAogICAgICAgIHRoaXMuZGF0YUpzb25Db21wdXRlZCA9IGZ0cnM7CiAgICAgICAgdGhpcy5kYXRhSnNvbktleSA9IE1hdGgucmFuZG9tKCk7CiAgICAgICAgdGhpcy5kYXRhRmVhdHVyZXNDb3VudCA9IGZ0cnMuZmVhdHVyZXMubGVuZ3RoOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGFyZUpzb25Db21wdXRlZCA9IGZ0cnM7CiAgICAgICAgdGhpcy5jb21wYXJlSnNvbktleSA9IE1hdGgucmFuZG9tKCk7CiAgICAgICAgdGhpcy5jb21wYXJlRmVhdHVyZXNDb3VudCA9IGZ0cnMuZmVhdHVyZXMubGVuZ3RoOwogICAgICB9CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgZW5hYmxlQ29tcGFyZTogZnVuY3Rpb24gZW5hYmxlQ29tcGFyZShvbikgewogICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7CgogICAgICBpZiAoIW9uKSB7CiAgICAgICAgaWYgKHRoaXMuc2xpZGVyICE9PSBudWxsKSB7CiAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVDb250cm9sKHRoaXMuc2xpZGVyKTsKICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMuJHJlZnMuY29tcGFyZUxheWVycy5tYXBPYmplY3QpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLiRyZWZzLmNvbXBhcmVMYXllcnMubWFwT2JqZWN0KTsKCiAgICAgICAgaWYgKCF0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5jdXN0b21BcmVhRmVhdHVyZXMgfHwgdGhpcy52YWxpZERyYXduQXJlYSkgewogICAgICAgICAgdGhpcy5mZXRjaEZlYXR1cmVzKCdjb21wYXJlJyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczE1LnNsaWRlci5zZXRMZWZ0TGF5ZXJzKF90aGlzMTUuZXh0cmFjdEFjdHVhbExheWVycyhfdGhpczE1LiRyZWZzLmNvbXBhcmVMYXllcnMpKTsKCiAgICAgICAgICBfdGhpczE1LnNsaWRlci5zZXRSaWdodExheWVycyhfdGhpczE1LmV4dHJhY3RBY3R1YWxMYXllcnMoX3RoaXMxNS4kcmVmcy5kYXRhTGF5ZXJzKSk7CgogICAgICAgICAgX3RoaXMxNS5zbGlkZXIuYWRkVG8oX3RoaXMxNS5tYXApOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgZHJhd25BcmVhOiBmdW5jdGlvbiBkcmF3bkFyZWEoKSB7CiAgICAgIC8vIHdhdGNoIG9uIGRyYXduIGFyZWEgcHJvcCBjaGFuZ2UgdHJpZ2dlcmluZyB1cGRhdGUgb2YgZHJhdyBsYXllciwgZmV0Y2hpbmcgY3VzdG9tIGZlYXR1cmVzCiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRBcmVhRmVhdHVyZSgpOwogICAgfQogIH0KfTs="},null]}