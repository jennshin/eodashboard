{"remainingRequest":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/8ps/Downloads/eodash-staging/app/src/components/DataPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/8ps/Downloads/eodash-staging/app/src/components/DataPanel.vue","mtime":1624532486000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}