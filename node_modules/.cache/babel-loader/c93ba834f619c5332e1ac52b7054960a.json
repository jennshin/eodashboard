{"remainingRequest":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/babel-loader/lib/index.js!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorData.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorData.vue","mtime":1624532486000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["IndicatorData.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div style=\"width: 100%; height: 100%;\"\n    v-if=\"!['E10a2', 'E10a3', 'E10a6', 'E10a7', 'E10a8', 'E10a9',\n      'E10c', 'N1', 'N3', 'N3b', 'E8',\n      'E13e', 'E13f', 'E13g', 'E13h', 'E13i', 'E13l', 'E13m',\n      'N1a', 'N1b', 'N1c', 'N1d', 'E12b', 'GG', 'GSA', 'CV', 'OW']\n      .includes(indicatorObject.indicator)\">\n      <bar-chart v-if='datacollection'\n        id=\"chart\"\n        class=\"fill-height\"\n        :width=\"null\"\n        :height=\"null\"\n        :chart-data='datacollection'\n        :options='chartOptions()'></bar-chart>\n  </div>\n  <div style=\"width: 100%; height: 100%;\"\n    v-else-if=\"['E10a3', 'E10a8'].includes(indicatorObject.indicator)\">\n      <map-chart\n        id=\"chart\"\n        class=\"fill-height\"\n        :width=\"null\"\n        :height=\"null\"\n        :chart-data='datacollection'\n        :options='chartOptions()'>\n      </map-chart>\n      <img v-if=\"indicatorObject.indicator=='E10a3'\"\n        :src=\"require('@/assets/E10a3_label.jpg')\" alt=\"color legend\"\n        style=\"position: absolute; width: 200px; z-index: 0;\n        top: 0px; right: 0px;\"/>\n      <img v-else\n        :src=\"require('@/assets/E10a8_label.jpg')\" alt=\"color legend\"\n        style=\"position: absolute; width: 150px; z-index: 0;\n        top: 0px; right: 0px;\"/>\n      <v-row\n        class=\"justify-center align-center timeSelection mr-6 ml-0\"\n        style=\"position: absolute; bottom: 0px; z-index: 1000;\n          width: auto; max-width: 100%;left:-45px;\"\n      >\n        <v-col cols=\"6\">\n          <v-select\n            outlined dense autofocus hide-details\n            :prepend-inner-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime) > 0\n                ? 'mdi-arrow-left-drop-circle'\n                : 'mdi-asterisk')\"\n            :append-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime) < arrayOfObjects.length - 1\n                ? 'mdi-arrow-right-drop-circle'\n                : 'mdi-asterisk')\"\n            menu-props=\"auto\"\n            :items=\"arrayOfObjects\"\n            item-value=\"value\"\n            item-text=\"name\"\n            v-model=\"dataLayerTime\"\n            @change=\"dataLayerTimeSelection\"\n            @click:prepend-inner=\"dataLayerReduce\"\n            @click:append=\"dataLayerIncrease\">\n          </v-select>\n        </v-col>\n      </v-row>\n  </div>\n  <div style=\"width: 100%; height: 100%;\" v-else>\n    <line-chart v-if='datacollection'\n      id=\"chart\"\n      class=\"fill-height\"\n      :width=\"null\"\n      :height=\"null\"\n      :chart-data='datacollection'\n      :options='chartOptions()'></line-chart>\n  </div>\n</template>\n\n<script>\nimport { DateTime } from 'luxon';\nimport {\n  mapState,\n} from 'vuex';\nimport BarChart from '@/components/BarChart.vue';\nimport LineChart from '@/components/LineChart.vue';\nimport MapChart from '@/components/MapChart.vue';\nimport NUTS from '@/assets/NUTS_RG_03M_2016_4326_ESL2-DEL3.json';\nimport lockdownTimes from '@/assets/lockdown_data.json';\nimport countries from '@/assets/countries.json';\n\nexport default {\n  props: [\n    'currentIndicator',\n  ],\n  components: {\n    BarChart,\n    LineChart,\n    MapChart,\n  },\n  data() {\n    return {\n      dataLayerTime: null,\n      dataLayerIndex: 0,\n    };\n  },\n  mounted() {\n    const d = this.indicatorObject.time[this.indicatorObject.time.length - 1];\n    this.dataLayerTime = d.toFormat('dd. MMM');\n  },\n  computed: {\n    ...mapState('config', ['appConfig', 'baseConfig']),\n    arrayOfObjects() {\n      const indicator = { ...this.indicatorObject };\n      const indicatorCode = indicator.indicator;\n      const selectionOptions = [];\n      if (['E10a3', 'E10a8'].includes(indicatorCode)) {\n        // Find all unique day/month available\n        const timeset = new Set(\n          indicator.time.map((d) => d.toFormat('dd. MMM')),\n        );\n        timeset.forEach((t) => {\n          selectionOptions.push({\n            value: t,\n            name: t,\n          });\n        });\n      }\n      return selectionOptions;\n    },\n    datacollection() {\n      const indicator = { ...this.indicatorObject };\n      const indicatorCode = indicator.indicator;\n      let dataCollection;\n      const refColors = [\n        '#22aa99', '#a37', '#47a', '#a67', '#283', '#bbb',\n        '#6ce', '#994499', '#aaaa11', '#6633cc', '#e67300',\n      ];\n      if (indicator) {\n        let labels = [];\n        const { measurement } = indicator;\n        const colors = [];\n        const datasets = [];\n        if (['E10a1', 'E10a5'].includes(indicatorCode)) {\n          const referenceValue = indicator.referenceValue.map(Number);\n          for (let i = 0; i < indicator.time.length; i += 1) {\n            if (!Number.isNaN(indicator.time[i].toMillis())) {\n              const d = indicator.time[i];\n              const formattedDate = d.toFormat('dd. MMM');\n              labels.push(formattedDate);\n            } else {\n              labels.push(i);\n            }\n          }\n          const labelref = '2019';\n          const labelmeas = '2020';\n          datasets.push({\n            indLabels: Array(indicator.indicatorValue.length).join('.').split('.'),\n            label: labelref,\n            data: referenceValue,\n            fill: false,\n            backgroundColor: 'grey',\n          });\n          datasets.push({\n            indLabels: indicator.indicatorValue,\n            label: labelmeas,\n            data: measurement,\n            fill: false,\n            backgroundColor: 'black',\n          });\n        } else if (['E10a9'].includes(indicatorCode)) {\n          const categories = [\n            'National Workers',\n            'Foreign Workers',\n            'Unknown',\n          ];\n          categories.forEach((key, idx) => {\n            const data = indicator.measurement.map((row, rowIdx) => ({\n              t: indicator.time[rowIdx],\n              y: row[idx],\n            }));\n            datasets.push({\n              label: key,\n              data,\n              fill: false,\n              borderColor: refColors[idx],\n              backgroundColor: refColors[idx],\n              cubicInterpolationMode: 'monotone',\n              borderWidth: 1,\n              pointRadius: 2,\n            });\n          });\n        } else if (['GG'].includes(indicatorCode)) {\n          const vals = indicator.Values;\n          const datasetsObj = {\n            grocery: [],\n            parks: [],\n            residential: [],\n            retail_recreation: [],\n            transit_stations: [],\n          };\n          for (let entry = 0; entry < vals.length; entry += 1) {\n            const t = DateTime.fromISO(vals[entry].date);\n            datasetsObj.grocery.push({ t, y: vals[entry].grocery });\n            datasetsObj.parks.push({ t, y: vals[entry].parks });\n            datasetsObj.residential.push({ t, y: vals[entry].residential });\n            datasetsObj.retail_recreation.push({ t, y: vals[entry].retail_recreation });\n            datasetsObj.transit_stations.push({ t, y: vals[entry].transit_stations });\n          }\n          Object.keys(datasetsObj).forEach((key, idx) => {\n            datasets.push({\n              label: key,\n              data: datasetsObj[key],\n              fill: false,\n              borderColor: refColors[idx],\n              backgroundColor: refColors[idx],\n              borderWidth: 1,\n              pointRadius: 2,\n              cubicInterpolationMode: 'monotone',\n            });\n          });\n        } else if (['GSA'].includes(indicatorCode)) {\n          const vals = Object.keys(indicator.values);\n          const datasetsObj = {};\n          for (let entry = 0; entry < vals.length; entry += 1) {\n            datasetsObj[vals[entry]] = [];\n            const currVals = indicator.values[vals[entry]].values;\n            for (let i = 0; i < currVals.length; i += 1) {\n              datasetsObj[vals[entry]].push({\n                t: DateTime.fromISO(currVals[i].timestamp),\n                y: Number(currVals[i].waiting_time),\n              });\n            }\n            // It seems some timstamps are mixed in order so let us sort by date\n            // to get nice line connections through the timeline\n            datasetsObj[vals[entry]].sort((a, b) => a.t.toMillis() - b.t.toMillis());\n          }\n          Object.keys(indicator.values).forEach((key, idx) => {\n            datasets.push({\n              label: key,\n              data: datasetsObj[key],\n              fill: false,\n              borderColor: refColors[idx],\n              backgroundColor: refColors[idx],\n              borderWidth: 1,\n              pointRadius: 2,\n              cubicInterpolationMode: 'monotone',\n            });\n          });\n        } else if (['CV'].includes(indicatorCode)) {\n          const vals = indicator.Values;\n          const datasetsObj = {\n            confirmed: [],\n          };\n          for (let entry = 0; entry < vals.length; entry += 1) {\n            const t = DateTime.fromISO(vals[entry].date);\n            datasetsObj.confirmed.push({ t, y: Number(vals[entry].confirmed) });\n          }\n          Object.keys(datasetsObj).forEach((key, idx) => {\n            datasets.push({\n              label: key,\n              data: datasetsObj[key],\n              fill: false,\n              borderColor: refColors[idx],\n              backgroundColor: refColors[idx],\n              borderWidth: 1,\n              pointRadius: 2,\n              cubicInterpolationMode: 'monotone',\n            });\n          });\n        } else if (['OW'].includes(indicatorCode)) {\n          const vals = indicator.Values;\n          const pI = [\n            'total_vaccinations', 'people_fully_vaccinated',\n            'daily_vaccinations',\n          ];\n          const datasetsObj = {};\n          for (let idx = 0; idx < pI.length; idx += 1) {\n            datasetsObj[pI[idx]] = [];\n          }\n          for (let entry = 0; entry < vals.length; entry += 1) {\n            const t = DateTime.fromISO(vals[entry].date);\n            for (let idx = 0; idx < pI.length; idx += 1) {\n              datasetsObj[pI[idx]].push({ t, y: vals[entry][pI[idx]] });\n            }\n          }\n          Object.keys(datasetsObj).forEach((key, idx) => {\n            datasets.push({\n              label: key,\n              data: datasetsObj[key],\n              fill: false,\n              borderColor: refColors[idx],\n              backgroundColor: refColors[idx],\n              borderWidth: 1,\n              pointRadius: 2,\n              cubicInterpolationMode: 'monotone',\n            });\n          });\n        } else if (['N3b'].includes(indicatorCode)) {\n          const sensors = Array.from(new Set(indicator.eoSensor)).sort();\n          for (let pp = 0; pp < sensors.length; pp += 1) {\n            const pKey = sensors[pp];\n            const data = indicator.time.map((date, i) => {\n              let output = null;\n              if (indicator.eoSensor[i] === pKey) {\n                output = { t: date, y: measurement[i] };\n              }\n              return output;\n            }).filter((d) => d !== null);\n            let colorUsed = refColors[pp];\n            if (this.indDefinition.sensorColorMap && this.indDefinition.sensorColorMap[pKey]) {\n              colorUsed = this.indDefinition.sensorColorMap[pKey];\n            }\n            datasets.push({\n              label: pKey,\n              data,\n              fill: false,\n              borderColor: colorUsed,\n              backgroundColor: colorUsed,\n              cubicInterpolationMode: 'monotone',\n            });\n          }\n        } else if (['N4c'].includes(indicatorCode)) {\n          const measData = indicator.measurement.map(Number);\n          measData.shift();\n          const refData = indicator.referenceValue.map(Number);\n          refData.shift();\n\n          labels = [\n            indicator.referenceTime[0].toISODate(),\n            indicator.time[0].toISODate(),\n            indicator.time[5].toISODate(),\n          ];\n\n          datasets.push({\n            label: 'metallic waste area',\n            data: [refData[0], measData[0], measData[5]],\n            backgroundColor: refColors[0],\n          });\n          datasets.push({\n            label: 'mixed waste area',\n            data: [refData[1], measData[1], measData[6]],\n            backgroundColor: refColors[1],\n          });\n          datasets.push({\n            label: 'plastic waste area',\n            data: [refData[2], measData[2], measData[7]],\n            backgroundColor: refColors[2],\n          });\n          datasets.push({\n            label: 'soil waste area',\n            data: [refData[3], measData[3], measData[8]],\n            backgroundColor: refColors[3],\n          });\n        } else if (['E10a2', 'E10a6', 'E10a7', 'E8', 'E13e', 'E13f', 'E13g', 'E13h', 'E13i', 'E13l', 'E13m'].includes(indicatorCode)) {\n          const uniqueRefs = [];\n          const uniqueMeas = [];\n          const referenceValue = indicator.referenceValue.map(Number);\n          indicator.time.forEach((date, i) => {\n            const meas = { t: date.set({ year: 2000 }), y: measurement[i] };\n            if (typeof uniqueRefs.find((item) => item.t.equals(meas.t)) === 'undefined') {\n              uniqueMeas.push(meas);\n            }\n          });\n          indicator.referenceTime.forEach((date, i) => {\n            if (!['', '/'].includes(indicator.referenceValue[i])) {\n              const ref = { t: date.set({ year: 2000 }), y: referenceValue[i] };\n              if (typeof uniqueRefs.find((item) => item.t.equals(ref.t)) === 'undefined') {\n                uniqueRefs.push(ref);\n              }\n            }\n          });\n          datasets.push({\n            label: '2020',\n            data: uniqueMeas,\n            fill: false,\n            borderColor: refColors[1],\n            backgroundColor: refColors[1],\n            borderWidth: 2,\n          });\n          if (uniqueRefs.length > 0) {\n            datasets.push({\n              label: '2019',\n              data: uniqueRefs,\n              fill: false,\n              borderColor: refColors[0],\n              backgroundColor: refColors[0],\n              borderWidth: 2,\n            });\n          }\n        } else if (['E13n', 'C1', 'C2', 'C3'].includes(indicatorCode)) {\n          // Group by indicator value\n          const types = {};\n          indicator.indicatorValue.forEach((ind, idx) => {\n            if (Object.keys(types).includes(ind)) {\n              types[ind].push({\n                t: DateTime.fromISO(indicator.time[idx]),\n                y: Number(indicator.measurement[idx]),\n              });\n            } else {\n              types[ind] = [{\n                t: DateTime.fromISO(indicator.time[idx]),\n                y: Number(indicator.measurement[idx]),\n              }];\n            }\n          });\n          Object.keys(types).forEach((key, i) => {\n            datasets.push({\n              label: key,\n              fill: false,\n              data: types[key],\n              backgroundColor: refColors[i],\n              borderColor: refColors[i],\n              borderWidth: 2,\n            });\n          });\n        } else if (['N2', 'E10c'].includes(indicatorCode)) {\n          /* Group data by year in month slices */\n          const data = indicator.time.map((date, i) => {\n            colors.push(this.getIndicatorColor(indicator.colorCode[i]));\n            return { t: date, y: measurement[i] };\n          });\n          const dataGroups = {};\n          const colorGroups = {};\n          for (let i = 0; i < data.length; i += 1) {\n            const currYear = data[i].t.year;\n            if (Object.prototype.hasOwnProperty.call(dataGroups, currYear)) {\n              dataGroups[currYear].push({\n                t: data[i].t.set({ year: 2000 }),\n                y: [data[i].y],\n              });\n              colorGroups[currYear].push(colors[i]);\n            } else {\n              dataGroups[currYear] = [{\n                t: data[i].t.set({ year: 2000 }),\n                y: [data[i].y],\n              }];\n              colorGroups[currYear] = [colors[i]];\n            }\n          }\n          const uniqueYears = Object.keys(dataGroups);\n          uniqueYears.sort();\n          const yLength = uniqueYears.length - 1;\n          uniqueYears.forEach((key, i) => {\n            datasets.push({\n              // fill with empty values\n              indLabels: Array(dataGroups[key].length).join('.').split('.'),\n              label: key,\n              fill: false,\n              data: dataGroups[key],\n              backgroundColor: refColors[yLength - i],\n              borderColor: refColors[yLength - i],\n              borderWidth: 2,\n            });\n          });\n        } else if (['N1'].includes(indicatorCode)) {\n          const stdDevMin = [];\n          const stdDevMax = [];\n          const min = [];\n          const max = [];\n          const median = [];\n          const data = [];\n          indicator.referenceValue.forEach((item, i) => {\n            const t = indicator.time[i];\n            data.push({ y: measurement[i], t });\n            if (!Number.isNaN(item) && !['NaN', '/'].includes(item)) {\n              const obj = JSON.parse(item);\n              // [median,std,max,min,percentage valid pixels]\n              median.push({ y: obj[0], t });\n              if (obj[1] !== null) {\n                stdDevMin.push({ y: measurement[i] - obj[1], t });\n                stdDevMax.push({ y: measurement[i] + obj[1], t });\n              }\n              max.push({ y: obj[2], t });\n              min.push({ y: obj[3], t });\n            } else {\n              median.push({ y: Number.NaN, t });\n              stdDevMin.push({ y: Number.NaN, t });\n              stdDevMax.push({ y: Number.NaN, t });\n              max.push({ y: Number.NaN, t });\n              min.push({ y: Number.NaN, t });\n            }\n          });\n          datasets.push({\n            label: indicator.yAxis,\n            data,\n            fill: false,\n            backgroundColor: refColors[0],\n            borderColor: refColors[0],\n            spanGaps: false,\n            borderWidth: 2,\n          });\n          // Check for empty array, if it is the case do not include data\n          if (typeof (median.find((a) => a.y !== null)) !== 'undefined') {\n            datasets.push({\n              label: 'Median',\n              data: median,\n              fill: false,\n              pointRadius: 0,\n              borderColor: 'black',\n              borderWidth: 1,\n              pointStyle: 'line',\n              spanGaps: false,\n            });\n          }\n          // Check for empty array, if it is the case do not include data\n          if (typeof (min.find((a) => a.y !== null)) !== 'undefined') {\n            datasets.push({\n              label: 'Min',\n              data: min,\n              fill: false,\n              pointRadius: 0,\n              backgroundColor: refColors[4],\n              borderColor: refColors[4],\n              borderWidth: 1,\n              pointStyle: 'line',\n              spanGaps: false,\n            });\n          }\n          // Check for empty array, if it is the case do not include data\n          if (typeof (max.find((a) => a.y !== null)) !== 'undefined') {\n            datasets.push({\n              label: 'Max',\n              data: max,\n              fill: false,\n              pointRadius: 0,\n              backgroundColor: refColors[1],\n              borderColor: refColors[1],\n              borderWidth: 1,\n              pointStyle: 'line',\n              spanGaps: false,\n            });\n          }\n          // Check for empty array, if it is the case do not include data\n          if (typeof (stdDevMax.find((a) => a.y !== null)) !== 'undefined') {\n            datasets.push({\n              label: 'Standard deviation (STD)',\n              data: stdDevMax,\n              fill: '+1',\n              pointRadius: 0,\n              spanGaps: false,\n              backgroundColor: 'rgba(0,0,0,0.1)',\n              borderColor: 'rgba(0,0,0,0.0)',\n              pointStyle: 'rect',\n            });\n          }\n          // Check for empty array, if it is the case do not include data\n          if (typeof (stdDevMin.find((a) => a.y !== null)) !== 'undefined') {\n            datasets.push({\n              label: 'hide_',\n              data: stdDevMin,\n              fill: '-1',\n              pointRadius: 0,\n              spanGaps: false,\n              backgroundColor: 'rgba(0,0,0,0.0)',\n              borderColor: 'rgba(0,0,0,0.0)',\n              pointStyle: 'rect',\n            });\n          }\n        } else if (['N3'].includes(indicatorCode)) {\n          let referenceValue = [];\n          const stdDev = [];\n          indicator.referenceValue.forEach((item) => {\n            if (!Number.isNaN(item) && !['NaN', '[NaN NaN]', '/'].includes(item)) {\n              const obj = JSON.parse(item.replace(/,/g, '.').replace(' ', ','));\n              if (obj[0] !== -999 && obj[1] !== -999) {\n                referenceValue.push(obj[0]);\n                stdDev.push(obj[1]);\n              } else {\n                referenceValue.push(Number.NaN);\n                stdDev.push(Number.NaN);\n              }\n            } else {\n              referenceValue.push(Number.NaN);\n              stdDev.push(Number.NaN);\n            }\n          });\n\n          const stdDevMax = stdDev.map((dev, i) => (\n            Number.isNaN(referenceValue[i])\n              ? Number.NaN\n              : (10 ** (referenceValue[i] + dev))\n          ));\n          const stdDevMin = stdDev.map((dev, i) => (\n            Number.isNaN(referenceValue[i])\n              ? Number.NaN\n              : (10 ** (referenceValue[i] - dev))\n          ));\n\n          referenceValue = referenceValue.map((val) => (\n            Number.isNaN(val) ? Number.NaN : (10 ** val)\n          ));\n\n          for (let i = 0; i < indicator.time.length; i += 1) {\n            if (!Number.isNaN(indicator.time[i].toMillis())) {\n              labels.push(indicator.time[i].toISODate());\n            } else {\n              labels.push(i);\n            }\n            let colorCode = '';\n            if (Object.prototype.hasOwnProperty.call(indicator, 'colorCode')) {\n              colorCode = indicator.colorCode[i];\n            }\n            colors.push(this.getIndicatorColor(colorCode));\n          }\n\n          datasets.push({\n            label: 'Weekly climatology of chlorophyll conc. (CHL_clim) 2017-2019',\n            data: referenceValue,\n            fill: false,\n            pointRadius: 0,\n            borderColor: 'black',\n            pointStyle: 'line',\n            spanGaps: false,\n          });\n          datasets.push({\n            label: 'Standard deviation (STD)',\n            data: stdDevMax,\n            fill: '+1',\n            pointRadius: 0,\n            spanGaps: false,\n            backgroundColor: 'rgba(0,0,0,0.1)',\n            borderColor: 'rgba(0,0,0,0.0)',\n            pointStyle: 'rect',\n          });\n          datasets.push({\n            label: 'hide_',\n            data: stdDevMin,\n            fill: '-1',\n            pointRadius: 0,\n            spanGaps: false,\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            borderColor: 'rgba(0,0,0,0.0)',\n            pointStyle: 'rect',\n          });\n\n          // Find unique indicator values\n          const indicatorValues = {};\n          indicator.indicatorValue.map((val, i) => {\n            let key = val.toLowerCase();\n            key = key.charAt(0).toUpperCase() + key.slice(1);\n            if (!['', '/'].includes(key) && typeof indicatorValues[key] === 'undefined') {\n              indicatorValues[key] = this.getIndicatorColor(\n                indicator.colorCode[i],\n              );\n            }\n            return null;\n          });\n\n          Object.entries(indicatorValues).forEach(([key, value]) => {\n            const currMeas = measurement.map((row, i) => {\n              let val = row;\n              if (indicator.indicatorValue[i] !== key.toUpperCase()) {\n                val = NaN;\n              }\n              return val;\n            });\n            datasets.push({\n              label: key,\n              data: currMeas.map((val) => (\n                Number.isNaN(val) ? Number.NaN : (10 ** val)\n              )),\n              backgroundColor: value,\n              borderColor: value,\n              fill: false,\n              showLine: false,\n              spanGaps: false,\n            });\n          });\n        } else if (['N1a', 'N1b', 'N1c', 'N1d', 'E12b'].includes(indicatorCode)) {\n          const maxRef = [];\n          const minRef = [];\n          const mean7dRef = [];\n          const mean7d2020 = [];\n          indicator.referenceValue.forEach((item, i) => {\n            const t = indicator.time[i];\n            if (!['', '/'].includes(item)) {\n              const obj = item.replace(/[[\\] ]/g, '').split(',')\n                .map((str) => (str === '' ? Number.NaN : Number(str)));\n              maxRef.push({ y: obj[0], t });\n              minRef.push({ y: obj[1], t });\n              mean7dRef.push({ y: obj[2], t });\n              mean7d2020.push({ y: obj[3], t });\n            } else {\n              maxRef.push({ y: Number.NaN, t });\n              minRef.push({ y: Number.NaN, t });\n              mean7dRef.push({ y: Number.NaN, t });\n              mean7d2020.push({ y: Number.NaN, t });\n            }\n          });\n\n          datasets.push({\n            label: 'Value',\n            data: measurement.map((meas, i) => ({ y: meas, t: indicator.time[i] })),\n            backgroundColor: 'rgba(255,255,255,0.0)',\n            borderColor: 'red',\n            spanGaps: false,\n            pointRadius: 0,\n            borderWidth: 1.5,\n          });\n          datasets.push({\n            label: '7-day mean',\n            data: mean7d2020,\n            backgroundColor: 'rgba(255,255,255,0.0)',\n            pointRadius: 0,\n            borderColor: 'red',\n            spanGaps: false,\n            borderDash: [6, 3],\n            borderWidth: 2,\n          });\n          datasets.push({\n            label: '2017-2019 7d mean',\n            data: mean7dRef,\n            backgroundColor: 'rgba(255,255,255,0.0)',\n            pointRadius: 0,\n            borderColor: 'grey',\n            spanGaps: false,\n            borderDash: [6, 3],\n            borderWidth: 2,\n          });\n          datasets.push({\n            label: '2017-2019 range',\n            data: maxRef,\n            fill: 4,\n            pointRadius: 0,\n            spanGaps: false,\n            backgroundColor: 'rgba(0,0,0,0.2)',\n            borderColor: 'rgba(0,0,0,0.0)',\n            pointStyle: 'rect',\n          });\n          datasets.push({\n            label: 'hide_',\n            data: minRef,\n            fill: 3,\n            pointRadius: 0,\n            spanGaps: false,\n            backgroundColor: 'rgba(0,0,0,0.0)',\n            borderColor: 'rgba(0,0,0,0.0)',\n            pointStyle: 'rect',\n          });\n\n          // Find unique indicator values\n          const indicatorValues = {};\n          indicator.indicatorValue.map((val, i) => {\n            let key = val.toLowerCase();\n            key = key.charAt(0).toUpperCase() + key.slice(1);\n            if (!['', '/'].includes(key) && typeof indicatorValues[key] === 'undefined') {\n              indicatorValues[key] = this.getIndicatorColor(\n                indicator.colorCode[i],\n              );\n            }\n            return null;\n          });\n\n          Object.entries(indicatorValues).forEach(([key, value]) => {\n            datasets.push({\n              label: key,\n              data: [],\n              backgroundColor: value,\n              borderColor: value,\n            });\n          });\n        } else if (['E10a3', 'E10a8'].includes(indicatorCode)) {\n          const nutsFeatures = NUTS.features;\n          const outline = [];\n          const currIDs = [];\n          let features = measurement.map((meas, i) => {\n            // Find correct NUTS ID Shape\n            const geom = nutsFeatures.find((f) => (\n              f.properties.NUTS_ID === indicator.siteName[i]));\n            let output;\n            if (geom) {\n              if (currIDs.indexOf(indicator.siteName[i]) === -1) {\n                currIDs.push(indicator.siteName[i]);\n                outline.push({\n                  type: 'Feature',\n                  properties: {},\n                  geometry: geom.geometry,\n                });\n              }\n              const { coordinates } = geom.geometry;\n              const lons = (geom.geometry.type === 'Polygon') ? coordinates.flat(1).map((tuple) => tuple[0]) : coordinates.flat(2).map((tuple) => tuple[0]);\n              const lats = (geom.geometry.type === 'Polygon') ? coordinates.flat(1).map((tuple) => tuple[1]) : coordinates.flat(2).map((tuple) => tuple[1]);\n              const minLat = Math.min(...lats);\n              const minLon = Math.min(...lons);\n              const centerPoint = {\n                lat: minLat + (Math.max(...lats) - minLat) / 2,\n                lon: minLon + (Math.max(...lons) - minLon) / 2,\n              };\n              output = {\n                type: 'Feature',\n                properties: {},\n                geometry: geom.geometry,\n                description: 'description',\n                latitude: centerPoint.lat,\n                longitude: centerPoint.lon,\n                name: geom.properties.NUTS_NAME,\n                time: indicator.time[i],\n                value: Number(meas),\n                referenceTime: indicator.referenceTime[i],\n                referenceValue: indicator.referenceValue[i],\n                color: indicator.colorCode[i],\n              };\n              if (indicatorCode === 'E10a8') {\n                // Swap value to have reference value\n                output.value = Number(indicator.referenceValue[i]);\n                output.referenceValue = Number(meas);\n              }\n            }\n            return output;\n          });\n\n          // Filter by undefined and time\n          features = features.filter((d) => (\n            typeof d !== 'undefined'));\n\n          const filteredFeatures = features.filter((d) => {\n            let include = false;\n            if (d.time instanceof DateTime) {\n              include = d.time.toFormat('dd. MMM') === this.dataLayerTime\n                && !Number.isNaN(d.value);\n            }\n            return include;\n          });\n\n          labels = features.map((d) => d.name);\n          datasets.push({\n            outline,\n            outlineBackgroundColor: null,\n            outlineBorderColor: 'black',\n            outlineBorderWidth: 1,\n            showOutline: true,\n            backgroundColor: filteredFeatures.map((d) => d.color),\n            borderColor: filteredFeatures.map((d) => d.color),\n            borderWidth: 3,\n            data: filteredFeatures,\n            clipMap: 'items',\n          });\n        } else {\n          const data = indicator.time.map((date, i) => {\n            colors.push(this.getIndicatorColor(indicator.colorCode[i]));\n            return { t: date, y: measurement[i] };\n          });\n          datasets.push({\n            data,\n            label: indicator.yAxis,\n            backgroundColor: colors,\n            borderColor: colors,\n          });\n        }\n        dataCollection = {\n          labels,\n          datasets,\n        };\n      }\n      return dataCollection;\n    },\n    indicatorObject() {\n      return this.currentIndicator\n        || this.$store.state.indicators.customAreaIndicator\n        || this.$store.state.indicators.selectedIndicator;\n    },\n    indDefinition() {\n      return this.baseConfig.indicatorsDefinition[this.indicatorObject.indicator];\n    },\n  },\n  methods: {\n    dataLayerTimeSelection(payload) {\n      this.dataLayerTime = payload;\n      const newIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime);\n      this.dataLayerIndex = newIndex;\n    },\n    dataLayerReduce() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime);\n      this.dataLayerIndex = currentIndex - 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex - 1].value);\n    },\n    dataLayerIncrease() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime);\n      this.dataLayerIndex = currentIndex + 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex + 1].value);\n    },\n    formatNumRef(num, maxDecimals = 3) {\n      return Number.parseFloat(num.toFixed(maxDecimals));\n    },\n    roundValueInd(val) {\n      if (this.indDefinition.maxDecimals === -1) {\n        return val;\n      }\n      if (Number.isInteger(this.indDefinition.maxDecimals)) {\n        return this.formatNumRef(val, this.indDefinition.maxDecimals);\n      }\n      // use default\n      return this.formatNumRef(val, 2);\n    },\n    getMinMaxDate(timeData) {\n      let timeMin = Math.min.apply(null, timeData.map((d) => d.toMillis()));\n      let timeMax = Math.max.apply(null, timeData.map((d) => d.toMillis()));\n      const buffer = (timeMax - timeMin) / timeData.length;\n      timeMin -= buffer;\n      timeMax += buffer;\n      return [timeMin, timeMax];\n    },\n    chartOptions() {\n      const indicatorCode = this.indicatorObject.indicator;\n      const reference = Number.parseFloat(this.indicatorObject.referenceValue);\n      let timeMinMax = this.getMinMaxDate(this.indicatorObject.time);\n      const annotations = [];\n      let low = 0;\n      let high = 0;\n      const defaultAnnotationSettings = {\n        type: 'line',\n        mode: 'horizontal',\n        scaleID: 'y-axis-0',\n        borderColor: 'rgba(0, 0, 255, 0.5)',\n        borderWidth: 2,\n        borderDash: [2, 3],\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              unit: 'month',\n            },\n          }],\n        },\n        label: {\n          enabled: true,\n          fontStyle: 'normal',\n          paddingX: 2,\n          paddingY: 2,\n          backgroundColor: 'rgba(255, 255, 255, 0.7)',\n          fontColor: 'rgba(0, 0, 0, 0.8)',\n        },\n      };\n      if (!Number.isNaN(reference)\n        && !['E10a1', 'E10a2', 'E10a5', 'E10a6', 'E10a7', 'E10a9', 'N4c', 'E8', 'E13e', 'E13f', 'E13g', 'E13h', 'E13i', 'E13l', 'E13m', 'E12c', 'E12d']\n          .includes(indicatorCode)) {\n        annotations.push({\n          ...defaultAnnotationSettings,\n          label: {\n            ...defaultAnnotationSettings.label,\n            content: `reference: ${this.formatNumRef(reference)}`,\n          },\n          value: reference,\n        });\n      }\n      if (['E4'].includes(indicatorCode)) {\n        low = 0.2 * reference;\n        annotations.push({\n          ...defaultAnnotationSettings,\n          borderColor: 'rgba(50, 252, 0, 0.5)',\n          value: low,\n          label: {\n            ...defaultAnnotationSettings.label,\n            content: `on/off: ${this.formatNumRef(low)}`,\n          },\n        });\n      } else if (['E11', 'E1a', 'E1', 'E2', 'E2_S2', 'E1a_S2', 'E1_S2'].includes(indicatorCode)) {\n        if (indicatorCode === 'E11') {\n          low = 0.3 * reference;\n          high = 0.7 * reference;\n        } else if (['E1a', 'E1', 'E2', 'E2_S2', 'E1a_S2', 'E1_S2'].includes(indicatorCode)) {\n          low = 0.7 * reference;\n          high = 1.3 * reference;\n        }\n        annotations.push({\n          ...defaultAnnotationSettings,\n          value: low,\n          label: {\n            ...defaultAnnotationSettings.label,\n            content: `low: ${this.formatNumRef(low)}`,\n          },\n        });\n        annotations.push({\n          ...defaultAnnotationSettings,\n          value: high,\n          label: {\n            ...defaultAnnotationSettings.label,\n            content: `high: ${this.formatNumRef(high)}`,\n          },\n        });\n      }\n\n      // Introduce background area annotations for lockdown times, does not\n      // work for all chart types, so we make sure it is not any of those charts\n      if (!['E10a3', 'E10a8', 'N2', 'E12c', 'E12d', 'GSA'].includes(indicatorCode)) {\n        // Find country based on alpha-3 code\n        const currCountry = countries.features.find(\n          (cntr) => cntr.properties.alpha2 === this.indicatorObject.country,\n        );\n        if (typeof currCountry !== 'undefined'\n          && Object.prototype.hasOwnProperty.call(lockdownTimes, currCountry.id)) {\n          const lckTs = lockdownTimes[currCountry.id]['C7_Restrictions on internal movement'];\n          for (let i = 0; i < lckTs.length; i++) {\n            let areaColor = 'rgba(0, 0, 0, 0.0)';\n            if (lckTs[i].value === 1) {\n              areaColor = 'rgba(204, 143, 143, 0.24)';\n            } else if (lckTs[i].value === 2) {\n              areaColor = 'rgba(207, 109, 109, 0.54)';\n            }\n            // We also have special date handling for some chart types as we\n            // simulate year agnostic rendering, so we convert all dates to\n            // one year\n            let start = DateTime.fromISO(lckTs[i].start);\n            let end = DateTime.fromISO(lckTs[i].end);\n            if (['E10a2', 'E10a6', 'E10a7', 'E10c', 'E8', 'E13e', 'E13f', 'E13g', 'E13h', 'E13i', 'E13l', 'E13m'].includes(indicatorCode)) {\n              start = start.set({ year: 2000 });\n              end = end.set({ year: 2000 });\n            }\n            if (lckTs[i].value !== 0) {\n              annotations.push({\n                drawTime: 'beforeDatasetsDraw',\n                type: 'box',\n                xScaleID: 'x-axis-0',\n                xMin: start.toISODate(),\n                xMax: end.toISODate(),\n                borderColor: areaColor,\n                borderWidth: 0,\n                backgroundColor: areaColor,\n              });\n            }\n          }\n        }\n      }\n\n      let xAxes = {};\n      if (!['E10a1', 'E10a2', 'E10a3', 'E10a5', 'E10a6', 'E10a7', 'E10a8', 'E10c', 'E12c', 'E12d', 'N2'].includes(indicatorCode)) {\n        xAxes = [{\n          type: 'time',\n          time: {\n            unit: 'week',\n          },\n          ticks: {\n            min: timeMinMax[0],\n            max: timeMinMax[1],\n          },\n          barThickness: 'flex',\n        }];\n        if (!['N3', 'N3b'].includes(indicatorCode)) {\n          xAxes[0].distribution = 'series';\n        }\n      }\n\n      if (['E10a2', 'E10a6', 'E10a7', 'E10c', 'E8', 'E13e', 'E13f', 'E13g', 'E13h', 'E13i', 'E13l', 'E13m'].includes(indicatorCode)) {\n        /* Recalculate to get min max months in data converted to one year */\n        timeMinMax = this.getMinMaxDate(\n          this.indicatorObject.time.map((date) => (\n            date.set({ year: 2000 })\n          )),\n        );\n        /* Check also for reference time */\n        const refTimeMinMax = this.getMinMaxDate(\n          this.indicatorObject.referenceTime.map((date) => (\n            date.set({ year: 2000 })\n          )),\n        );\n        xAxes = [{\n          type: 'time',\n          time: {\n            unit: 'month',\n            displayFormats: {\n              month: 'MMM',\n            },\n            tooltipFormat: 'dd. MMM',\n          },\n          ticks: {\n            min: (timeMinMax[0] < refTimeMinMax[0]) ? timeMinMax[0] : refTimeMinMax[0],\n            max: (timeMinMax[1] > refTimeMinMax[1]) ? timeMinMax[1] : refTimeMinMax[1],\n          },\n        }];\n      }\n\n      if (['N2'].includes(indicatorCode)) {\n        timeMinMax = this.getMinMaxDate(\n          this.indicatorObject.time.map((date) => (\n            date.set({ year: 2000 })\n          )),\n        );\n        xAxes = [{\n          type: 'time',\n          time: {\n            unit: 'month',\n            displayFormats: {\n              month: 'MMM',\n            },\n            tooltipFormat: 'dd. MMM',\n          },\n          distribution: 'series',\n          ticks: {\n            min: timeMinMax[0],\n            max: timeMinMax[1],\n          },\n        }];\n      }\n\n      if (['E12c', 'E12d'].includes(indicatorCode)) {\n        xAxes = [{\n          type: 'time',\n          time: {\n            unit: 'year',\n            displayFormats: {\n              year: 'yyyy',\n            },\n            tooltipFormat: 'yyyy-MM-dd - yyyy-06-30',\n          },\n          distribution: 'series',\n          ticks: {\n            min: timeMinMax[0],\n            max: timeMinMax[1],\n          },\n        }];\n      }\n\n      if (['E13d', 'E13n', 'C1', 'C2', 'C3'].includes(indicatorCode)) {\n        xAxes = [{\n          type: 'time',\n          time: {\n            unit: 'month',\n            displayFormats: {\n              month: 'MMM yy',\n            },\n            tooltipFormat: 'MMM yyyy',\n          },\n          distribution: 'series',\n          ticks: {\n            min: timeMinMax[0],\n            max: timeMinMax[1],\n          },\n        }];\n      }\n\n\n      let plugins = {\n        datalabels: {\n          display: false,\n        },\n      };\n\n      const yAxes = [{\n        scaleLabel: {\n          display: true,\n          labelString: this.indicatorObject.yAxis,\n          padding: 2,\n        },\n        ticks: {\n          lineHeight: 1,\n          suggestedMin: Math.min(\n            ...this.indicatorObject.measurement\n              .filter((d) => !Number.isNaN(d)),\n          ) - 1,\n          suggestedMax: Math.max(\n            ...this.indicatorObject.measurement\n              .filter((d) => !Number.isNaN(d)),\n          ) + 1,\n        },\n      }];\n\n      // This indicator has an array of values so we need to calculate min/max\n      // different\n      if (['E10a9'].includes(indicatorCode)) {\n        const measFlat = this.indicatorObject.measurement.flat();\n        yAxes[0].ticks.suggestedMin = Math.min(...measFlat);\n        yAxes[0].ticks.suggestedMax = Math.max(...measFlat);\n      }\n\n      const legend = {\n        labels: {\n          generateLabels: (chart) => {\n            const { datasets } = chart.data;\n            const { labels } = chart.legend.options;\n            const { usePointStyle } = labels;\n            const overrideStyle = labels.pointStyle;\n            let labelSet = chart._getSortedDatasetMetas();\n            labelSet = labelSet.filter((meta) => {\n              let includeLabel = false;\n              if (Object.prototype.hasOwnProperty.call(datasets[meta.index], 'label')) {\n                includeLabel = !datasets[meta.index].label.startsWith('hide_');\n              }\n              return includeLabel;\n            });\n            const labelObjects = labelSet.map((meta) => {\n              const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n              const borderWidth = 2;\n              let hidden = false;\n              if (meta.hidden === true) {\n                hidden = true;\n              }\n              return {\n                text: datasets[meta.index].label,\n                fillStyle: style.backgroundColor,\n                hidden,\n                lineCap: style.borderCapStyle,\n                lineDash: style.borderDash,\n                lineDashOffset: style.borderDashOffset,\n                lineJoin: style.borderJoinStyle,\n                lineWidth: borderWidth,\n                strokeStyle: style.borderColor,\n                pointStyle: overrideStyle || style.pointStyle,\n                rotation: style.rotation,\n                // Below is extra data used for toggling the datasets\n                datasetIndex: meta.index,\n              };\n            }, this);\n            // Now we add our default 2 lockdown labels but we exclude indicators\n            // where it is not applicable\n            if (!['E10a1', 'E10a5', 'E10a8', 'N2', 'N4c', 'E12c', 'E12d', 'GSA', 'N1']\n              .includes(this.indicatorObject.indicator)) {\n              labelObjects.push({\n                text: 'Low Restrictions',\n                fillStyle: 'rgba(204, 143, 143, 0.24)',\n                hidden: false,\n                lineWidth: 0,\n                datasetIndex: -1,\n              });\n              labelObjects.push({\n                text: 'High Restrictions',\n                fillStyle: 'rgba(207, 109, 109, 0.54)',\n                hidden: false,\n                lineWidth: 0,\n                datasetIndex: -1,\n              });\n            }\n            return labelObjects;\n          },\n        },\n      };\n\n      if (['N4c'].includes(indicatorCode)) {\n        xAxes = [{\n          stacked: true,\n        }];\n        yAxes[0].stacked = true;\n        yAxes[0].ticks.beginAtZero = true;\n        yAxes[0].ticks.suggestedMin = Math.min(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n        yAxes[0].ticks.suggestedMax = Math.max(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n      }\n\n      if (['E12b'].includes(indicatorCode)) {\n        // update used yaxis chart max to be max value\n        yAxes[0].ticks.suggestedMax = Math.max(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n      }\n\n      if (['E12b', 'E1a', 'E1', 'E2', 'E2_S2', 'E1a_S2', 'E1_S2', 'E13d'].includes(indicatorCode)) {\n      // update used yaxis chart min to be min value\n        yAxes[0].ticks.suggestedMin = Math.min(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n      }\n      if (['CV', 'OW'].includes(indicatorCode)) {\n        yAxes[0].ticks.beginAtZero = true;\n        yAxes[0].ticks = {\n          lineHeight: 1,\n          suggestedMin: Math.min(\n            ...this.indicatorObject.measurement\n              .filter((d) => !Number.isNaN(d)),\n          ),\n          suggestedMax: Math.max(\n            ...this.indicatorObject.measurement\n              .filter((d) => !Number.isNaN(d)),\n          ),\n        };\n      }\n\n      if (['E10a1', 'E10a5'].includes(indicatorCode)) {\n        yAxes[0].ticks.beginAtZero = true;\n        plugins = {\n          datalabels: {\n            labels: {\n              value: {\n                anchor: 'end',\n                align: 'end',\n                offset: 10,\n                formatter: (value, context) => {\n                  let labelRes = '';\n                  const percentage = context.chart.data.datasets[context.datasetIndex]\n                    .indLabels[context.dataIndex];\n                  if (!['', '/'].includes(percentage)) {\n                    const percVal = Number((percentage * 100).toPrecision(4));\n                    if (percVal > 0) {\n                      labelRes = `+${percVal}%`;\n                    } else {\n                      labelRes = `${percVal}%`;\n                    }\n                  }\n                  return labelRes;\n                },\n                color: (context) => {\n                  let color = 'red';\n                  if (context.chart.data.datasets[context.datasetIndex]\n                    .indLabels[context.dataIndex] > 0) {\n                    color = 'green';\n                  }\n                  return color;\n                },\n              },\n              title: {\n                color: 'black',\n                anchor: 'end',\n                align: 'end',\n                offset: -6,\n                formatter: (value) => value.toFixed(1),\n              },\n            },\n          },\n        };\n      }\n      if (['E8'].includes(indicatorCode)) {\n        yAxes[0].ticks.suggestedMin = Math.min(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n        yAxes[0].ticks.suggestedMax = Math.max(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n      }\n      if (['E9'].includes(indicatorCode)) {\n        yAxes[0].ticks.suggestedMin = 0;\n        yAxes[0].ticks.suggestedMax = Math.max(\n          ...this.indicatorObject.measurement\n            .filter((d) => !Number.isNaN(d)),\n        );\n      }\n      if (['E10a6', 'E10a7'].includes(indicatorCode)) {\n        yAxes[0].ticks.beginAtZero = true;\n        plugins = {\n          datalabels: {\n            labels: {\n              title: {\n                color: (context) => context.dataset.backgroundColor,\n                font: {\n                  size: 10,\n                },\n                anchor: 'end',\n                align: 'end',\n                offset: (context) => {\n                  if (context.chart.data.datasets.length === 2) {\n                    if (context.datasetIndex === 0) {\n                      if (!Number.isNaN(context.chart.data.datasets[1].data[context.dataIndex].y)\n                        && context.chart.data.datasets[0].data[context.dataIndex].y\n                        > context.chart.data.datasets[1].data[context.dataIndex].y) {\n                        return 0;\n                      }\n                      return -28;\n                    }\n                    if (!Number.isNaN(context.chart.data.datasets[0].data[context.dataIndex].y)\n                      && context.chart.data.datasets[0].data[context.dataIndex].y\n                      > context.chart.data.datasets[1].data[context.dataIndex].y) {\n                      return -28;\n                    }\n                    return 0;\n                  }\n                  return 0;\n                },\n                formatter: (value) => `${value.y.toFixed(1)}%`,\n              },\n            },\n          },\n        };\n      }\n\n      if (['N2', 'E12c', 'E12d'].includes(indicatorCode)) {\n        yAxes[0].ticks.beginAtZero = true;\n      }\n\n      if (['E10a3', 'E10a8'].includes(indicatorCode)) {\n        yAxes[0].ticks = {\n          suggestedMin: Number.NaN,\n          suggestedMax: Number.NaN,\n          padding: -20,\n        };\n      }\n      if (['E10c', 'E10a2', 'E10a6', 'E10a7'].includes(indicatorCode)) {\n        yAxes[0].ticks.suggestedMin += 1;\n        yAxes[0].ticks.suggestedMax -= 1;\n      }\n\n      if (['N3'].includes(indicatorCode)) {\n        yAxes[0].type = 'myLogScale';\n        if (this.indicatorObject.aoiID === 'ES19') {\n          yAxes[0].min = 0.02;\n          yAxes[0].max = 1;\n        }\n        yAxes[0].ticks = {\n          callback: (...args) => {\n            const value = Chart.Ticks.formatters.logarithmic.call(this, ...args);\n            if (value.length) {\n              return Number(value).toLocaleString();\n            }\n            return value;\n          },\n        };\n        legend.labels.usePointStyle = true;\n        legend.labels.boxWidth = 5;\n        legend.onClick = function onClick(e, legendItem) {\n          if (legendItem.text === 'Standard deviation (STD)') {\n            const masterIndex = legendItem.datasetIndex;\n            const slaveIndex = 3;\n            const ci = this.chart;\n            const masterMeta = ci.getDatasetMeta(masterIndex);\n            const meta = ci.getDatasetMeta(slaveIndex);\n            if (masterMeta.hidden === null) {\n              masterMeta.hidden = true;\n              meta.hidden = true;\n            } else {\n              masterMeta.hidden = !masterMeta.hidden;\n              meta.hidden = !meta.hidden;\n            }\n            ci.update();\n          } else {\n            Chart.defaults.global.legend.onClick.call(this, e, legendItem);\n          }\n        };\n      }\n\n      const defaultSettings = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins,\n        legend,\n        scales: {\n          xAxes,\n          yAxes,\n        },\n        pan: {\n          enabled: true,\n          mode: 'x',\n        },\n        zoom: {\n          enabled: true,\n          mode: 'x',\n        },\n        tooltips: {\n          callbacks: {\n            label: function (context, data) { // eslint-disable-line\n              let label = data.datasets[context.datasetIndex].label || '';\n              if (label) {\n                label += ': ';\n              }\n              label += this.roundValueInd(Number(context.value));\n              return label;\n            }.bind(this),\n          },\n        },\n      };\n\n      if (['N3'].includes(indicatorCode)) {\n        defaultSettings.tooltips = {\n          callbacks: {\n            label: (context) => {\n              const { datasets } = this.datacollection;\n              const val = datasets[context.datasetIndex].data[context.index];\n              return `Value (Log10): ${Math.log10(val).toPrecision(4)}`;\n            },\n          },\n        };\n      }\n\n      if (['E10a3'].includes(indicatorCode)) {\n        defaultSettings.geo = {\n          radiusScale: {\n            display: true,\n            size: [1, 20],\n          },\n        };\n\n        defaultSettings.scale = {\n          projection: 'mercator',\n        };\n\n        defaultSettings.pan.mode = 'xy';\n        defaultSettings.zoom.mode = 'xy';\n        defaultSettings.legend.display = false;\n\n        defaultSettings.tooltips = {\n          callbacks: {\n            label: (context) => {\n              const { datasets } = this.datacollection;\n              const obj = datasets[context.datasetIndex].data[context.index];\n              return obj.name;\n            },\n            footer: (context) => {\n              const { datasets } = this.datacollection;\n              const obj = datasets[context[0].datasetIndex].data[context[0].index];\n              const refT = obj.referenceTime;\n              const refV = Number(obj.referenceValue);\n              const labelOutput = [\n                `${obj.time.toISODate()}:  ${obj.value.toPrecision(4)}`,\n                `${refT.toISODate()}:  ${refV.toPrecision(4)}`,\n              ];\n              if (refV !== 0) {\n                labelOutput.push(\n                  `${(((obj.value - refV) / refV) * 100).toPrecision(2)} %`,\n                );\n              }\n              return labelOutput;\n            },\n          },\n        };\n      }\n\n      if (['E10a8'].includes(indicatorCode)) {\n        defaultSettings.geo = {\n          radiusScale: {\n            display: true,\n            range: [5, 25],\n            ticks: {\n              max: 2000000,\n            },\n          },\n        };\n\n        defaultSettings.scale = {\n          projection: 'mercator',\n          max: 20,\n        };\n\n        defaultSettings.pan.mode = 'xy';\n        defaultSettings.zoom.mode = 'xy';\n        defaultSettings.legend.display = false;\n\n        defaultSettings.tooltips = {\n          callbacks: {\n            label: (context) => {\n              const { datasets } = this.datacollection;\n              const obj = datasets[context.datasetIndex].data[context.index];\n              return obj.name;\n            },\n            footer: (context) => {\n              const { datasets } = this.datacollection;\n              const obj = datasets[context[0].datasetIndex].data[context[0].index];\n              const refV = Number(obj.referenceValue);\n              const labelOutput = [\n                `${obj.time.toISODate()}:`,\n                `${(refV).toPrecision(4)} % harvested`,\n                `${(100 - refV).toPrecision(4)} % not harvested`,\n                `Max. area: ${obj.value} ha`,\n              ];\n              return labelOutput;\n            },\n          },\n        };\n      }\n\n      return {\n        ...defaultSettings,\n        annotation: {\n          annotations,\n        },\n      };\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.md-body {\n  font-size: small;\n}\n::v-deep .mdi-asterisk {\n  visibility: hidden;\n}\n</style>\n"],"sourceRoot":"src/components"}]}