{"remainingRequest":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js!/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorData.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorData.vue","mtime":1624532486000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/thread-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvOHBzL0Rvd25sb2Fkcy9lb2Rhc2gtc3RhZ2luZy9hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy84cHMvRG93bmxvYWRzL2VvZGFzaC1zdGFnaW5nL2FwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy84cHMvRG93bmxvYWRzL2VvZGFzaC1zdGFnaW5nL2FwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJzsKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKaW1wb3J0IEJhckNoYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9CYXJDaGFydC52dWUnOwppbXBvcnQgTGluZUNoYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlJzsKaW1wb3J0IE1hcENoYXJ0IGZyb20gJ0AvY29tcG9uZW50cy9NYXBDaGFydC52dWUnOwppbXBvcnQgTlVUUyBmcm9tICdAL2Fzc2V0cy9OVVRTX1JHXzAzTV8yMDE2XzQzMjZfRVNMMi1ERUwzLmpzb24nOwppbXBvcnQgbG9ja2Rvd25UaW1lcyBmcm9tICdAL2Fzc2V0cy9sb2NrZG93bl9kYXRhLmpzb24nOwppbXBvcnQgY291bnRyaWVzIGZyb20gJ0AvYXNzZXRzL2NvdW50cmllcy5qc29uJzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ2N1cnJlbnRJbmRpY2F0b3InXSwKICBjb21wb25lbnRzOiB7CiAgICBCYXJDaGFydDogQmFyQ2hhcnQsCiAgICBMaW5lQ2hhcnQ6IExpbmVDaGFydCwKICAgIE1hcENoYXJ0OiBNYXBDaGFydAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRhdGFMYXllclRpbWU6IG51bGwsCiAgICAgIGRhdGFMYXllckluZGV4OiAwCiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBkID0gdGhpcy5pbmRpY2F0b3JPYmplY3QudGltZVt0aGlzLmluZGljYXRvck9iamVjdC50aW1lLmxlbmd0aCAtIDFdOwogICAgdGhpcy5kYXRhTGF5ZXJUaW1lID0gZC50b0Zvcm1hdCgnZGQuIE1NTScpOwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoJ2NvbmZpZycsIFsnYXBwQ29uZmlnJywgJ2Jhc2VDb25maWcnXSkpLCB7fSwgewogICAgYXJyYXlPZk9iamVjdHM6IGZ1bmN0aW9uIGFycmF5T2ZPYmplY3RzKCkgewogICAgICB2YXIgaW5kaWNhdG9yID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5pbmRpY2F0b3JPYmplY3QpOwoKICAgICAgdmFyIGluZGljYXRvckNvZGUgPSBpbmRpY2F0b3IuaW5kaWNhdG9yOwogICAgICB2YXIgc2VsZWN0aW9uT3B0aW9ucyA9IFtdOwoKICAgICAgaWYgKFsnRTEwYTMnLCAnRTEwYTgnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIC8vIEZpbmQgYWxsIHVuaXF1ZSBkYXkvbW9udGggYXZhaWxhYmxlCiAgICAgICAgdmFyIHRpbWVzZXQgPSBuZXcgU2V0KGluZGljYXRvci50aW1lLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGQudG9Gb3JtYXQoJ2RkLiBNTU0nKTsKICAgICAgICB9KSk7CiAgICAgICAgdGltZXNldC5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICBzZWxlY3Rpb25PcHRpb25zLnB1c2goewogICAgICAgICAgICB2YWx1ZTogdCwKICAgICAgICAgICAgbmFtZTogdAogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZWxlY3Rpb25PcHRpb25zOwogICAgfSwKICAgIGRhdGFjb2xsZWN0aW9uOiBmdW5jdGlvbiBkYXRhY29sbGVjdGlvbigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpbmRpY2F0b3IgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmluZGljYXRvck9iamVjdCk7CgogICAgICB2YXIgaW5kaWNhdG9yQ29kZSA9IGluZGljYXRvci5pbmRpY2F0b3I7CiAgICAgIHZhciBkYXRhQ29sbGVjdGlvbjsKICAgICAgdmFyIHJlZkNvbG9ycyA9IFsnIzIyYWE5OScsICcjYTM3JywgJyM0N2EnLCAnI2E2NycsICcjMjgzJywgJyNiYmInLCAnIzZjZScsICcjOTk0NDk5JywgJyNhYWFhMTEnLCAnIzY2MzNjYycsICcjZTY3MzAwJ107CgogICAgICBpZiAoaW5kaWNhdG9yKSB7CiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBsYWJlbHMgPSBbXTsKICAgICAgICAgIHZhciBtZWFzdXJlbWVudCA9IGluZGljYXRvci5tZWFzdXJlbWVudDsKICAgICAgICAgIHZhciBjb2xvcnMgPSBbXTsKICAgICAgICAgIHZhciBkYXRhc2V0cyA9IFtdOwoKICAgICAgICAgIGlmIChbJ0UxMGExJywgJ0UxMGE1J10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgdmFyIHJlZmVyZW5jZVZhbHVlID0gaW5kaWNhdG9yLnJlZmVyZW5jZVZhbHVlLm1hcChOdW1iZXIpOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2F0b3IudGltZS5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGluZGljYXRvci50aW1lW2ldLnRvTWlsbGlzKCkpKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IGluZGljYXRvci50aW1lW2ldOwogICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZERhdGUgPSBkLnRvRm9ybWF0KCdkZC4gTU1NJyk7CiAgICAgICAgICAgICAgICBsYWJlbHMucHVzaChmb3JtYXR0ZWREYXRlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbGFiZWxzLnB1c2goaSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbGFiZWxyZWYgPSAnMjAxOSc7CiAgICAgICAgICAgIHZhciBsYWJlbG1lYXMgPSAnMjAyMCc7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGluZExhYmVsczogQXJyYXkoaW5kaWNhdG9yLmluZGljYXRvclZhbHVlLmxlbmd0aCkuam9pbignLicpLnNwbGl0KCcuJyksCiAgICAgICAgICAgICAgbGFiZWw6IGxhYmVscmVmLAogICAgICAgICAgICAgIGRhdGE6IHJlZmVyZW5jZVZhbHVlLAogICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2dyZXknCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICBpbmRMYWJlbHM6IGluZGljYXRvci5pbmRpY2F0b3JWYWx1ZSwKICAgICAgICAgICAgICBsYWJlbDogbGFiZWxtZWFzLAogICAgICAgICAgICAgIGRhdGE6IG1lYXN1cmVtZW50LAogICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoWydFMTBhOSddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgICAgIHZhciBjYXRlZ29yaWVzID0gWydOYXRpb25hbCBXb3JrZXJzJywgJ0ZvcmVpZ24gV29ya2VycycsICdVbmtub3duJ107CiAgICAgICAgICAgIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpZHgpIHsKICAgICAgICAgICAgICB2YXIgZGF0YSA9IGluZGljYXRvci5tZWFzdXJlbWVudC5tYXAoZnVuY3Rpb24gKHJvdywgcm93SWR4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB0OiBpbmRpY2F0b3IudGltZVtyb3dJZHhdLAogICAgICAgICAgICAgICAgICB5OiByb3dbaWR4XQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzW2lkeF0sCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1tpZHhdLAogICAgICAgICAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ21vbm90b25lJywKICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLAogICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDIKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKFsnR0cnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgICAgICB2YXIgdmFscyA9IGluZGljYXRvci5WYWx1ZXM7CiAgICAgICAgICAgIHZhciBkYXRhc2V0c09iaiA9IHsKICAgICAgICAgICAgICBncm9jZXJ5OiBbXSwKICAgICAgICAgICAgICBwYXJrczogW10sCiAgICAgICAgICAgICAgcmVzaWRlbnRpYWw6IFtdLAogICAgICAgICAgICAgIHJldGFpbF9yZWNyZWF0aW9uOiBbXSwKICAgICAgICAgICAgICB0cmFuc2l0X3N0YXRpb25zOiBbXQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgZm9yICh2YXIgZW50cnkgPSAwOyBlbnRyeSA8IHZhbHMubGVuZ3RoOyBlbnRyeSArPSAxKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBEYXRlVGltZS5mcm9tSVNPKHZhbHNbZW50cnldLmRhdGUpOwogICAgICAgICAgICAgIGRhdGFzZXRzT2JqLmdyb2NlcnkucHVzaCh7CiAgICAgICAgICAgICAgICB0OiB0LAogICAgICAgICAgICAgICAgeTogdmFsc1tlbnRyeV0uZ3JvY2VyeQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGRhdGFzZXRzT2JqLnBhcmtzLnB1c2goewogICAgICAgICAgICAgICAgdDogdCwKICAgICAgICAgICAgICAgIHk6IHZhbHNbZW50cnldLnBhcmtzCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZGF0YXNldHNPYmoucmVzaWRlbnRpYWwucHVzaCh7CiAgICAgICAgICAgICAgICB0OiB0LAogICAgICAgICAgICAgICAgeTogdmFsc1tlbnRyeV0ucmVzaWRlbnRpYWwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBkYXRhc2V0c09iai5yZXRhaWxfcmVjcmVhdGlvbi5wdXNoKHsKICAgICAgICAgICAgICAgIHQ6IHQsCiAgICAgICAgICAgICAgICB5OiB2YWxzW2VudHJ5XS5yZXRhaWxfcmVjcmVhdGlvbgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGRhdGFzZXRzT2JqLnRyYW5zaXRfc3RhdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICB0OiB0LAogICAgICAgICAgICAgICAgeTogdmFsc1tlbnRyeV0udHJhbnNpdF9zdGF0aW9ucwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhc2V0c09iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpZHgpIHsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhc2V0c09ialtrZXldLAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzW2lkeF0sCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1tpZHhdLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMiwKICAgICAgICAgICAgICAgIGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6ICdtb25vdG9uZScKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKFsnR1NBJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgdmFyIF92YWxzID0gT2JqZWN0LmtleXMoaW5kaWNhdG9yLnZhbHVlcyk7CgogICAgICAgICAgICB2YXIgX2RhdGFzZXRzT2JqID0ge307CgogICAgICAgICAgICBmb3IgKHZhciBfZW50cnkgPSAwOyBfZW50cnkgPCBfdmFscy5sZW5ndGg7IF9lbnRyeSArPSAxKSB7CiAgICAgICAgICAgICAgX2RhdGFzZXRzT2JqW192YWxzW19lbnRyeV1dID0gW107CiAgICAgICAgICAgICAgdmFyIGN1cnJWYWxzID0gaW5kaWNhdG9yLnZhbHVlc1tfdmFsc1tfZW50cnldXS52YWx1ZXM7CgogICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBjdXJyVmFscy5sZW5ndGg7IF9pICs9IDEpIHsKICAgICAgICAgICAgICAgIF9kYXRhc2V0c09ialtfdmFsc1tfZW50cnldXS5wdXNoKHsKICAgICAgICAgICAgICAgICAgdDogRGF0ZVRpbWUuZnJvbUlTTyhjdXJyVmFsc1tfaV0udGltZXN0YW1wKSwKICAgICAgICAgICAgICAgICAgeTogTnVtYmVyKGN1cnJWYWxzW19pXS53YWl0aW5nX3RpbWUpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IC8vIEl0IHNlZW1zIHNvbWUgdGltc3RhbXBzIGFyZSBtaXhlZCBpbiBvcmRlciBzbyBsZXQgdXMgc29ydCBieSBkYXRlCiAgICAgICAgICAgICAgLy8gdG8gZ2V0IG5pY2UgbGluZSBjb25uZWN0aW9ucyB0aHJvdWdoIHRoZSB0aW1lbGluZQoKCiAgICAgICAgICAgICAgX2RhdGFzZXRzT2JqW192YWxzW19lbnRyeV1dLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLnQudG9NaWxsaXMoKSAtIGIudC50b01pbGxpcygpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPYmplY3Qua2V5cyhpbmRpY2F0b3IudmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGlkeCkgewogICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgICAgbGFiZWw6IGtleSwKICAgICAgICAgICAgICAgIGRhdGE6IF9kYXRhc2V0c09ialtrZXldLAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzW2lkeF0sCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1tpZHhdLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMiwKICAgICAgICAgICAgICAgIGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6ICdtb25vdG9uZScKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgaWYgKFsnQ1YnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgICAgICB2YXIgX3ZhbHMyID0gaW5kaWNhdG9yLlZhbHVlczsKICAgICAgICAgICAgdmFyIF9kYXRhc2V0c09iajIgPSB7CiAgICAgICAgICAgICAgY29uZmlybWVkOiBbXQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgZm9yICh2YXIgX2VudHJ5MiA9IDA7IF9lbnRyeTIgPCBfdmFsczIubGVuZ3RoOyBfZW50cnkyICs9IDEpIHsKICAgICAgICAgICAgICB2YXIgX3QgPSBEYXRlVGltZS5mcm9tSVNPKF92YWxzMltfZW50cnkyXS5kYXRlKTsKCiAgICAgICAgICAgICAgX2RhdGFzZXRzT2JqMi5jb25maXJtZWQucHVzaCh7CiAgICAgICAgICAgICAgICB0OiBfdCwKICAgICAgICAgICAgICAgIHk6IE51bWJlcihfdmFsczJbX2VudHJ5Ml0uY29uZmlybWVkKQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPYmplY3Qua2V5cyhfZGF0YXNldHNPYmoyKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGlkeCkgewogICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgICAgbGFiZWw6IGtleSwKICAgICAgICAgICAgICAgIGRhdGE6IF9kYXRhc2V0c09iajJba2V5XSwKICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHJlZkNvbG9yc1tpZHhdLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbaWR4XSwKICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLAogICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDIsCiAgICAgICAgICAgICAgICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiAnbW9ub3RvbmUnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChbJ09XJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgdmFyIF92YWxzMyA9IGluZGljYXRvci5WYWx1ZXM7CiAgICAgICAgICAgIHZhciBwSSA9IFsndG90YWxfdmFjY2luYXRpb25zJywgJ3Blb3BsZV9mdWxseV92YWNjaW5hdGVkJywgJ2RhaWx5X3ZhY2NpbmF0aW9ucyddOwogICAgICAgICAgICB2YXIgX2RhdGFzZXRzT2JqMyA9IHt9OwoKICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgcEkubGVuZ3RoOyBpZHggKz0gMSkgewogICAgICAgICAgICAgIF9kYXRhc2V0c09iajNbcElbaWR4XV0gPSBbXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yICh2YXIgX2VudHJ5MyA9IDA7IF9lbnRyeTMgPCBfdmFsczMubGVuZ3RoOyBfZW50cnkzICs9IDEpIHsKICAgICAgICAgICAgICB2YXIgX3QyID0gRGF0ZVRpbWUuZnJvbUlTTyhfdmFsczNbX2VudHJ5M10uZGF0ZSk7CgogICAgICAgICAgICAgIGZvciAodmFyIF9pZHggPSAwOyBfaWR4IDwgcEkubGVuZ3RoOyBfaWR4ICs9IDEpIHsKICAgICAgICAgICAgICAgIF9kYXRhc2V0c09iajNbcElbX2lkeF1dLnB1c2goewogICAgICAgICAgICAgICAgICB0OiBfdDIsCiAgICAgICAgICAgICAgICAgIHk6IF92YWxzM1tfZW50cnkzXVtwSVtfaWR4XV0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgT2JqZWN0LmtleXMoX2RhdGFzZXRzT2JqMykuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpZHgpIHsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksCiAgICAgICAgICAgICAgICBkYXRhOiBfZGF0YXNldHNPYmozW2tleV0sCiAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiByZWZDb2xvcnNbaWR4XSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcmVmQ29sb3JzW2lkeF0sCiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSwKICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAyLAogICAgICAgICAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ21vbm90b25lJwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoWydOM2InXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgICAgICB2YXIgc2Vuc29ycyA9IEFycmF5LmZyb20obmV3IFNldChpbmRpY2F0b3IuZW9TZW5zb3IpKS5zb3J0KCk7CgogICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcCkgewogICAgICAgICAgICAgIHZhciBwS2V5ID0gc2Vuc29yc1twcF07CiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBpbmRpY2F0b3IudGltZS5tYXAoZnVuY3Rpb24gKGRhdGUsIGkpIHsKICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudWxsOwoKICAgICAgICAgICAgICAgIGlmIChpbmRpY2F0b3IuZW9TZW5zb3JbaV0gPT09IHBLZXkpIHsKICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gewogICAgICAgICAgICAgICAgICAgIHQ6IGRhdGUsCiAgICAgICAgICAgICAgICAgICAgeTogbWVhc3VyZW1lbnRbaV0KICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGQgIT09IG51bGw7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdmFyIGNvbG9yVXNlZCA9IHJlZkNvbG9yc1twcF07CgogICAgICAgICAgICAgIGlmIChfdGhpcy5pbmREZWZpbml0aW9uLnNlbnNvckNvbG9yTWFwICYmIF90aGlzLmluZERlZmluaXRpb24uc2Vuc29yQ29sb3JNYXBbcEtleV0pIHsKICAgICAgICAgICAgICAgIGNvbG9yVXNlZCA9IF90aGlzLmluZERlZmluaXRpb24uc2Vuc29yQ29sb3JNYXBbcEtleV07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBwS2V5LAogICAgICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yVXNlZCwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JVc2VkLAogICAgICAgICAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ21vbm90b25lJwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgZm9yICh2YXIgcHAgPSAwOyBwcCA8IHNlbnNvcnMubGVuZ3RoOyBwcCArPSAxKSB7CiAgICAgICAgICAgICAgX2xvb3AocHApOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKFsnTjRjJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgdmFyIG1lYXNEYXRhID0gaW5kaWNhdG9yLm1lYXN1cmVtZW50Lm1hcChOdW1iZXIpOwogICAgICAgICAgICBtZWFzRGF0YS5zaGlmdCgpOwogICAgICAgICAgICB2YXIgcmVmRGF0YSA9IGluZGljYXRvci5yZWZlcmVuY2VWYWx1ZS5tYXAoTnVtYmVyKTsKICAgICAgICAgICAgcmVmRGF0YS5zaGlmdCgpOwogICAgICAgICAgICBsYWJlbHMgPSBbaW5kaWNhdG9yLnJlZmVyZW5jZVRpbWVbMF0udG9JU09EYXRlKCksIGluZGljYXRvci50aW1lWzBdLnRvSVNPRGF0ZSgpLCBpbmRpY2F0b3IudGltZVs1XS50b0lTT0RhdGUoKV07CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAnbWV0YWxsaWMgd2FzdGUgYXJlYScsCiAgICAgICAgICAgICAgZGF0YTogW3JlZkRhdGFbMF0sIG1lYXNEYXRhWzBdLCBtZWFzRGF0YVs1XV0sCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbMF0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAnbWl4ZWQgd2FzdGUgYXJlYScsCiAgICAgICAgICAgICAgZGF0YTogW3JlZkRhdGFbMV0sIG1lYXNEYXRhWzFdLCBtZWFzRGF0YVs2XV0sCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbMV0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAncGxhc3RpYyB3YXN0ZSBhcmVhJywKICAgICAgICAgICAgICBkYXRhOiBbcmVmRGF0YVsyXSwgbWVhc0RhdGFbMl0sIG1lYXNEYXRhWzddXSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1syXQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgbGFiZWw6ICdzb2lsIHdhc3RlIGFyZWEnLAogICAgICAgICAgICAgIGRhdGE6IFtyZWZEYXRhWzNdLCBtZWFzRGF0YVszXSwgbWVhc0RhdGFbOF1dLAogICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcmVmQ29sb3JzWzNdCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChbJ0UxMGEyJywgJ0UxMGE2JywgJ0UxMGE3JywgJ0U4JywgJ0UxM2UnLCAnRTEzZicsICdFMTNnJywgJ0UxM2gnLCAnRTEzaScsICdFMTNsJywgJ0UxM20nXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgICAgICB2YXIgdW5pcXVlUmVmcyA9IFtdOwogICAgICAgICAgICB2YXIgdW5pcXVlTWVhcyA9IFtdOwoKICAgICAgICAgICAgdmFyIF9yZWZlcmVuY2VWYWx1ZSA9IGluZGljYXRvci5yZWZlcmVuY2VWYWx1ZS5tYXAoTnVtYmVyKTsKCiAgICAgICAgICAgIGluZGljYXRvci50aW1lLmZvckVhY2goZnVuY3Rpb24gKGRhdGUsIGkpIHsKICAgICAgICAgICAgICB2YXIgbWVhcyA9IHsKICAgICAgICAgICAgICAgIHQ6IGRhdGUuc2V0KHsKICAgICAgICAgICAgICAgICAgeWVhcjogMjAwMAogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICB5OiBtZWFzdXJlbWVudFtpXQogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIGlmICh0eXBlb2YgdW5pcXVlUmVmcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS50LmVxdWFscyhtZWFzLnQpOwogICAgICAgICAgICAgIH0pID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgdW5pcXVlTWVhcy5wdXNoKG1lYXMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGluZGljYXRvci5yZWZlcmVuY2VUaW1lLmZvckVhY2goZnVuY3Rpb24gKGRhdGUsIGkpIHsKICAgICAgICAgICAgICBpZiAoIVsnJywgJy8nXS5pbmNsdWRlcyhpbmRpY2F0b3IucmVmZXJlbmNlVmFsdWVbaV0pKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVmID0gewogICAgICAgICAgICAgICAgICB0OiBkYXRlLnNldCh7CiAgICAgICAgICAgICAgICAgICAgeWVhcjogMjAwMAogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgeTogX3JlZmVyZW5jZVZhbHVlW2ldCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdW5pcXVlUmVmcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnQuZXF1YWxzKHJlZi50KTsKICAgICAgICAgICAgICAgIH0pID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICB1bmlxdWVSZWZzLnB1c2gocmVmKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICBsYWJlbDogJzIwMjAnLAogICAgICAgICAgICAgIGRhdGE6IHVuaXF1ZU1lYXMsCiAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHJlZkNvbG9yc1sxXSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1sxXSwKICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICh1bmlxdWVSZWZzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiAnMjAxOScsCiAgICAgICAgICAgICAgICBkYXRhOiB1bmlxdWVSZWZzLAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzWzBdLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbMF0sCiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKFsnRTEzbicsICdDMScsICdDMicsICdDMyddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgICAgIC8vIEdyb3VwIGJ5IGluZGljYXRvciB2YWx1ZQogICAgICAgICAgICB2YXIgdHlwZXMgPSB7fTsKICAgICAgICAgICAgaW5kaWNhdG9yLmluZGljYXRvclZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGluZCwgaWR4KSB7CiAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHR5cGVzKS5pbmNsdWRlcyhpbmQpKSB7CiAgICAgICAgICAgICAgICB0eXBlc1tpbmRdLnB1c2goewogICAgICAgICAgICAgICAgICB0OiBEYXRlVGltZS5mcm9tSVNPKGluZGljYXRvci50aW1lW2lkeF0pLAogICAgICAgICAgICAgICAgICB5OiBOdW1iZXIoaW5kaWNhdG9yLm1lYXN1cmVtZW50W2lkeF0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdHlwZXNbaW5kXSA9IFt7CiAgICAgICAgICAgICAgICAgIHQ6IERhdGVUaW1lLmZyb21JU08oaW5kaWNhdG9yLnRpbWVbaWR4XSksCiAgICAgICAgICAgICAgICAgIHk6IE51bWJlcihpbmRpY2F0b3IubWVhc3VyZW1lbnRbaWR4XSkKICAgICAgICAgICAgICAgIH1dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIE9iamVjdC5rZXlzKHR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGkpIHsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksCiAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgIGRhdGE6IHR5cGVzW2tleV0sCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1tpXSwKICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiByZWZDb2xvcnNbaV0sCiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoWydOMicsICdFMTBjJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgLyogR3JvdXAgZGF0YSBieSB5ZWFyIGluIG1vbnRoIHNsaWNlcyAqLwogICAgICAgICAgICB2YXIgZGF0YSA9IGluZGljYXRvci50aW1lLm1hcChmdW5jdGlvbiAoZGF0ZSwgaSkgewogICAgICAgICAgICAgIGNvbG9ycy5wdXNoKF90aGlzLmdldEluZGljYXRvckNvbG9yKGluZGljYXRvci5jb2xvckNvZGVbaV0pKTsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgdDogZGF0ZSwKICAgICAgICAgICAgICAgIHk6IG1lYXN1cmVtZW50W2ldCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBkYXRhR3JvdXBzID0ge307CiAgICAgICAgICAgIHZhciBjb2xvckdyb3VwcyA9IHt9OwoKICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGF0YS5sZW5ndGg7IF9pMiArPSAxKSB7CiAgICAgICAgICAgICAgdmFyIGN1cnJZZWFyID0gZGF0YVtfaTJdLnQueWVhcjsKCiAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhR3JvdXBzLCBjdXJyWWVhcikpIHsKICAgICAgICAgICAgICAgIGRhdGFHcm91cHNbY3VyclllYXJdLnB1c2goewogICAgICAgICAgICAgICAgICB0OiBkYXRhW19pMl0udC5zZXQoewogICAgICAgICAgICAgICAgICAgIHllYXI6IDIwMDAKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIHk6IFtkYXRhW19pMl0ueV0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29sb3JHcm91cHNbY3VyclllYXJdLnB1c2goY29sb3JzW19pMl0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkYXRhR3JvdXBzW2N1cnJZZWFyXSA9IFt7CiAgICAgICAgICAgICAgICAgIHQ6IGRhdGFbX2kyXS50LnNldCh7CiAgICAgICAgICAgICAgICAgICAgeWVhcjogMjAwMAogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgeTogW2RhdGFbX2kyXS55XQogICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICBjb2xvckdyb3Vwc1tjdXJyWWVhcl0gPSBbY29sb3JzW19pMl1dOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHVuaXF1ZVllYXJzID0gT2JqZWN0LmtleXMoZGF0YUdyb3Vwcyk7CiAgICAgICAgICAgIHVuaXF1ZVllYXJzLnNvcnQoKTsKICAgICAgICAgICAgdmFyIHlMZW5ndGggPSB1bmlxdWVZZWFycy5sZW5ndGggLSAxOwogICAgICAgICAgICB1bmlxdWVZZWFycy5mb3JFYWNoKGZ1bmN0aW9uIChrZXksIGkpIHsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIC8vIGZpbGwgd2l0aCBlbXB0eSB2YWx1ZXMKICAgICAgICAgICAgICAgIGluZExhYmVsczogQXJyYXkoZGF0YUdyb3Vwc1trZXldLmxlbmd0aCkuam9pbignLicpLnNwbGl0KCcuJyksCiAgICAgICAgICAgICAgICBsYWJlbDoga2V5LAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhR3JvdXBzW2tleV0sCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJlZkNvbG9yc1t5TGVuZ3RoIC0gaV0sCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzW3lMZW5ndGggLSBpXSwKICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIGlmIChbJ04xJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgdmFyIHN0ZERldk1pbiA9IFtdOwogICAgICAgICAgICB2YXIgc3RkRGV2TWF4ID0gW107CiAgICAgICAgICAgIHZhciBtaW4gPSBbXTsKICAgICAgICAgICAgdmFyIG1heCA9IFtdOwogICAgICAgICAgICB2YXIgbWVkaWFuID0gW107CiAgICAgICAgICAgIHZhciBfZGF0YSA9IFtdOwogICAgICAgICAgICBpbmRpY2F0b3IucmVmZXJlbmNlVmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgICAgICAgICAgIHZhciB0ID0gaW5kaWNhdG9yLnRpbWVbaV07CgogICAgICAgICAgICAgIF9kYXRhLnB1c2goewogICAgICAgICAgICAgICAgeTogbWVhc3VyZW1lbnRbaV0sCiAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKGl0ZW0pICYmICFbJ05hTicsICcvJ10uaW5jbHVkZXMoaXRlbSkpIHsKICAgICAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKGl0ZW0pOyAvLyBbbWVkaWFuLHN0ZCxtYXgsbWluLHBlcmNlbnRhZ2UgdmFsaWQgcGl4ZWxzXQoKICAgICAgICAgICAgICAgIG1lZGlhbi5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogb2JqWzBdLAogICAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAob2JqWzFdICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIHN0ZERldk1pbi5wdXNoKHsKICAgICAgICAgICAgICAgICAgICB5OiBtZWFzdXJlbWVudFtpXSAtIG9ialsxXSwKICAgICAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBzdGREZXZNYXgucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgeTogbWVhc3VyZW1lbnRbaV0gKyBvYmpbMV0sCiAgICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBtYXgucHVzaCh7CiAgICAgICAgICAgICAgICAgIHk6IG9ialsyXSwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBtaW4ucHVzaCh7CiAgICAgICAgICAgICAgICAgIHk6IG9ialszXSwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG1lZGlhbi5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogTnVtYmVyLk5hTiwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzdGREZXZNaW4ucHVzaCh7CiAgICAgICAgICAgICAgICAgIHk6IE51bWJlci5OYU4sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgc3RkRGV2TWF4LnB1c2goewogICAgICAgICAgICAgICAgICB5OiBOdW1iZXIuTmFOLAogICAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG1heC5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogTnVtYmVyLk5hTiwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBtaW4ucHVzaCh7CiAgICAgICAgICAgICAgICAgIHk6IE51bWJlci5OYU4sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiBpbmRpY2F0b3IueUF4aXMsCiAgICAgICAgICAgICAgZGF0YTogX2RhdGEsCiAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbMF0sCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHJlZkNvbG9yc1swXSwKICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UsCiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIKICAgICAgICAgICAgfSk7IC8vIENoZWNrIGZvciBlbXB0eSBhcnJheSwgaWYgaXQgaXMgdGhlIGNhc2UgZG8gbm90IGluY2x1ZGUgZGF0YQoKICAgICAgICAgICAgaWYgKHR5cGVvZiBtZWRpYW4uZmluZChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgIHJldHVybiBhLnkgIT09IG51bGw7CiAgICAgICAgICAgIH0pICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgICAgbGFiZWw6ICdNZWRpYW4nLAogICAgICAgICAgICAgICAgZGF0YTogbWVkaWFuLAogICAgICAgICAgICAgICAgZmlsbDogZmFsc2UsCiAgICAgICAgICAgICAgICBwb2ludFJhZGl1czogMCwKICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnYmxhY2snLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiAnbGluZScsCiAgICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSAvLyBDaGVjayBmb3IgZW1wdHkgYXJyYXksIGlmIGl0IGlzIHRoZSBjYXNlIGRvIG5vdCBpbmNsdWRlIGRhdGEKCgogICAgICAgICAgICBpZiAodHlwZW9mIG1pbi5maW5kKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEueSAhPT0gbnVsbDsKICAgICAgICAgICAgfSkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgICBsYWJlbDogJ01pbicsCiAgICAgICAgICAgICAgICBkYXRhOiBtaW4sCiAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbNF0sCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzWzRdLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiAnbGluZScsCiAgICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSAvLyBDaGVjayBmb3IgZW1wdHkgYXJyYXksIGlmIGl0IGlzIHRoZSBjYXNlIGRvIG5vdCBpbmNsdWRlIGRhdGEKCgogICAgICAgICAgICBpZiAodHlwZW9mIG1heC5maW5kKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEueSAhPT0gbnVsbDsKICAgICAgICAgICAgfSkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgICBsYWJlbDogJ01heCcsCiAgICAgICAgICAgICAgICBkYXRhOiBtYXgsCiAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZDb2xvcnNbMV0sCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmVmQ29sb3JzWzFdLAogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiAnbGluZScsCiAgICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSAvLyBDaGVjayBmb3IgZW1wdHkgYXJyYXksIGlmIGl0IGlzIHRoZSBjYXNlIGRvIG5vdCBpbmNsdWRlIGRhdGEKCgogICAgICAgICAgICBpZiAodHlwZW9mIHN0ZERldk1heC5maW5kKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGEueSAhPT0gbnVsbDsKICAgICAgICAgICAgfSkgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgICBsYWJlbDogJ1N0YW5kYXJkIGRldmlhdGlvbiAoU1REKScsCiAgICAgICAgICAgICAgICBkYXRhOiBzdGREZXZNYXgsCiAgICAgICAgICAgICAgICBmaWxsOiAnKzEnLAogICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDAsCiAgICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMCknLAogICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogJ3JlY3QnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gLy8gQ2hlY2sgZm9yIGVtcHR5IGFycmF5LCBpZiBpdCBpcyB0aGUgY2FzZSBkbyBub3QgaW5jbHVkZSBkYXRhCgoKICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGREZXZNaW4uZmluZChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgIHJldHVybiBhLnkgIT09IG51bGw7CiAgICAgICAgICAgIH0pICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgICAgbGFiZWw6ICdoaWRlXycsCiAgICAgICAgICAgICAgICBkYXRhOiBzdGREZXZNaW4sCiAgICAgICAgICAgICAgICBmaWxsOiAnLTEnLAogICAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDAsCiAgICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMCknLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMCknLAogICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogJ3JlY3QnCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoWydOMyddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgICAgIHZhciBfcmVmZXJlbmNlVmFsdWUyID0gW107CiAgICAgICAgICAgIHZhciBzdGREZXYgPSBbXTsKICAgICAgICAgICAgaW5kaWNhdG9yLnJlZmVyZW5jZVZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTihpdGVtKSAmJiAhWydOYU4nLCAnW05hTiBOYU5dJywgJy8nXS5pbmNsdWRlcyhpdGVtKSkgewogICAgICAgICAgICAgICAgdmFyIG9iaiA9IEpTT04ucGFyc2UoaXRlbS5yZXBsYWNlKC8sL2csICcuJykucmVwbGFjZSgnICcsICcsJykpOwoKICAgICAgICAgICAgICAgIGlmIChvYmpbMF0gIT09IC05OTkgJiYgb2JqWzFdICE9PSAtOTk5KSB7CiAgICAgICAgICAgICAgICAgIF9yZWZlcmVuY2VWYWx1ZTIucHVzaChvYmpbMF0pOwoKICAgICAgICAgICAgICAgICAgc3RkRGV2LnB1c2gob2JqWzFdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIF9yZWZlcmVuY2VWYWx1ZTIucHVzaChOdW1iZXIuTmFOKTsKCiAgICAgICAgICAgICAgICAgIHN0ZERldi5wdXNoKE51bWJlci5OYU4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfcmVmZXJlbmNlVmFsdWUyLnB1c2goTnVtYmVyLk5hTik7CgogICAgICAgICAgICAgICAgc3RkRGV2LnB1c2goTnVtYmVyLk5hTik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBfc3RkRGV2TWF4ID0gc3RkRGV2Lm1hcChmdW5jdGlvbiAoZGV2LCBpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihfcmVmZXJlbmNlVmFsdWUyW2ldKSA/IE51bWJlci5OYU4gOiBNYXRoLnBvdygxMCwgX3JlZmVyZW5jZVZhbHVlMltpXSArIGRldik7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgdmFyIF9zdGREZXZNaW4gPSBzdGREZXYubWFwKGZ1bmN0aW9uIChkZXYsIGkpIHsKICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKF9yZWZlcmVuY2VWYWx1ZTJbaV0pID8gTnVtYmVyLk5hTiA6IE1hdGgucG93KDEwLCBfcmVmZXJlbmNlVmFsdWUyW2ldIC0gZGV2KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfcmVmZXJlbmNlVmFsdWUyID0gX3JlZmVyZW5jZVZhbHVlMi5tYXAoZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNOYU4odmFsKSA/IE51bWJlci5OYU4gOiBNYXRoLnBvdygxMCwgdmFsKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBpbmRpY2F0b3IudGltZS5sZW5ndGg7IF9pMyArPSAxKSB7CiAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oaW5kaWNhdG9yLnRpbWVbX2kzXS50b01pbGxpcygpKSkgewogICAgICAgICAgICAgICAgbGFiZWxzLnB1c2goaW5kaWNhdG9yLnRpbWVbX2kzXS50b0lTT0RhdGUoKSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxhYmVscy5wdXNoKF9pMyk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgY29sb3JDb2RlID0gJyc7CgogICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5kaWNhdG9yLCAnY29sb3JDb2RlJykpIHsKICAgICAgICAgICAgICAgIGNvbG9yQ29kZSA9IGluZGljYXRvci5jb2xvckNvZGVbX2kzXTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNvbG9ycy5wdXNoKF90aGlzLmdldEluZGljYXRvckNvbG9yKGNvbG9yQ29kZSkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICBsYWJlbDogJ1dlZWtseSBjbGltYXRvbG9neSBvZiBjaGxvcm9waHlsbCBjb25jLiAoQ0hMX2NsaW0pIDIwMTctMjAxOScsCiAgICAgICAgICAgICAgZGF0YTogX3JlZmVyZW5jZVZhbHVlMiwKICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICBwb2ludFJhZGl1czogMCwKICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ2JsYWNrJywKICAgICAgICAgICAgICBwb2ludFN0eWxlOiAnbGluZScsCiAgICAgICAgICAgICAgc3BhbkdhcHM6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICBsYWJlbDogJ1N0YW5kYXJkIGRldmlhdGlvbiAoU1REKScsCiAgICAgICAgICAgICAgZGF0YTogX3N0ZERldk1heCwKICAgICAgICAgICAgICBmaWxsOiAnKzEnLAogICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgIHNwYW5HYXBzOiBmYWxzZSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMSknLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwLjApJywKICAgICAgICAgICAgICBwb2ludFN0eWxlOiAncmVjdCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAnaGlkZV8nLAogICAgICAgICAgICAgIGRhdGE6IF9zdGREZXZNaW4sCiAgICAgICAgICAgICAgZmlsbDogJy0xJywKICAgICAgICAgICAgICBwb2ludFJhZGl1czogMCwKICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UsCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjApJywKICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMC4wKScsCiAgICAgICAgICAgICAgcG9pbnRTdHlsZTogJ3JlY3QnCiAgICAgICAgICAgIH0pOyAvLyBGaW5kIHVuaXF1ZSBpbmRpY2F0b3IgdmFsdWVzCgogICAgICAgICAgICB2YXIgaW5kaWNhdG9yVmFsdWVzID0ge307CiAgICAgICAgICAgIGluZGljYXRvci5pbmRpY2F0b3JWYWx1ZS5tYXAoZnVuY3Rpb24gKHZhbCwgaSkgewogICAgICAgICAgICAgIHZhciBrZXkgPSB2YWwudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7CgogICAgICAgICAgICAgIGlmICghWycnLCAnLyddLmluY2x1ZGVzKGtleSkgJiYgdHlwZW9mIGluZGljYXRvclZhbHVlc1trZXldID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgaW5kaWNhdG9yVmFsdWVzW2tleV0gPSBfdGhpcy5nZXRJbmRpY2F0b3JDb2xvcihpbmRpY2F0b3IuY29sb3JDb2RlW2ldKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoaW5kaWNhdG9yVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksCiAgICAgICAgICAgICAgICAgIGtleSA9IF9yZWYyWzBdLAogICAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYyWzFdOwoKICAgICAgICAgICAgICB2YXIgY3Vyck1lYXMgPSBtZWFzdXJlbWVudC5tYXAoZnVuY3Rpb24gKHJvdywgaSkgewogICAgICAgICAgICAgICAgdmFyIHZhbCA9IHJvdzsKCiAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9yLmluZGljYXRvclZhbHVlW2ldICE9PSBrZXkudG9VcHBlckNhc2UoKSkgewogICAgICAgICAgICAgICAgICB2YWwgPSBOYU47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBkYXRhc2V0cy5wdXNoKHsKICAgICAgICAgICAgICAgIGxhYmVsOiBrZXksCiAgICAgICAgICAgICAgICBkYXRhOiBjdXJyTWVhcy5tYXAoZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKHZhbCkgPyBOdW1iZXIuTmFOIDogTWF0aC5wb3coMTAsIHZhbCk7CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFsdWUsCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogdmFsdWUsCiAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICAgIHNob3dMaW5lOiBmYWxzZSwKICAgICAgICAgICAgICAgIHNwYW5HYXBzOiBmYWxzZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoWydOMWEnLCAnTjFiJywgJ04xYycsICdOMWQnLCAnRTEyYiddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgICAgIHZhciBtYXhSZWYgPSBbXTsKICAgICAgICAgICAgdmFyIG1pblJlZiA9IFtdOwogICAgICAgICAgICB2YXIgbWVhbjdkUmVmID0gW107CiAgICAgICAgICAgIHZhciBtZWFuN2QyMDIwID0gW107CiAgICAgICAgICAgIGluZGljYXRvci5yZWZlcmVuY2VWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICAgICAgICAgICAgdmFyIHQgPSBpbmRpY2F0b3IudGltZVtpXTsKCiAgICAgICAgICAgICAgaWYgKCFbJycsICcvJ10uaW5jbHVkZXMoaXRlbSkpIHsKICAgICAgICAgICAgICAgIHZhciBvYmogPSBpdGVtLnJlcGxhY2UoL1tbXF0gXS9nLCAnJykuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHN0cikgewogICAgICAgICAgICAgICAgICByZXR1cm4gc3RyID09PSAnJyA/IE51bWJlci5OYU4gOiBOdW1iZXIoc3RyKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWF4UmVmLnB1c2goewogICAgICAgICAgICAgICAgICB5OiBvYmpbMF0sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWluUmVmLnB1c2goewogICAgICAgICAgICAgICAgICB5OiBvYmpbMV0sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWVhbjdkUmVmLnB1c2goewogICAgICAgICAgICAgICAgICB5OiBvYmpbMl0sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWVhbjdkMjAyMC5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogb2JqWzNdLAogICAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWF4UmVmLnB1c2goewogICAgICAgICAgICAgICAgICB5OiBOdW1iZXIuTmFOLAogICAgICAgICAgICAgICAgICB0OiB0CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG1pblJlZi5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogTnVtYmVyLk5hTiwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBtZWFuN2RSZWYucHVzaCh7CiAgICAgICAgICAgICAgICAgIHk6IE51bWJlci5OYU4sCiAgICAgICAgICAgICAgICAgIHQ6IHQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgbWVhbjdkMjAyMC5wdXNoKHsKICAgICAgICAgICAgICAgICAgeTogTnVtYmVyLk5hTiwKICAgICAgICAgICAgICAgICAgdDogdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgbGFiZWw6ICdWYWx1ZScsCiAgICAgICAgICAgICAgZGF0YTogbWVhc3VyZW1lbnQubWFwKGZ1bmN0aW9uIChtZWFzLCBpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB5OiBtZWFzLAogICAgICAgICAgICAgICAgICB0OiBpbmRpY2F0b3IudGltZVtpXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMCknLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmVkJywKICAgICAgICAgICAgICBzcGFuR2FwczogZmFsc2UsCiAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDAsCiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEuNQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgbGFiZWw6ICc3LWRheSBtZWFuJywKICAgICAgICAgICAgICBkYXRhOiBtZWFuN2QyMDIwLAogICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC4wKScsCiAgICAgICAgICAgICAgcG9pbnRSYWRpdXM6IDAsCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZWQnLAogICAgICAgICAgICAgIHNwYW5HYXBzOiBmYWxzZSwKICAgICAgICAgICAgICBib3JkZXJEYXNoOiBbNiwgM10sCiAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAnMjAxNy0yMDE5IDdkIG1lYW4nLAogICAgICAgICAgICAgIGRhdGE6IG1lYW43ZFJlZiwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMCknLAogICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnZ3JleScsCiAgICAgICAgICAgICAgc3BhbkdhcHM6IGZhbHNlLAogICAgICAgICAgICAgIGJvcmRlckRhc2g6IFs2LCAzXSwKICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgbGFiZWw6ICcyMDE3LTIwMTkgcmFuZ2UnLAogICAgICAgICAgICAgIGRhdGE6IG1heFJlZiwKICAgICAgICAgICAgICBmaWxsOiA0LAogICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgIHNwYW5HYXBzOiBmYWxzZSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMiknLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwLjApJywKICAgICAgICAgICAgICBwb2ludFN0eWxlOiAncmVjdCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGxhYmVsOiAnaGlkZV8nLAogICAgICAgICAgICAgIGRhdGE6IG1pblJlZiwKICAgICAgICAgICAgICBmaWxsOiAzLAogICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAwLAogICAgICAgICAgICAgIHNwYW5HYXBzOiBmYWxzZSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMCknLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwLjApJywKICAgICAgICAgICAgICBwb2ludFN0eWxlOiAncmVjdCcKICAgICAgICAgICAgfSk7IC8vIEZpbmQgdW5pcXVlIGluZGljYXRvciB2YWx1ZXMKCiAgICAgICAgICAgIHZhciBfaW5kaWNhdG9yVmFsdWVzID0ge307CiAgICAgICAgICAgIGluZGljYXRvci5pbmRpY2F0b3JWYWx1ZS5tYXAoZnVuY3Rpb24gKHZhbCwgaSkgewogICAgICAgICAgICAgIHZhciBrZXkgPSB2YWwudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7CgogICAgICAgICAgICAgIGlmICghWycnLCAnLyddLmluY2x1ZGVzKGtleSkgJiYgdHlwZW9mIF9pbmRpY2F0b3JWYWx1ZXNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIF9pbmRpY2F0b3JWYWx1ZXNba2V5XSA9IF90aGlzLmdldEluZGljYXRvckNvbG9yKGluZGljYXRvci5jb2xvckNvZGVbaV0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBPYmplY3QuZW50cmllcyhfaW5kaWNhdG9yVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSwKICAgICAgICAgICAgICAgICAga2V5ID0gX3JlZjRbMF0sCiAgICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjRbMV07CgogICAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgICAgbGFiZWw6IGtleSwKICAgICAgICAgICAgICAgIGRhdGE6IFtdLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YWx1ZSwKICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiB2YWx1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoWydFMTBhMycsICdFMTBhOCddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgICAgIHZhciBudXRzRmVhdHVyZXMgPSBOVVRTLmZlYXR1cmVzOwogICAgICAgICAgICB2YXIgb3V0bGluZSA9IFtdOwogICAgICAgICAgICB2YXIgY3VycklEcyA9IFtdOwogICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSBtZWFzdXJlbWVudC5tYXAoZnVuY3Rpb24gKG1lYXMsIGkpIHsKICAgICAgICAgICAgICAvLyBGaW5kIGNvcnJlY3QgTlVUUyBJRCBTaGFwZQogICAgICAgICAgICAgIHZhciBnZW9tID0gbnV0c0ZlYXR1cmVzLmZpbmQoZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmLnByb3BlcnRpZXMuTlVUU19JRCA9PT0gaW5kaWNhdG9yLnNpdGVOYW1lW2ldOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHZhciBvdXRwdXQ7CgogICAgICAgICAgICAgIGlmIChnZW9tKSB7CiAgICAgICAgICAgICAgICBpZiAoY3VycklEcy5pbmRleE9mKGluZGljYXRvci5zaXRlTmFtZVtpXSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgIGN1cnJJRHMucHVzaChpbmRpY2F0b3Iuc2l0ZU5hbWVbaV0pOwogICAgICAgICAgICAgICAgICBvdXRsaW5lLnB1c2goewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJywKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSwKICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogZ2VvbS5nZW9tZXRyeQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSBnZW9tLmdlb21ldHJ5LmNvb3JkaW5hdGVzOwogICAgICAgICAgICAgICAgdmFyIGxvbnMgPSBnZW9tLmdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJyA/IGNvb3JkaW5hdGVzLmZsYXQoMSkubWFwKGZ1bmN0aW9uICh0dXBsZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdHVwbGVbMF07CiAgICAgICAgICAgICAgICB9KSA6IGNvb3JkaW5hdGVzLmZsYXQoMikubWFwKGZ1bmN0aW9uICh0dXBsZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdHVwbGVbMF07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciBsYXRzID0gZ2VvbS5nZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicgPyBjb29yZGluYXRlcy5mbGF0KDEpLm1hcChmdW5jdGlvbiAodHVwbGUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHR1cGxlWzFdOwogICAgICAgICAgICAgICAgfSkgOiBjb29yZGluYXRlcy5mbGF0KDIpLm1hcChmdW5jdGlvbiAodHVwbGUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHR1cGxlWzFdOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgbWluTGF0ID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KGxhdHMpKTsKICAgICAgICAgICAgICAgIHZhciBtaW5Mb24gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkobG9ucykpOwogICAgICAgICAgICAgICAgdmFyIGNlbnRlclBvaW50ID0gewogICAgICAgICAgICAgICAgICBsYXQ6IG1pbkxhdCArIChNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkobGF0cykpIC0gbWluTGF0KSAvIDIsCiAgICAgICAgICAgICAgICAgIGxvbjogbWluTG9uICsgKE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShsb25zKSkgLSBtaW5Mb24pIC8gMgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG91dHB1dCA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLAogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSwKICAgICAgICAgICAgICAgICAgZ2VvbWV0cnk6IGdlb20uZ2VvbWV0cnksCiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnZGVzY3JpcHRpb24nLAogICAgICAgICAgICAgICAgICBsYXRpdHVkZTogY2VudGVyUG9pbnQubGF0LAogICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGNlbnRlclBvaW50LmxvbiwKICAgICAgICAgICAgICAgICAgbmFtZTogZ2VvbS5wcm9wZXJ0aWVzLk5VVFNfTkFNRSwKICAgICAgICAgICAgICAgICAgdGltZTogaW5kaWNhdG9yLnRpbWVbaV0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIobWVhcyksCiAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZVRpbWU6IGluZGljYXRvci5yZWZlcmVuY2VUaW1lW2ldLAogICAgICAgICAgICAgICAgICByZWZlcmVuY2VWYWx1ZTogaW5kaWNhdG9yLnJlZmVyZW5jZVZhbHVlW2ldLAogICAgICAgICAgICAgICAgICBjb2xvcjogaW5kaWNhdG9yLmNvbG9yQ29kZVtpXQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBpZiAoaW5kaWNhdG9yQ29kZSA9PT0gJ0UxMGE4JykgewogICAgICAgICAgICAgICAgICAvLyBTd2FwIHZhbHVlIHRvIGhhdmUgcmVmZXJlbmNlIHZhbHVlCiAgICAgICAgICAgICAgICAgIG91dHB1dC52YWx1ZSA9IE51bWJlcihpbmRpY2F0b3IucmVmZXJlbmNlVmFsdWVbaV0pOwogICAgICAgICAgICAgICAgICBvdXRwdXQucmVmZXJlbmNlVmFsdWUgPSBOdW1iZXIobWVhcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0OwogICAgICAgICAgICB9KTsgLy8gRmlsdGVyIGJ5IHVuZGVmaW5lZCBhbmQgdGltZQoKICAgICAgICAgICAgZmVhdHVyZXMgPSBmZWF0dXJlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGQgIT09ICd1bmRlZmluZWQnOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGZpbHRlcmVkRmVhdHVyZXMgPSBmZWF0dXJlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICB2YXIgaW5jbHVkZSA9IGZhbHNlOwoKICAgICAgICAgICAgICBpZiAoZC50aW1lIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHsKICAgICAgICAgICAgICAgIGluY2x1ZGUgPSBkLnRpbWUudG9Gb3JtYXQoJ2RkLiBNTU0nKSA9PT0gX3RoaXMuZGF0YUxheWVyVGltZSAmJiAhTnVtYmVyLmlzTmFOKGQudmFsdWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBsYWJlbHMgPSBmZWF0dXJlcy5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICByZXR1cm4gZC5uYW1lOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZGF0YXNldHMucHVzaCh7CiAgICAgICAgICAgICAgb3V0bGluZTogb3V0bGluZSwKICAgICAgICAgICAgICBvdXRsaW5lQmFja2dyb3VuZENvbG9yOiBudWxsLAogICAgICAgICAgICAgIG91dGxpbmVCb3JkZXJDb2xvcjogJ2JsYWNrJywKICAgICAgICAgICAgICBvdXRsaW5lQm9yZGVyV2lkdGg6IDEsCiAgICAgICAgICAgICAgc2hvd091dGxpbmU6IHRydWUsCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmaWx0ZXJlZEZlYXR1cmVzLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGQuY29sb3I7CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGZpbHRlcmVkRmVhdHVyZXMubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZC5jb2xvcjsKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMywKICAgICAgICAgICAgICBkYXRhOiBmaWx0ZXJlZEZlYXR1cmVzLAogICAgICAgICAgICAgIGNsaXBNYXA6ICdpdGVtcycKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgX2RhdGEyID0gaW5kaWNhdG9yLnRpbWUubWFwKGZ1bmN0aW9uIChkYXRlLCBpKSB7CiAgICAgICAgICAgICAgY29sb3JzLnB1c2goX3RoaXMuZ2V0SW5kaWNhdG9yQ29sb3IoaW5kaWNhdG9yLmNvbG9yQ29kZVtpXSkpOwogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB0OiBkYXRlLAogICAgICAgICAgICAgICAgeTogbWVhc3VyZW1lbnRbaV0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGRhdGFzZXRzLnB1c2goewogICAgICAgICAgICAgIGRhdGE6IF9kYXRhMiwKICAgICAgICAgICAgICBsYWJlbDogaW5kaWNhdG9yLnlBeGlzLAogICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JzLAogICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBjb2xvcnMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgZGF0YUNvbGxlY3Rpb24gPSB7CiAgICAgICAgICAgIGxhYmVsczogbGFiZWxzLAogICAgICAgICAgICBkYXRhc2V0czogZGF0YXNldHMKICAgICAgICAgIH07CiAgICAgICAgfSkoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRhdGFDb2xsZWN0aW9uOwogICAgfSwKICAgIGluZGljYXRvck9iamVjdDogZnVuY3Rpb24gaW5kaWNhdG9yT2JqZWN0KCkgewogICAgICByZXR1cm4gdGhpcy5jdXJyZW50SW5kaWNhdG9yIHx8IHRoaXMuJHN0b3JlLnN0YXRlLmluZGljYXRvcnMuY3VzdG9tQXJlYUluZGljYXRvciB8fCB0aGlzLiRzdG9yZS5zdGF0ZS5pbmRpY2F0b3JzLnNlbGVjdGVkSW5kaWNhdG9yOwogICAgfSwKICAgIGluZERlZmluaXRpb246IGZ1bmN0aW9uIGluZERlZmluaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmJhc2VDb25maWcuaW5kaWNhdG9yc0RlZmluaXRpb25bdGhpcy5pbmRpY2F0b3JPYmplY3QuaW5kaWNhdG9yXTsKICAgIH0KICB9KSwKICBtZXRob2RzOiB7CiAgICBkYXRhTGF5ZXJUaW1lU2VsZWN0aW9uOiBmdW5jdGlvbiBkYXRhTGF5ZXJUaW1lU2VsZWN0aW9uKHBheWxvYWQpIHsKICAgICAgdGhpcy5kYXRhTGF5ZXJUaW1lID0gcGF5bG9hZDsKICAgICAgdmFyIG5ld0luZGV4ID0gdGhpcy5hcnJheU9mT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS52YWx1ZTsKICAgICAgfSkuaW5kZXhPZih0aGlzLmRhdGFMYXllclRpbWUpOwogICAgICB0aGlzLmRhdGFMYXllckluZGV4ID0gbmV3SW5kZXg7CiAgICB9LAogICAgZGF0YUxheWVyUmVkdWNlOiBmdW5jdGlvbiBkYXRhTGF5ZXJSZWR1Y2UoKSB7CiAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmFycmF5T2ZPYmplY3RzLm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLnZhbHVlOwogICAgICB9KS5pbmRleE9mKHRoaXMuZGF0YUxheWVyVGltZSk7CiAgICAgIHRoaXMuZGF0YUxheWVySW5kZXggPSBjdXJyZW50SW5kZXggLSAxOwogICAgICB0aGlzLmRhdGFMYXllclRpbWVTZWxlY3Rpb24odGhpcy5hcnJheU9mT2JqZWN0c1tjdXJyZW50SW5kZXggLSAxXS52YWx1ZSk7CiAgICB9LAogICAgZGF0YUxheWVySW5jcmVhc2U6IGZ1bmN0aW9uIGRhdGFMYXllckluY3JlYXNlKCkgewogICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5hcnJheU9mT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS52YWx1ZTsKICAgICAgfSkuaW5kZXhPZih0aGlzLmRhdGFMYXllclRpbWUpOwogICAgICB0aGlzLmRhdGFMYXllckluZGV4ID0gY3VycmVudEluZGV4ICsgMTsKICAgICAgdGhpcy5kYXRhTGF5ZXJUaW1lU2VsZWN0aW9uKHRoaXMuYXJyYXlPZk9iamVjdHNbY3VycmVudEluZGV4ICsgMV0udmFsdWUpOwogICAgfSwKICAgIGZvcm1hdE51bVJlZjogZnVuY3Rpb24gZm9ybWF0TnVtUmVmKG51bSkgewogICAgICB2YXIgbWF4RGVjaW1hbHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDM7CiAgICAgIHJldHVybiBOdW1iZXIucGFyc2VGbG9hdChudW0udG9GaXhlZChtYXhEZWNpbWFscykpOwogICAgfSwKICAgIHJvdW5kVmFsdWVJbmQ6IGZ1bmN0aW9uIHJvdW5kVmFsdWVJbmQodmFsKSB7CiAgICAgIGlmICh0aGlzLmluZERlZmluaXRpb24ubWF4RGVjaW1hbHMgPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgfQoKICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodGhpcy5pbmREZWZpbml0aW9uLm1heERlY2ltYWxzKSkgewogICAgICAgIHJldHVybiB0aGlzLmZvcm1hdE51bVJlZih2YWwsIHRoaXMuaW5kRGVmaW5pdGlvbi5tYXhEZWNpbWFscyk7CiAgICAgIH0gLy8gdXNlIGRlZmF1bHQKCgogICAgICByZXR1cm4gdGhpcy5mb3JtYXROdW1SZWYodmFsLCAyKTsKICAgIH0sCiAgICBnZXRNaW5NYXhEYXRlOiBmdW5jdGlvbiBnZXRNaW5NYXhEYXRlKHRpbWVEYXRhKSB7CiAgICAgIHZhciB0aW1lTWluID0gTWF0aC5taW4uYXBwbHkobnVsbCwgdGltZURhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQudG9NaWxsaXMoKTsKICAgICAgfSkpOwogICAgICB2YXIgdGltZU1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHRpbWVEYXRhLm1hcChmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLnRvTWlsbGlzKCk7CiAgICAgIH0pKTsKICAgICAgdmFyIGJ1ZmZlciA9ICh0aW1lTWF4IC0gdGltZU1pbikgLyB0aW1lRGF0YS5sZW5ndGg7CiAgICAgIHRpbWVNaW4gLT0gYnVmZmVyOwogICAgICB0aW1lTWF4ICs9IGJ1ZmZlcjsKICAgICAgcmV0dXJuIFt0aW1lTWluLCB0aW1lTWF4XTsKICAgIH0sCiAgICBjaGFydE9wdGlvbnM6IGZ1bmN0aW9uIGNoYXJ0T3B0aW9ucygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgaW5kaWNhdG9yQ29kZSA9IHRoaXMuaW5kaWNhdG9yT2JqZWN0LmluZGljYXRvcjsKICAgICAgdmFyIHJlZmVyZW5jZSA9IE51bWJlci5wYXJzZUZsb2F0KHRoaXMuaW5kaWNhdG9yT2JqZWN0LnJlZmVyZW5jZVZhbHVlKTsKICAgICAgdmFyIHRpbWVNaW5NYXggPSB0aGlzLmdldE1pbk1heERhdGUodGhpcy5pbmRpY2F0b3JPYmplY3QudGltZSk7CiAgICAgIHZhciBhbm5vdGF0aW9ucyA9IFtdOwogICAgICB2YXIgbG93ID0gMDsKICAgICAgdmFyIGhpZ2ggPSAwOwogICAgICB2YXIgZGVmYXVsdEFubm90YXRpb25TZXR0aW5ncyA9IHsKICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgbW9kZTogJ2hvcml6b250YWwnLAogICAgICAgIHNjYWxlSUQ6ICd5LWF4aXMtMCcsCiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsIDAsIDI1NSwgMC41KScsCiAgICAgICAgYm9yZGVyV2lkdGg6IDIsCiAgICAgICAgYm9yZGVyRGFzaDogWzIsIDNdLAogICAgICAgIHNjYWxlczogewogICAgICAgICAgeEF4ZXM6IFt7CiAgICAgICAgICAgIHR5cGU6ICd0aW1lJywKICAgICAgICAgICAgdGltZTogewogICAgICAgICAgICAgIHVuaXQ6ICdtb250aCcKICAgICAgICAgICAgfQogICAgICAgICAgfV0KICAgICAgICB9LAogICAgICAgIGxhYmVsOiB7CiAgICAgICAgICBlbmFibGVkOiB0cnVlLAogICAgICAgICAgZm9udFN0eWxlOiAnbm9ybWFsJywKICAgICAgICAgIHBhZGRpbmdYOiAyLAogICAgICAgICAgcGFkZGluZ1k6IDIsCiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLAogICAgICAgICAgZm9udENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjgpJwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmICghTnVtYmVyLmlzTmFOKHJlZmVyZW5jZSkgJiYgIVsnRTEwYTEnLCAnRTEwYTInLCAnRTEwYTUnLCAnRTEwYTYnLCAnRTEwYTcnLCAnRTEwYTknLCAnTjRjJywgJ0U4JywgJ0UxM2UnLCAnRTEzZicsICdFMTNnJywgJ0UxM2gnLCAnRTEzaScsICdFMTNsJywgJ0UxM20nLCAnRTEyYycsICdFMTJkJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICBhbm5vdGF0aW9ucy5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEFubm90YXRpb25TZXR0aW5ncyksIHt9LCB7CiAgICAgICAgICBsYWJlbDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0QW5ub3RhdGlvblNldHRpbmdzLmxhYmVsKSwge30sIHsKICAgICAgICAgICAgY29udGVudDogInJlZmVyZW5jZTogIi5jb25jYXQodGhpcy5mb3JtYXROdW1SZWYocmVmZXJlbmNlKSkKICAgICAgICAgIH0pLAogICAgICAgICAgdmFsdWU6IHJlZmVyZW5jZQogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgaWYgKFsnRTQnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIGxvdyA9IDAuMiAqIHJlZmVyZW5jZTsKICAgICAgICBhbm5vdGF0aW9ucy5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEFubm90YXRpb25TZXR0aW5ncyksIHt9LCB7CiAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoNTAsIDI1MiwgMCwgMC41KScsCiAgICAgICAgICB2YWx1ZTogbG93LAogICAgICAgICAgbGFiZWw6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEFubm90YXRpb25TZXR0aW5ncy5sYWJlbCksIHt9LCB7CiAgICAgICAgICAgIGNvbnRlbnQ6ICJvbi9vZmY6ICIuY29uY2F0KHRoaXMuZm9ybWF0TnVtUmVmKGxvdykpCiAgICAgICAgICB9KQogICAgICAgIH0pKTsKICAgICAgfSBlbHNlIGlmIChbJ0UxMScsICdFMWEnLCAnRTEnLCAnRTInLCAnRTJfUzInLCAnRTFhX1MyJywgJ0UxX1MyJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICBpZiAoaW5kaWNhdG9yQ29kZSA9PT0gJ0UxMScpIHsKICAgICAgICAgIGxvdyA9IDAuMyAqIHJlZmVyZW5jZTsKICAgICAgICAgIGhpZ2ggPSAwLjcgKiByZWZlcmVuY2U7CiAgICAgICAgfSBlbHNlIGlmIChbJ0UxYScsICdFMScsICdFMicsICdFMl9TMicsICdFMWFfUzInLCAnRTFfUzInXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgICAgbG93ID0gMC43ICogcmVmZXJlbmNlOwogICAgICAgICAgaGlnaCA9IDEuMyAqIHJlZmVyZW5jZTsKICAgICAgICB9CgogICAgICAgIGFubm90YXRpb25zLnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0QW5ub3RhdGlvblNldHRpbmdzKSwge30sIHsKICAgICAgICAgIHZhbHVlOiBsb3csCiAgICAgICAgICBsYWJlbDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0QW5ub3RhdGlvblNldHRpbmdzLmxhYmVsKSwge30sIHsKICAgICAgICAgICAgY29udGVudDogImxvdzogIi5jb25jYXQodGhpcy5mb3JtYXROdW1SZWYobG93KSkKICAgICAgICAgIH0pCiAgICAgICAgfSkpOwogICAgICAgIGFubm90YXRpb25zLnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0QW5ub3RhdGlvblNldHRpbmdzKSwge30sIHsKICAgICAgICAgIHZhbHVlOiBoaWdoLAogICAgICAgICAgbGFiZWw6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEFubm90YXRpb25TZXR0aW5ncy5sYWJlbCksIHt9LCB7CiAgICAgICAgICAgIGNvbnRlbnQ6ICJoaWdoOiAiLmNvbmNhdCh0aGlzLmZvcm1hdE51bVJlZihoaWdoKSkKICAgICAgICAgIH0pCiAgICAgICAgfSkpOwogICAgICB9IC8vIEludHJvZHVjZSBiYWNrZ3JvdW5kIGFyZWEgYW5ub3RhdGlvbnMgZm9yIGxvY2tkb3duIHRpbWVzLCBkb2VzIG5vdAogICAgICAvLyB3b3JrIGZvciBhbGwgY2hhcnQgdHlwZXMsIHNvIHdlIG1ha2Ugc3VyZSBpdCBpcyBub3QgYW55IG9mIHRob3NlIGNoYXJ0cwoKCiAgICAgIGlmICghWydFMTBhMycsICdFMTBhOCcsICdOMicsICdFMTJjJywgJ0UxMmQnLCAnR1NBJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAvLyBGaW5kIGNvdW50cnkgYmFzZWQgb24gYWxwaGEtMyBjb2RlCiAgICAgICAgdmFyIGN1cnJDb3VudHJ5ID0gY291bnRyaWVzLmZlYXR1cmVzLmZpbmQoZnVuY3Rpb24gKGNudHIpIHsKICAgICAgICAgIHJldHVybiBjbnRyLnByb3BlcnRpZXMuYWxwaGEyID09PSBfdGhpczIuaW5kaWNhdG9yT2JqZWN0LmNvdW50cnk7CiAgICAgICAgfSk7CgogICAgICAgIGlmICh0eXBlb2YgY3VyckNvdW50cnkgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsb2NrZG93blRpbWVzLCBjdXJyQ291bnRyeS5pZCkpIHsKICAgICAgICAgIHZhciBsY2tUcyA9IGxvY2tkb3duVGltZXNbY3VyckNvdW50cnkuaWRdWydDN19SZXN0cmljdGlvbnMgb24gaW50ZXJuYWwgbW92ZW1lbnQnXTsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxja1RzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBhcmVhQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjApJzsKCiAgICAgICAgICAgIGlmIChsY2tUc1tpXS52YWx1ZSA9PT0gMSkgewogICAgICAgICAgICAgIGFyZWFDb2xvciA9ICdyZ2JhKDIwNCwgMTQzLCAxNDMsIDAuMjQpJzsKICAgICAgICAgICAgfSBlbHNlIGlmIChsY2tUc1tpXS52YWx1ZSA9PT0gMikgewogICAgICAgICAgICAgIGFyZWFDb2xvciA9ICdyZ2JhKDIwNywgMTA5LCAxMDksIDAuNTQpJzsKICAgICAgICAgICAgfSAvLyBXZSBhbHNvIGhhdmUgc3BlY2lhbCBkYXRlIGhhbmRsaW5nIGZvciBzb21lIGNoYXJ0IHR5cGVzIGFzIHdlCiAgICAgICAgICAgIC8vIHNpbXVsYXRlIHllYXIgYWdub3N0aWMgcmVuZGVyaW5nLCBzbyB3ZSBjb252ZXJ0IGFsbCBkYXRlcyB0bwogICAgICAgICAgICAvLyBvbmUgeWVhcgoKCiAgICAgICAgICAgIHZhciBzdGFydCA9IERhdGVUaW1lLmZyb21JU08obGNrVHNbaV0uc3RhcnQpOwogICAgICAgICAgICB2YXIgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhsY2tUc1tpXS5lbmQpOwoKICAgICAgICAgICAgaWYgKFsnRTEwYTInLCAnRTEwYTYnLCAnRTEwYTcnLCAnRTEwYycsICdFOCcsICdFMTNlJywgJ0UxM2YnLCAnRTEzZycsICdFMTNoJywgJ0UxM2knLCAnRTEzbCcsICdFMTNtJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0LnNldCh7CiAgICAgICAgICAgICAgICB5ZWFyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZW5kID0gZW5kLnNldCh7CiAgICAgICAgICAgICAgICB5ZWFyOiAyMDAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChsY2tUc1tpXS52YWx1ZSAhPT0gMCkgewogICAgICAgICAgICAgIGFubm90YXRpb25zLnB1c2goewogICAgICAgICAgICAgICAgZHJhd1RpbWU6ICdiZWZvcmVEYXRhc2V0c0RyYXcnLAogICAgICAgICAgICAgICAgdHlwZTogJ2JveCcsCiAgICAgICAgICAgICAgICB4U2NhbGVJRDogJ3gtYXhpcy0wJywKICAgICAgICAgICAgICAgIHhNaW46IHN0YXJ0LnRvSVNPRGF0ZSgpLAogICAgICAgICAgICAgICAgeE1heDogZW5kLnRvSVNPRGF0ZSgpLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGFyZWFDb2xvciwKICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAwLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBhcmVhQ29sb3IKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHhBeGVzID0ge307CgogICAgICBpZiAoIVsnRTEwYTEnLCAnRTEwYTInLCAnRTEwYTMnLCAnRTEwYTUnLCAnRTEwYTYnLCAnRTEwYTcnLCAnRTEwYTgnLCAnRTEwYycsICdFMTJjJywgJ0UxMmQnLCAnTjInXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHhBeGVzID0gW3sKICAgICAgICAgIHR5cGU6ICd0aW1lJywKICAgICAgICAgIHRpbWU6IHsKICAgICAgICAgICAgdW5pdDogJ3dlZWsnCiAgICAgICAgICB9LAogICAgICAgICAgdGlja3M6IHsKICAgICAgICAgICAgbWluOiB0aW1lTWluTWF4WzBdLAogICAgICAgICAgICBtYXg6IHRpbWVNaW5NYXhbMV0KICAgICAgICAgIH0sCiAgICAgICAgICBiYXJUaGlja25lc3M6ICdmbGV4JwogICAgICAgIH1dOwoKICAgICAgICBpZiAoIVsnTjMnLCAnTjNiJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAgIHhBeGVzWzBdLmRpc3RyaWJ1dGlvbiA9ICdzZXJpZXMnOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKFsnRTEwYTInLCAnRTEwYTYnLCAnRTEwYTcnLCAnRTEwYycsICdFOCcsICdFMTNlJywgJ0UxM2YnLCAnRTEzZycsICdFMTNoJywgJ0UxM2knLCAnRTEzbCcsICdFMTNtJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAvKiBSZWNhbGN1bGF0ZSB0byBnZXQgbWluIG1heCBtb250aHMgaW4gZGF0YSBjb252ZXJ0ZWQgdG8gb25lIHllYXIgKi8KICAgICAgICB0aW1lTWluTWF4ID0gdGhpcy5nZXRNaW5NYXhEYXRlKHRoaXMuaW5kaWNhdG9yT2JqZWN0LnRpbWUubWFwKGZ1bmN0aW9uIChkYXRlKSB7CiAgICAgICAgICByZXR1cm4gZGF0ZS5zZXQoewogICAgICAgICAgICB5ZWFyOiAyMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9KSk7CiAgICAgICAgLyogQ2hlY2sgYWxzbyBmb3IgcmVmZXJlbmNlIHRpbWUgKi8KCiAgICAgICAgdmFyIHJlZlRpbWVNaW5NYXggPSB0aGlzLmdldE1pbk1heERhdGUodGhpcy5pbmRpY2F0b3JPYmplY3QucmVmZXJlbmNlVGltZS5tYXAoZnVuY3Rpb24gKGRhdGUpIHsKICAgICAgICAgIHJldHVybiBkYXRlLnNldCh7CiAgICAgICAgICAgIHllYXI6IDIwMDAKICAgICAgICAgIH0pOwogICAgICAgIH0pKTsKICAgICAgICB4QXhlcyA9IFt7CiAgICAgICAgICB0eXBlOiAndGltZScsCiAgICAgICAgICB0aW1lOiB7CiAgICAgICAgICAgIHVuaXQ6ICdtb250aCcsCiAgICAgICAgICAgIGRpc3BsYXlGb3JtYXRzOiB7CiAgICAgICAgICAgICAgbW9udGg6ICdNTU0nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvb2x0aXBGb3JtYXQ6ICdkZC4gTU1NJwogICAgICAgICAgfSwKICAgICAgICAgIHRpY2tzOiB7CiAgICAgICAgICAgIG1pbjogdGltZU1pbk1heFswXSA8IHJlZlRpbWVNaW5NYXhbMF0gPyB0aW1lTWluTWF4WzBdIDogcmVmVGltZU1pbk1heFswXSwKICAgICAgICAgICAgbWF4OiB0aW1lTWluTWF4WzFdID4gcmVmVGltZU1pbk1heFsxXSA/IHRpbWVNaW5NYXhbMV0gOiByZWZUaW1lTWluTWF4WzFdCiAgICAgICAgICB9CiAgICAgICAgfV07CiAgICAgIH0KCiAgICAgIGlmIChbJ04yJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB0aW1lTWluTWF4ID0gdGhpcy5nZXRNaW5NYXhEYXRlKHRoaXMuaW5kaWNhdG9yT2JqZWN0LnRpbWUubWFwKGZ1bmN0aW9uIChkYXRlKSB7CiAgICAgICAgICByZXR1cm4gZGF0ZS5zZXQoewogICAgICAgICAgICB5ZWFyOiAyMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9KSk7CiAgICAgICAgeEF4ZXMgPSBbewogICAgICAgICAgdHlwZTogJ3RpbWUnLAogICAgICAgICAgdGltZTogewogICAgICAgICAgICB1bml0OiAnbW9udGgnLAogICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czogewogICAgICAgICAgICAgIG1vbnRoOiAnTU1NJwogICAgICAgICAgICB9LAogICAgICAgICAgICB0b29sdGlwRm9ybWF0OiAnZGQuIE1NTScKICAgICAgICAgIH0sCiAgICAgICAgICBkaXN0cmlidXRpb246ICdzZXJpZXMnLAogICAgICAgICAgdGlja3M6IHsKICAgICAgICAgICAgbWluOiB0aW1lTWluTWF4WzBdLAogICAgICAgICAgICBtYXg6IHRpbWVNaW5NYXhbMV0KICAgICAgICAgIH0KICAgICAgICB9XTsKICAgICAgfQoKICAgICAgaWYgKFsnRTEyYycsICdFMTJkJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB4QXhlcyA9IFt7CiAgICAgICAgICB0eXBlOiAndGltZScsCiAgICAgICAgICB0aW1lOiB7CiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJywKICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHsKICAgICAgICAgICAgICB5ZWFyOiAneXl5eScKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbHRpcEZvcm1hdDogJ3l5eXktTU0tZGQgLSB5eXl5LTA2LTMwJwogICAgICAgICAgfSwKICAgICAgICAgIGRpc3RyaWJ1dGlvbjogJ3NlcmllcycsCiAgICAgICAgICB0aWNrczogewogICAgICAgICAgICBtaW46IHRpbWVNaW5NYXhbMF0sCiAgICAgICAgICAgIG1heDogdGltZU1pbk1heFsxXQogICAgICAgICAgfQogICAgICAgIH1dOwogICAgICB9CgogICAgICBpZiAoWydFMTNkJywgJ0UxM24nLCAnQzEnLCAnQzInLCAnQzMnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHhBeGVzID0gW3sKICAgICAgICAgIHR5cGU6ICd0aW1lJywKICAgICAgICAgIHRpbWU6IHsKICAgICAgICAgICAgdW5pdDogJ21vbnRoJywKICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHsKICAgICAgICAgICAgICBtb250aDogJ01NTSB5eScKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbHRpcEZvcm1hdDogJ01NTSB5eXl5JwogICAgICAgICAgfSwKICAgICAgICAgIGRpc3RyaWJ1dGlvbjogJ3NlcmllcycsCiAgICAgICAgICB0aWNrczogewogICAgICAgICAgICBtaW46IHRpbWVNaW5NYXhbMF0sCiAgICAgICAgICAgIG1heDogdGltZU1pbk1heFsxXQogICAgICAgICAgfQogICAgICAgIH1dOwogICAgICB9CgogICAgICB2YXIgcGx1Z2lucyA9IHsKICAgICAgICBkYXRhbGFiZWxzOiB7CiAgICAgICAgICBkaXNwbGF5OiBmYWxzZQogICAgICAgIH0KICAgICAgfTsKICAgICAgdmFyIHlBeGVzID0gW3sKICAgICAgICBzY2FsZUxhYmVsOiB7CiAgICAgICAgICBkaXNwbGF5OiB0cnVlLAogICAgICAgICAgbGFiZWxTdHJpbmc6IHRoaXMuaW5kaWNhdG9yT2JqZWN0LnlBeGlzLAogICAgICAgICAgcGFkZGluZzogMgogICAgICAgIH0sCiAgICAgICAgdGlja3M6IHsKICAgICAgICAgIGxpbmVIZWlnaHQ6IDEsCiAgICAgICAgICBzdWdnZXN0ZWRNaW46IE1hdGgubWluLmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmluZGljYXRvck9iamVjdC5tZWFzdXJlbWVudC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgICB9KSkpIC0gMSwKICAgICAgICAgIHN1Z2dlc3RlZE1heDogTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gIU51bWJlci5pc05hTihkKTsKICAgICAgICAgIH0pKSkgKyAxCiAgICAgICAgfQogICAgICB9XTsgLy8gVGhpcyBpbmRpY2F0b3IgaGFzIGFuIGFycmF5IG9mIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSBtaW4vbWF4CiAgICAgIC8vIGRpZmZlcmVudAoKICAgICAgaWYgKFsnRTEwYTknXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHZhciBtZWFzRmxhdCA9IHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZsYXQoKTsKICAgICAgICB5QXhlc1swXS50aWNrcy5zdWdnZXN0ZWRNaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkobWVhc0ZsYXQpKTsKICAgICAgICB5QXhlc1swXS50aWNrcy5zdWdnZXN0ZWRNYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkobWVhc0ZsYXQpKTsKICAgICAgfQoKICAgICAgdmFyIGxlZ2VuZCA9IHsKICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgIGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbiBnZW5lcmF0ZUxhYmVscyhjaGFydCkgewogICAgICAgICAgICB2YXIgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzOwogICAgICAgICAgICB2YXIgbGFiZWxzID0gY2hhcnQubGVnZW5kLm9wdGlvbnMubGFiZWxzOwogICAgICAgICAgICB2YXIgdXNlUG9pbnRTdHlsZSA9IGxhYmVscy51c2VQb2ludFN0eWxlOwogICAgICAgICAgICB2YXIgb3ZlcnJpZGVTdHlsZSA9IGxhYmVscy5wb2ludFN0eWxlOwoKICAgICAgICAgICAgdmFyIGxhYmVsU2V0ID0gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpOwoKICAgICAgICAgICAgbGFiZWxTZXQgPSBsYWJlbFNldC5maWx0ZXIoZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICAgICAgICB2YXIgaW5jbHVkZUxhYmVsID0gZmFsc2U7CgogICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YXNldHNbbWV0YS5pbmRleF0sICdsYWJlbCcpKSB7CiAgICAgICAgICAgICAgICBpbmNsdWRlTGFiZWwgPSAhZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwuc3RhcnRzV2l0aCgnaGlkZV8nKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlTGFiZWw7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgbGFiZWxPYmplY3RzID0gbGFiZWxTZXQubWFwKGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgICAgICAgdmFyIHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTsKICAgICAgICAgICAgICB2YXIgYm9yZGVyV2lkdGggPSAyOwogICAgICAgICAgICAgIHZhciBoaWRkZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKG1ldGEuaGlkZGVuID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICBoaWRkZW4gPSB0cnVlOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLAogICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsCiAgICAgICAgICAgICAgICBoaWRkZW46IGhpZGRlbiwKICAgICAgICAgICAgICAgIGxpbmVDYXA6IHN0eWxlLmJvcmRlckNhcFN0eWxlLAogICAgICAgICAgICAgICAgbGluZURhc2g6IHN0eWxlLmJvcmRlckRhc2gsCiAgICAgICAgICAgICAgICBsaW5lRGFzaE9mZnNldDogc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwKICAgICAgICAgICAgICAgIGxpbmVKb2luOiBzdHlsZS5ib3JkZXJKb2luU3R5bGUsCiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IGJvcmRlcldpZHRoLAogICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLAogICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogb3ZlcnJpZGVTdHlsZSB8fCBzdHlsZS5wb2ludFN0eWxlLAogICAgICAgICAgICAgICAgcm90YXRpb246IHN0eWxlLnJvdGF0aW9uLAogICAgICAgICAgICAgICAgLy8gQmVsb3cgaXMgZXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgZGF0YXNldHMKICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sIF90aGlzMik7IC8vIE5vdyB3ZSBhZGQgb3VyIGRlZmF1bHQgMiBsb2NrZG93biBsYWJlbHMgYnV0IHdlIGV4Y2x1ZGUgaW5kaWNhdG9ycwogICAgICAgICAgICAvLyB3aGVyZSBpdCBpcyBub3QgYXBwbGljYWJsZQoKICAgICAgICAgICAgaWYgKCFbJ0UxMGExJywgJ0UxMGE1JywgJ0UxMGE4JywgJ04yJywgJ040YycsICdFMTJjJywgJ0UxMmQnLCAnR1NBJywgJ04xJ10uaW5jbHVkZXMoX3RoaXMyLmluZGljYXRvck9iamVjdC5pbmRpY2F0b3IpKSB7CiAgICAgICAgICAgICAgbGFiZWxPYmplY3RzLnB1c2goewogICAgICAgICAgICAgICAgdGV4dDogJ0xvdyBSZXN0cmljdGlvbnMnLAogICAgICAgICAgICAgICAgZmlsbFN0eWxlOiAncmdiYSgyMDQsIDE0MywgMTQzLCAwLjI0KScsCiAgICAgICAgICAgICAgICBoaWRkZW46IGZhbHNlLAogICAgICAgICAgICAgICAgbGluZVdpZHRoOiAwLAogICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiAtMQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGxhYmVsT2JqZWN0cy5wdXNoKHsKICAgICAgICAgICAgICAgIHRleHQ6ICdIaWdoIFJlc3RyaWN0aW9ucycsCiAgICAgICAgICAgICAgICBmaWxsU3R5bGU6ICdyZ2JhKDIwNywgMTA5LCAxMDksIDAuNTQpJywKICAgICAgICAgICAgICAgIGhpZGRlbjogZmFsc2UsCiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDAsCiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IC0xCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBsYWJlbE9iamVjdHM7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgaWYgKFsnTjRjJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB4QXhlcyA9IFt7CiAgICAgICAgICBzdGFja2VkOiB0cnVlCiAgICAgICAgfV07CiAgICAgICAgeUF4ZXNbMF0uc3RhY2tlZCA9IHRydWU7CiAgICAgICAgeUF4ZXNbMF0udGlja3MuYmVnaW5BdFplcm8gPSB0cnVlOwogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmluZGljYXRvck9iamVjdC5tZWFzdXJlbWVudC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKGQpOwogICAgICAgIH0pKSk7CiAgICAgICAgeUF4ZXNbMF0udGlja3Muc3VnZ2VzdGVkTWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgfSkpKTsKICAgICAgfQoKICAgICAgaWYgKFsnRTEyYiddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgLy8gdXBkYXRlIHVzZWQgeWF4aXMgY2hhcnQgbWF4IHRvIGJlIG1heCB2YWx1ZQogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmluZGljYXRvck9iamVjdC5tZWFzdXJlbWVudC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKGQpOwogICAgICAgIH0pKSk7CiAgICAgIH0KCiAgICAgIGlmIChbJ0UxMmInLCAnRTFhJywgJ0UxJywgJ0UyJywgJ0UyX1MyJywgJ0UxYV9TMicsICdFMV9TMicsICdFMTNkJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICAvLyB1cGRhdGUgdXNlZCB5YXhpcyBjaGFydCBtaW4gdG8gYmUgbWluIHZhbHVlCiAgICAgICAgeUF4ZXNbMF0udGlja3Muc3VnZ2VzdGVkTWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgfSkpKTsKICAgICAgfQoKICAgICAgaWYgKFsnQ1YnLCAnT1cnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHlBeGVzWzBdLnRpY2tzLmJlZ2luQXRaZXJvID0gdHJ1ZTsKICAgICAgICB5QXhlc1swXS50aWNrcyA9IHsKICAgICAgICAgIGxpbmVIZWlnaHQ6IDEsCiAgICAgICAgICBzdWdnZXN0ZWRNaW46IE1hdGgubWluLmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmluZGljYXRvck9iamVjdC5tZWFzdXJlbWVudC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgICB9KSkpLAogICAgICAgICAgc3VnZ2VzdGVkTWF4OiBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5pbmRpY2F0b3JPYmplY3QubWVhc3VyZW1lbnQuZmlsdGVyKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKGQpOwogICAgICAgICAgfSkpKQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChbJ0UxMGExJywgJ0UxMGE1J10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB5QXhlc1swXS50aWNrcy5iZWdpbkF0WmVybyA9IHRydWU7CiAgICAgICAgcGx1Z2lucyA9IHsKICAgICAgICAgIGRhdGFsYWJlbHM6IHsKICAgICAgICAgICAgbGFiZWxzOiB7CiAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgIGFuY2hvcjogJ2VuZCcsCiAgICAgICAgICAgICAgICBhbGlnbjogJ2VuZCcsCiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEwLAogICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUsIGNvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsUmVzID0gJyc7CiAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50YWdlID0gY29udGV4dC5jaGFydC5kYXRhLmRhdGFzZXRzW2NvbnRleHQuZGF0YXNldEluZGV4XS5pbmRMYWJlbHNbY29udGV4dC5kYXRhSW5kZXhdOwoKICAgICAgICAgICAgICAgICAgaWYgKCFbJycsICcvJ10uaW5jbHVkZXMocGVyY2VudGFnZSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY1ZhbCA9IE51bWJlcigocGVyY2VudGFnZSAqIDEwMCkudG9QcmVjaXNpb24oNCkpOwoKICAgICAgICAgICAgICAgICAgICBpZiAocGVyY1ZhbCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsUmVzID0gIisiLmNvbmNhdChwZXJjVmFsLCAiJSIpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBsYWJlbFJlcyA9ICIiLmNvbmNhdChwZXJjVmFsLCAiJSIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsUmVzOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNvbG9yOiBmdW5jdGlvbiBjb2xvcihjb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9ICdyZWQnOwoKICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuY2hhcnQuZGF0YS5kYXRhc2V0c1tjb250ZXh0LmRhdGFzZXRJbmRleF0uaW5kTGFiZWxzW2NvbnRleHQuZGF0YUluZGV4XSA+IDApIHsKICAgICAgICAgICAgICAgICAgICBjb2xvciA9ICdncmVlbic7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJ2JsYWNrJywKICAgICAgICAgICAgICAgIGFuY2hvcjogJ2VuZCcsCiAgICAgICAgICAgICAgICBhbGlnbjogJ2VuZCcsCiAgICAgICAgICAgICAgICBvZmZzZXQ6IC02LAogICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvRml4ZWQoMSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYgKFsnRTgnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1pbiA9IE1hdGgubWluLmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmluZGljYXRvck9iamVjdC5tZWFzdXJlbWVudC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKGQpOwogICAgICAgIH0pKSk7CiAgICAgICAgeUF4ZXNbMF0udGlja3Muc3VnZ2VzdGVkTWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgfSkpKTsKICAgICAgfQoKICAgICAgaWYgKFsnRTknXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1pbiA9IDA7CiAgICAgICAgeUF4ZXNbMF0udGlja3Muc3VnZ2VzdGVkTWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuaW5kaWNhdG9yT2JqZWN0Lm1lYXN1cmVtZW50LmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuICFOdW1iZXIuaXNOYU4oZCk7CiAgICAgICAgfSkpKTsKICAgICAgfQoKICAgICAgaWYgKFsnRTEwYTYnLCAnRTEwYTcnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHlBeGVzWzBdLnRpY2tzLmJlZ2luQXRaZXJvID0gdHJ1ZTsKICAgICAgICBwbHVnaW5zID0gewogICAgICAgICAgZGF0YWxhYmVsczogewogICAgICAgICAgICBsYWJlbHM6IHsKICAgICAgICAgICAgICB0aXRsZTogewogICAgICAgICAgICAgICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKGNvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3I7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZm9udDogewogICAgICAgICAgICAgICAgICBzaXplOiAxMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFuY2hvcjogJ2VuZCcsCiAgICAgICAgICAgICAgICBhbGlnbjogJ2VuZCcsCiAgICAgICAgICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChjb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuZGF0YXNldEluZGV4ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc05hTihjb250ZXh0LmNoYXJ0LmRhdGEuZGF0YXNldHNbMV0uZGF0YVtjb250ZXh0LmRhdGFJbmRleF0ueSkgJiYgY29udGV4dC5jaGFydC5kYXRhLmRhdGFzZXRzWzBdLmRhdGFbY29udGV4dC5kYXRhSW5kZXhdLnkgPiBjb250ZXh0LmNoYXJ0LmRhdGEuZGF0YXNldHNbMV0uZGF0YVtjb250ZXh0LmRhdGFJbmRleF0ueSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTI4OwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oY29udGV4dC5jaGFydC5kYXRhLmRhdGFzZXRzWzBdLmRhdGFbY29udGV4dC5kYXRhSW5kZXhdLnkpICYmIGNvbnRleHQuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhW2NvbnRleHQuZGF0YUluZGV4XS55ID4gY29udGV4dC5jaGFydC5kYXRhLmRhdGFzZXRzWzFdLmRhdGFbY29udGV4dC5kYXRhSW5kZXhdLnkpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMjg7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuICIiLmNvbmNhdCh2YWx1ZS55LnRvRml4ZWQoMSksICIlIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYgKFsnTjInLCAnRTEyYycsICdFMTJkJ10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB5QXhlc1swXS50aWNrcy5iZWdpbkF0WmVybyA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmIChbJ0UxMGEzJywgJ0UxMGE4J10uaW5jbHVkZXMoaW5kaWNhdG9yQ29kZSkpIHsKICAgICAgICB5QXhlc1swXS50aWNrcyA9IHsKICAgICAgICAgIHN1Z2dlc3RlZE1pbjogTnVtYmVyLk5hTiwKICAgICAgICAgIHN1Z2dlc3RlZE1heDogTnVtYmVyLk5hTiwKICAgICAgICAgIHBhZGRpbmc6IC0yMAogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGlmIChbJ0UxMGMnLCAnRTEwYTInLCAnRTEwYTYnLCAnRTEwYTcnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1pbiArPSAxOwogICAgICAgIHlBeGVzWzBdLnRpY2tzLnN1Z2dlc3RlZE1heCAtPSAxOwogICAgICB9CgogICAgICBpZiAoWydOMyddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgeUF4ZXNbMF0udHlwZSA9ICdteUxvZ1NjYWxlJzsKCiAgICAgICAgaWYgKHRoaXMuaW5kaWNhdG9yT2JqZWN0LmFvaUlEID09PSAnRVMxOScpIHsKICAgICAgICAgIHlBeGVzWzBdLm1pbiA9IDAuMDI7CiAgICAgICAgICB5QXhlc1swXS5tYXggPSAxOwogICAgICAgIH0KCiAgICAgICAgeUF4ZXNbMF0udGlja3MgPSB7CiAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soKSB7CiAgICAgICAgICAgIHZhciBfQ2hhcnQkVGlja3MkZm9ybWF0dGU7CgogICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgdmFsdWUgPSAoX0NoYXJ0JFRpY2tzJGZvcm1hdHRlID0gQ2hhcnQuVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pYykuY2FsbC5hcHBseShfQ2hhcnQkVGlja3MkZm9ybWF0dGUsIFtfdGhpczJdLmNvbmNhdChhcmdzKSk7CgogICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSkudG9Mb2NhbGVTdHJpbmcoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgbGVnZW5kLmxhYmVscy51c2VQb2ludFN0eWxlID0gdHJ1ZTsKICAgICAgICBsZWdlbmQubGFiZWxzLmJveFdpZHRoID0gNTsKCiAgICAgICAgbGVnZW5kLm9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0pIHsKICAgICAgICAgIGlmIChsZWdlbmRJdGVtLnRleHQgPT09ICdTdGFuZGFyZCBkZXZpYXRpb24gKFNURCknKSB7CiAgICAgICAgICAgIHZhciBtYXN0ZXJJbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4OwogICAgICAgICAgICB2YXIgc2xhdmVJbmRleCA9IDM7CiAgICAgICAgICAgIHZhciBjaSA9IHRoaXMuY2hhcnQ7CiAgICAgICAgICAgIHZhciBtYXN0ZXJNZXRhID0gY2kuZ2V0RGF0YXNldE1ldGEobWFzdGVySW5kZXgpOwogICAgICAgICAgICB2YXIgbWV0YSA9IGNpLmdldERhdGFzZXRNZXRhKHNsYXZlSW5kZXgpOwoKICAgICAgICAgICAgaWYgKG1hc3Rlck1ldGEuaGlkZGVuID09PSBudWxsKSB7CiAgICAgICAgICAgICAgbWFzdGVyTWV0YS5oaWRkZW4gPSB0cnVlOwogICAgICAgICAgICAgIG1ldGEuaGlkZGVuID0gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBtYXN0ZXJNZXRhLmhpZGRlbiA9ICFtYXN0ZXJNZXRhLmhpZGRlbjsKICAgICAgICAgICAgICBtZXRhLmhpZGRlbiA9ICFtZXRhLmhpZGRlbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2kudXBkYXRlKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBDaGFydC5kZWZhdWx0cy5nbG9iYWwubGVnZW5kLm9uQ2xpY2suY2FsbCh0aGlzLCBlLCBsZWdlbmRJdGVtKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgZGVmYXVsdFNldHRpbmdzID0gewogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsCiAgICAgICAgcGx1Z2luczogcGx1Z2lucywKICAgICAgICBsZWdlbmQ6IGxlZ2VuZCwKICAgICAgICBzY2FsZXM6IHsKICAgICAgICAgIHhBeGVzOiB4QXhlcywKICAgICAgICAgIHlBeGVzOiB5QXhlcwogICAgICAgIH0sCiAgICAgICAgcGFuOiB7CiAgICAgICAgICBlbmFibGVkOiB0cnVlLAogICAgICAgICAgbW9kZTogJ3gnCiAgICAgICAgfSwKICAgICAgICB6b29tOiB7CiAgICAgICAgICBlbmFibGVkOiB0cnVlLAogICAgICAgICAgbW9kZTogJ3gnCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwczogewogICAgICAgICAgY2FsbGJhY2tzOiB7CiAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiAoY29udGV4dCwgZGF0YSkgewogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBkYXRhLmRhdGFzZXRzW2NvbnRleHQuZGF0YXNldEluZGV4XS5sYWJlbCB8fCAnJzsKCiAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7CiAgICAgICAgICAgICAgICBsYWJlbCArPSAnOiAnOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbGFiZWwgKz0gdGhpcy5yb3VuZFZhbHVlSW5kKE51bWJlcihjb250ZXh0LnZhbHVlKSk7CiAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsOwogICAgICAgICAgICB9LmJpbmQodGhpcykKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICBpZiAoWydOMyddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnRvb2x0aXBzID0gewogICAgICAgICAgY2FsbGJhY2tzOiB7CiAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbChjb250ZXh0KSB7CiAgICAgICAgICAgICAgdmFyIGRhdGFzZXRzID0gX3RoaXMyLmRhdGFjb2xsZWN0aW9uLmRhdGFzZXRzOwogICAgICAgICAgICAgIHZhciB2YWwgPSBkYXRhc2V0c1tjb250ZXh0LmRhdGFzZXRJbmRleF0uZGF0YVtjb250ZXh0LmluZGV4XTsKICAgICAgICAgICAgICByZXR1cm4gIlZhbHVlIChMb2cxMCk6ICIuY29uY2F0KE1hdGgubG9nMTAodmFsKS50b1ByZWNpc2lvbig0KSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAoWydFMTBhMyddLmluY2x1ZGVzKGluZGljYXRvckNvZGUpKSB7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLmdlbyA9IHsKICAgICAgICAgIHJhZGl1c1NjYWxlOiB7CiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsCiAgICAgICAgICAgIHNpemU6IFsxLCAyMF0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGRlZmF1bHRTZXR0aW5ncy5zY2FsZSA9IHsKICAgICAgICAgIHByb2plY3Rpb246ICdtZXJjYXRvcicKICAgICAgICB9OwogICAgICAgIGRlZmF1bHRTZXR0aW5ncy5wYW4ubW9kZSA9ICd4eSc7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnpvb20ubW9kZSA9ICd4eSc7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLmxlZ2VuZC5kaXNwbGF5ID0gZmFsc2U7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnRvb2x0aXBzID0gewogICAgICAgICAgY2FsbGJhY2tzOiB7CiAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbChjb250ZXh0KSB7CiAgICAgICAgICAgICAgdmFyIGRhdGFzZXRzID0gX3RoaXMyLmRhdGFjb2xsZWN0aW9uLmRhdGFzZXRzOwogICAgICAgICAgICAgIHZhciBvYmogPSBkYXRhc2V0c1tjb250ZXh0LmRhdGFzZXRJbmRleF0uZGF0YVtjb250ZXh0LmluZGV4XTsKICAgICAgICAgICAgICByZXR1cm4gb2JqLm5hbWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZvb3RlcjogZnVuY3Rpb24gZm9vdGVyKGNvbnRleHQpIHsKICAgICAgICAgICAgICB2YXIgZGF0YXNldHMgPSBfdGhpczIuZGF0YWNvbGxlY3Rpb24uZGF0YXNldHM7CiAgICAgICAgICAgICAgdmFyIG9iaiA9IGRhdGFzZXRzW2NvbnRleHRbMF0uZGF0YXNldEluZGV4XS5kYXRhW2NvbnRleHRbMF0uaW5kZXhdOwogICAgICAgICAgICAgIHZhciByZWZUID0gb2JqLnJlZmVyZW5jZVRpbWU7CiAgICAgICAgICAgICAgdmFyIHJlZlYgPSBOdW1iZXIob2JqLnJlZmVyZW5jZVZhbHVlKTsKICAgICAgICAgICAgICB2YXIgbGFiZWxPdXRwdXQgPSBbIiIuY29uY2F0KG9iai50aW1lLnRvSVNPRGF0ZSgpLCAiOiAgIikuY29uY2F0KG9iai52YWx1ZS50b1ByZWNpc2lvbig0KSksICIiLmNvbmNhdChyZWZULnRvSVNPRGF0ZSgpLCAiOiAgIikuY29uY2F0KHJlZlYudG9QcmVjaXNpb24oNCkpXTsKCiAgICAgICAgICAgICAgaWYgKHJlZlYgIT09IDApIHsKICAgICAgICAgICAgICAgIGxhYmVsT3V0cHV0LnB1c2goIiIuY29uY2F0KCgob2JqLnZhbHVlIC0gcmVmVikgLyByZWZWICogMTAwKS50b1ByZWNpc2lvbigyKSwgIiAlIikpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsT3V0cHV0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYgKFsnRTEwYTgnXS5pbmNsdWRlcyhpbmRpY2F0b3JDb2RlKSkgewogICAgICAgIGRlZmF1bHRTZXR0aW5ncy5nZW8gPSB7CiAgICAgICAgICByYWRpdXNTY2FsZTogewogICAgICAgICAgICBkaXNwbGF5OiB0cnVlLAogICAgICAgICAgICByYW5nZTogWzUsIDI1XSwKICAgICAgICAgICAgdGlja3M6IHsKICAgICAgICAgICAgICBtYXg6IDIwMDAwMDAKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnNjYWxlID0gewogICAgICAgICAgcHJvamVjdGlvbjogJ21lcmNhdG9yJywKICAgICAgICAgIG1heDogMjAKICAgICAgICB9OwogICAgICAgIGRlZmF1bHRTZXR0aW5ncy5wYW4ubW9kZSA9ICd4eSc7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnpvb20ubW9kZSA9ICd4eSc7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLmxlZ2VuZC5kaXNwbGF5ID0gZmFsc2U7CiAgICAgICAgZGVmYXVsdFNldHRpbmdzLnRvb2x0aXBzID0gewogICAgICAgICAgY2FsbGJhY2tzOiB7CiAgICAgICAgICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbChjb250ZXh0KSB7CiAgICAgICAgICAgICAgdmFyIGRhdGFzZXRzID0gX3RoaXMyLmRhdGFjb2xsZWN0aW9uLmRhdGFzZXRzOwogICAgICAgICAgICAgIHZhciBvYmogPSBkYXRhc2V0c1tjb250ZXh0LmRhdGFzZXRJbmRleF0uZGF0YVtjb250ZXh0LmluZGV4XTsKICAgICAgICAgICAgICByZXR1cm4gb2JqLm5hbWU7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZvb3RlcjogZnVuY3Rpb24gZm9vdGVyKGNvbnRleHQpIHsKICAgICAgICAgICAgICB2YXIgZGF0YXNldHMgPSBfdGhpczIuZGF0YWNvbGxlY3Rpb24uZGF0YXNldHM7CiAgICAgICAgICAgICAgdmFyIG9iaiA9IGRhdGFzZXRzW2NvbnRleHRbMF0uZGF0YXNldEluZGV4XS5kYXRhW2NvbnRleHRbMF0uaW5kZXhdOwogICAgICAgICAgICAgIHZhciByZWZWID0gTnVtYmVyKG9iai5yZWZlcmVuY2VWYWx1ZSk7CiAgICAgICAgICAgICAgdmFyIGxhYmVsT3V0cHV0ID0gWyIiLmNvbmNhdChvYmoudGltZS50b0lTT0RhdGUoKSwgIjoiKSwgIiIuY29uY2F0KHJlZlYudG9QcmVjaXNpb24oNCksICIgJSBoYXJ2ZXN0ZWQiKSwgIiIuY29uY2F0KCgxMDAgLSByZWZWKS50b1ByZWNpc2lvbig0KSwgIiAlIG5vdCBoYXJ2ZXN0ZWQiKSwgIk1heC4gYXJlYTogIi5jb25jYXQob2JqLnZhbHVlLCAiIGhhIildOwogICAgICAgICAgICAgIHJldHVybiBsYWJlbE91dHB1dDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0KCiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRTZXR0aW5ncyksIHt9LCB7CiAgICAgICAgYW5ub3RhdGlvbjogewogICAgICAgICAgYW5ub3RhdGlvbnM6IGFubm90YXRpb25zCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}