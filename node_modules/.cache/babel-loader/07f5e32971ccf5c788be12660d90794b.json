{"remainingRequest":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/babel-loader/lib/index.js!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorMap.vue","mtime":1624532486000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["IndicatorMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <l-map\n    ref=\"map\"\n    style=\"height: 100%; width: 100%; background: #cad2d3; z-index: 1;\"\n    :options=\"defaultMapOptions\"\n    :maxZoom=\"mapDefaults.maxMapZoom\"\n    :minZoom=\"mapDefaults.minMapZoom\"\n    @update:zoom=\"zoomUpdated\"\n    @update:center=\"centerUpdated\"\n    @update:bounds=\"boundsUpdated\"\n    v-resize=\"onResize\"\n    @ready=\"onMapReady()\"\n  >\n    <l-control-zoom position=\"topright\"></l-control-zoom>\n    <l-feature-group ref=\"customAreaFilterFeatures\"></l-feature-group>\n    <l-control position=\"topright\"\n      v-if=\"customAreaFilter && validDrawnArea && renderTrashBin\">\n      <v-tooltip left>\n        <template v-slot:activator=\"{ on }\">\n          <div v-on=\"on\" class=\"d-inline-block\">\n            <v-btn\n              color=\"error\"\n              x-small\n              fab\n              class=\"pa-0\"\n              :style=\"`${$vuetify.breakpoint.mdAndDown\n                ? 'width: 30px; height: 30px;'\n                : 'width: 26px; height: 26px;'} border-radius: 4px`\"\n              @click=\"clearCustomAreaFilter\"\n            >\n              <v-icon small>mdi-delete</v-icon>\n            </v-btn>\n          </div>\n        </template>\n          <span>Clear selection</span>\n      </v-tooltip>\n    </l-control>\n    <l-control position=\"topright\"\n      v-if=\"mergedConfigs()[0].customAreaIndicator && validDrawnArea && renderTrashBin\">\n      <v-tooltip left>\n        <template v-slot:activator=\"{ on }\">\n          <div v-on=\"on\" class=\"d-inline-block\"\n          :style=\"`border: 3px solid ${appConfig.branding.primaryColor};\n          border-radius: 6px;`\">\n            <v-btn\n              color=\"white\"\n              x-small\n              fab\n              depressed\n              class=\"pa-0\"\n              :style=\"`${$vuetify.breakpoint.mdAndDown\n                ? 'width: 36px; height: 36px;'\n                : 'width: 30px; height: 30px;'}\n                border-radius: 4px;\n                color: ${appConfig.branding.primaryColor};`\"\n              @click=\"fetchCustomAreaIndicator\"\n            >\n              <v-icon small>mdi-poll</v-icon>\n            </v-btn>\n          </div>\n        </template>\n          <span>Draw chart from sub-area</span>\n      </v-tooltip>\n    </l-control>\n    <LTileLayer\n      v-for=\"layer in baseLayers.filter(b => b.protocol === 'xyz')\"\n      v-bind=\"layer\"\n      ref=\"baseLayers\"\n      layer-type=\"base\"\n      :key=\"layer.name\"\n      :opacity=\"opacityTerrain[zoom]\"\n      :options=\"layerOptions(null, layer)\"\n    >\n    </LTileLayer>\n    <LWMSTileLayer\n      v-for=\"layer in baseLayers.filter(b => b.protocol === 'WMS')\"\n      :key=\"layer.name\"\n      v-bind=\"layer\"\n      :options=\"layerOptions(null, layer)\"\n      layer-type=\"base\"\n    >\n    </LWMSTileLayer>\n    <l-geo-json\n    :geojson=\"subAoiInverse\"\n    :pane=\"popupPane\"\n    layer-type=\"overlay\"\n    name='Reference area overlay'\n    :optionsStyle=\"subAoiInverseStyle\"\n    >\n    </l-geo-json>\n    <l-layer-group ref=\"dataLayers\">\n      <l-geo-json\n      :geojson=\"indicator.subAoi\"\n      :pane=\"tooltipPane\"\n      :optionsStyle=\"subAoiStyle('data')\"\n      >\n      </l-geo-json>\n      <l-marker-cluster v-if=\"mergedConfigs()[0].featuresClustering\"\n        ref=\"featuresDataCluster\"\n        :options=\"clusterOptions\"\n        >\n      </l-marker-cluster>\n      <l-geo-json\n          v-else\n          ref=\"featureJsonData\"\n          :geojson=\"getDataF().features\"\n          :options=\"featureOptions('data')\"\n          :pane=\"tooltipPane\"\n          :key=\"dataJsonKey\"\n        >\n      </l-geo-json>\n      <l-circle-marker\n        v-if=\"showAoi\"\n        :lat-lng=\"aoi\"\n        :radius=\"12\"\n        :color=\"appConfig.branding.primaryColor\"\n        :weight=\"2\"\n        :dashArray=\"'3'\"\n        :fill=\"true\"\n        :fillColor=\"getAoiFill('data')\"\n        :fillOpacity=\"1\"\n        :pane=\"tooltipPane\"\n      >\n      </l-circle-marker>\n      <!-- XYZ grouping is not implemented yet -->\n      <LTileLayer\n      v-for=\"(layerConfig, i) in mergedConfigs().filter(l => l.protocol === 'xyz')\"\n        ref=\"dataLayerArrayXYZ\"\n        :data-key-originalindex=\"i\"\n        :key=\"dataLayerKeyXYZ[i]\"\n        v-bind=\"layerConfig\"\n        :options=\"layerOptions(currentTime, layerConfig)\"\n        :pane=\"overlayPane\"\n        layer-type=\"overlay\"\n      >\n      </LTileLayer>\n      <template v-if=\"getCombinedWMSLayers().length > 0\">\n        <l-layer-group ref=\"dataLayerArrayWMS\">\n          <l-layer-group\n          v-for=\"combLayer in this.getCombinedWMSLayers()\"\n            :key=\"combLayer.name\"\n            :name=\"combLayer.name\"\n            layer-type=\"overlay\"\n          >\n            <LWMSTileLayer\n            v-for=\"cLayerConfig in combLayer.combinedLayers\"\n              :key=\"cLayerConfig.name\"\n              v-bind=\"cLayerConfig\"\n              :options=\"layerOptions(currentTime, cLayerConfig)\"\n              :pane=\"overlayPane\"\n            >\n            </LWMSTileLayer>\n          </l-layer-group>\n          <LWMSTileLayer\n          v-for=\"layerConfig in this.getSimpleWMSLayers()\"\n            :key=\"layerConfig.name\"\n            v-bind=\"layerConfig\"\n            :options=\"layerOptions(currentTime, layerConfig)\"\n            :pane=\"overlayPane\"\n            layer-type=\"overlay\"\n          >\n          </LWMSTileLayer>\n        </l-layer-group>\n      </template>\n      <template v-else>\n        <LWMSTileLayer\n        v-for=\"layerConfig in this.getSimpleWMSLayers()\"\n          ref=\"dataLayerArrayWMS\"\n          :key=\"layerConfig.name\"\n          v-bind=\"layerConfig\"\n          :options=\"layerOptions(currentTime, layerConfig)\"\n          :pane=\"overlayPane\"\n          layer-type=\"overlay\"\n        >\n        </LWMSTileLayer>\n      </template>\n    </l-layer-group>\n    <l-layer-group ref=\"compareLayers\">\n      <!-- XYZ grouping is not implemented yet -->\n      <LTileLayer\n      v-for=\"(layerConfig, i) in mergedConfigs('compare').filter(l => l.protocol === 'xyz')\"\n        ref=\"compareLayerArrayXYZ\"\n        :data-key-originalindex=\"i\"\n        :key=\"compareLayerKeyXYZ[i]\"\n        v-bind=\"layerConfig\"\n        :visible=\"enableCompare\"\n        :options=\"layerOptions(currentCompareTime, layerConfig)\"\n        :pane=\"overlayPane\"\n      >\n      </LTileLayer>\n      <template v-if=\"getCombinedWMSLayers('compare').length > 0\">\n        <l-layer-group ref=\"compareLayerArrayWMS\">\n          <l-layer-group\n          v-for=\"combLayer in this.getCombinedWMSLayers('compare')\"\n            :key=\"combLayer.name\"\n          >\n            <LWMSTileLayer\n            v-for=\"cLayerConfig in combLayer.combinedLayers\"\n              :key=\"cLayerConfig.name\"\n              v-bind=\"cLayerConfig\"\n              :visible=\"enableCompare\"\n              :options=\"layerOptions(currentCompareTime, cLayerConfig)\"\n              :pane=\"overlayPane\"\n            >\n            </LWMSTileLayer>\n          </l-layer-group>\n          <LWMSTileLayer\n          v-for=\"layerConfig in this.getSimpleWMSLayers('compare')\"\n            :key=\"layerConfig.name\"\n            v-bind=\"layerConfig\"\n            :visible=\"enableCompare\"\n            :options=\"layerOptions(currentCompareTime, layerConfig)\"\n            :pane=\"overlayPane\"\n          >\n          </LWMSTileLayer>\n        </l-layer-group>\n      </template>\n      <template v-else>\n        <LWMSTileLayer\n        v-for=\"layerConfig in this.getSimpleWMSLayers('compare')\"\n          ref=\"compareLayerArrayWMS\"\n          :key=\"layerConfig.name\"\n          v-bind=\"layerConfig\"\n          :visible=\"enableCompare\"\n          :options=\"layerOptions(currentCompareTime, layerConfig)\"\n          :pane=\"overlayPane\"\n        >\n        </LWMSTileLayer>\n      </template>\n      <l-geo-json\n        :geojson=\"indicator.subAoi\"\n        :pane=\"shadowPane\"\n        :visible=\"enableCompare\"\n        :optionsStyle=\"subAoiStyle('compare')\"\n      >\n      </l-geo-json>\n      <l-marker-cluster v-if=\"mergedConfigs()[0].featuresClustering\"\n        ref=\"featuresCompareCluster\" :options=\"clusterOptions\">\n      </l-marker-cluster>\n      <l-geo-json\n        v-else\n        ref=\"featureJsonCompare\"\n        :visible=\"enableCompare\"\n        :geojson=\"getCompareF().features\"\n        :options=\"featureOptions('compare')\"\n        :pane=\"shadowPane\"\n        :key=\"compareJsonKey\"\n      >\n      </l-geo-json>\n      <l-circle-marker\n        v-if=\"showAoi\"\n        :lat-lng=\"aoi\"\n        :visible=\"enableCompare\"\n        :radius=\"12\"\n        :color=\"appConfig.branding.primaryColor\"\n        :weight=\"2\"\n        :dashArray=\"3\"\n        :fill=\"true\"\n        :fillColor=\"getAoiFill('compare')\"\n        :fillOpacity=\"1\"\n        :pane=\"shadowPane\"\n      >\n      </l-circle-marker>\n    </l-layer-group>\n    <l-layer-group ref=\"overlayLayers\" v-if=\"!countrySelection\">\n      <LTileLayer\n        v-for=\"layer in overlayLayers.filter(b => b.protocol === 'xyz')\"\n        :key=\"layer.name\"\n        v-bind=\"layer\"\n        :pane=\"markerPane\"\n        :opacity=\"opacityOverlay[zoom]\"\n        :options=\"layerOptions(null, layer)\"\n        layer-type=\"overlay\"\n      >\n      </LTileLayer>\n      <LWMSTileLayer\n        v-for=\"layer in overlayLayers.filter(b => b.protocol === 'WMS')\"\n        v-bind=\"layer\"\n        :key=\"layer.name\"\n        :options=\"layerOptions(null, layer)\"\n        :pane=\"markerPane\"\n        :opacity=\"opacityOverlay[zoom]\"\n        layer-type=\"overlay\"\n      >\n      </LWMSTileLayer>\n    </l-layer-group>\n    <l-geo-json\n    v-if=\"countrySelection\"\n    :geojson=\"countriesJson\"\n    :optionsStyle=\"countriesStyle\"\n    :options=\"countriesOptions()\"\n    name=\"Country vectors\"\n    layer-type=\"overlay\"\n    >\n    </l-geo-json>\n    <l-feature-group ref=\"gsaLayer\"\n      v-if=\"borderSelection\">\n      <l-circle-marker v-for=\"(feature) in gsaJson\"\n        :key=\"feature.id\"\n        ref=\"markers\"\n        :lat-lng=\"feature.AOI.split(',').map(Number)\"\n        :name=\"feature.name\"\n        color=\"#fff\"\n        :radius=\"selectedBorder === feature.borderId ? 6 : 4\"\n        :fillColor=\"selectedBorder === feature.borderId ?\n          appConfig.branding.secondaryColor : appConfig.branding.primaryColor\"\n        :weight=\"selectedBorder === feature.borderId ? 2 : 1\"\n        :opacity=\"selectedBorder === feature.borderId ? 1.0 : 0.8\"\n        :fillOpacity=\"selectedBorder === feature.borderId ? 1.0 : 0.9\"\n        @click=\"selectGSAIndicator(feature)\"\n      >\n      <l-tooltip class=\"tooltip text-center\" :options=\"{ direction: 'top' }\">\n          <p class=\"ma-0\">\n            <strong>{{ feature.name }}</strong>\n          </p>\n        </l-tooltip>\n      </l-circle-marker>\n    </l-feature-group>\n    <div\n    :style=\"`position: absolute; z-index: 700; top: 10px; left: 10px;`\">\n      <img v-if=\"mergedConfigs()[0].legendUrl\"\n      :src=\"mergedConfigs()[0].legendUrl\" alt=\"\"\n      :class=\"`map-legend ${$vuetify.breakpoint.xsOnly ? 'map-legend-expanded' :\n      (legendExpanded && 'map-legend-expanded')}`\"\n      @click=\"legendExpanded = !legendExpanded\"\n      :style=\"`background: rgba(255, 255, 255, 0.8);`\">\n      <div\n      v-if=\"mergedConfigs()[0].customAreaFeatures &&\n      (mergedConfigs()[0].features.featureLimit === dataFeaturesCount ||\n      mergedConfigs()[0].features.featureLimit === compareFeaturesCount)\"\n      :style=\"`width: fit-content; background: rgba(255, 255, 255, 0.8);`\"\n      >\n        <h3 :class=\"`brand-${appConfig.id} px-3 py-2`\">\n          Limit of drawn features is for performance reasons set to\n          <span :style=\"`font-size: 17px;`\">{{mergedConfigs()[0].features.featureLimit}}\n          </span>\n        </h3>\n      </div>\n    </div>\n    <div\n      class=\"d-flex justify-center\"\n      style=\"position: relative; width: 100%; height: 100%;\"\n      @click.stop=\"\"\n      @dblclick.stop=\"\"\n    >\n      <h3 :class=\"`brand-${appConfig.id} px-3 py-1`\"\n        v-if=\"enableCompare && indicator.compareDisplay && indicator.compareDisplay.mapLabel\"\n        style=\"position:absolute; z-index:1000; right: 0px; bottom: 45%;\n        background: rgba(255, 255, 255, 0.6); font-size: 16px; pointer-events: none;\">\n          {{indicator.display.mapLabel}}\n      </h3>\n      <h3 :class=\"`brand-${appConfig.id} px-3 py-1`\"\n        v-if=\"enableCompare && indicator.compareDisplay && indicator.display.mapLabel\"\n        style=\"position:absolute; z-index:1000; left: 0px; bottom: 45%;\n        background: rgba(255, 255, 255, 0.6); font-size: 16px; pointer-events: none;\">\n          {{indicator.compareDisplay.mapLabel}}\n      </h3>\n      <v-sheet\n        v-if=\"!mergedConfigs()[0].disableTimeSelection\"\n        class=\"row justify-center align-center\"\n        style=\"position: absolute; bottom: 30px; z-index: 1000; width: auto; max-width: 100%;\"\n      >\n        <v-col\n          v-if=\"enableCompare && !indicator.compareDisplay\"\n          cols=\"6\"\n          class=\"pr-0\"\n        >\n          <v-select\n            v-if=\"enableCompare\"\n            outlined\n            dense\n            autofocus\n            hide-details\n            :prepend-inner-icon=\"(arrayOfObjects && compareLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(compareLayerTime.value) > 0\n                ? 'mdi-arrow-left-drop-circle'\n                : 'mdi-asterisk')\"\n            :append-icon=\"(arrayOfObjects && compareLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(compareLayerTime.value) < arrayOfObjects.length - 1\n                ? 'mdi-arrow-right-drop-circle'\n                : 'mdi-asterisk')\"\n            menu-props=\"auto\"\n            :items=\"arrayOfObjects\"\n            item-value=\"value\"\n            item-text=\"name\"\n            v-model=\"compareLayerTime\"\n            @change=\"compareLayerTimeSelection\"\n            @click:prepend-inner=\"compareLayerReduce\"\n            @click:append=\"compareLayerIncrease\"\n          ></v-select>\n        </v-col>\n        <v-col\n          :cols=\"enableCompare && !indicator.compareDisplay ? 6 : 12\"\n        >\n          <v-select\n            outlined\n            dense\n            autofocus\n            hide-details\n            :prepend-inner-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime.value) > 0\n                ? 'mdi-arrow-left-drop-circle'\n                : 'mdi-asterisk')\"\n            :append-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime.value) < arrayOfObjects.length - 1\n                ? 'mdi-arrow-right-drop-circle'\n                : 'mdi-asterisk')\"\n            menu-props=\"auto\"\n            :items=\"arrayOfObjects\"\n            item-value=\"value\"\n            item-text=\"name\"\n            v-model=\"dataLayerTime\"\n            @change=\"dataLayerTimeSelection\"\n            @click:prepend-inner=\"dataLayerReduce\"\n            @click:append=\"dataLayerIncrease\"\n          >\n            <template v-slot:prepend\n            v-if=\"!mergedConfigs()[0].disableCompare\">\n              <v-tooltip\n                bottom\n              >\n                <template v-slot:activator=\"{ on }\">\n                  <v-icon v-on=\"on\" @click=\"enableCompare = !enableCompare\">mdi-compare</v-icon>\n                </template>\n                Compare two images\n              </v-tooltip>\n            </template>\n          </v-select>\n        </v-col>\n      </v-sheet>\n    </div>\n    <l-control-attribution position=\"bottomright\" prefix=''></l-control-attribution>\n    <l-control-layers position=\"topright\" ref=\"layersControl\"></l-control-layers>\n  </l-map>\n</template>\n\n<script>\n// Utilities\nimport {\n  mapState,\n  mapGetters,\n} from 'vuex';\nimport {\n  geoJson, latLngBounds, latLng, circleMarker, DivIcon, Point,\n} from 'leaflet';\nimport { template } from '@/utils';\nimport {\n  LMap, LTileLayer, LWMSTileLayer, LGeoJson, LCircleMarker,\n  LControlLayers, LControlAttribution, LControlZoom, LLayerGroup,\n  LFeatureGroup, LControl, LTooltip,\n} from 'vue2-leaflet';\nimport { DateTime } from 'luxon';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-mouse-position';\nimport 'leaflet-side-by-side';\nimport 'leaflet-loading';\nimport 'leaflet-loading/src/Control.Loading.css';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\n\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css'; // eslint-disable-line import/no-extraneous-dependencies\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'; // eslint-disable-line import/no-extraneous-dependencies\nimport turfDifference from '@turf/difference';\n\nimport countries from '@/assets/countries.json';\nimport gsaFile from '@/assets/gsa_data.json';\n\n\nconst emptyF = {\n  type: 'FeatureCollection',\n  features: [],\n};\nlet dataF = emptyF;\nlet compareF = emptyF;\n\nexport default {\n  props: [\n    'currentIndicator',\n  ],\n  components: {\n    LMap,\n    LTileLayer,\n    LWMSTileLayer,\n    LGeoJson,\n    LCircleMarker,\n    LControlLayers,\n    LControlAttribution,\n    LControlZoom,\n    LLayerGroup,\n    LFeatureGroup,\n    LControl,\n    LTooltip,\n    'l-marker-cluster': Vue2LeafletMarkerCluster,\n  },\n  data() {\n    return {\n      map: null,\n      compareLayerKeyXYZ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n      dataLayerKeyXYZ: [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55],\n      dataJsonKey: 0,\n      compareJsonKey: -1,\n      zoom: null,\n      center: null,\n      bounds: null,\n      enableCompare: false,\n      opacityTerrain: [1],\n      opacityOverlay: [1],\n      tilePane: 'tilePane',\n      overlayPane: 'overlayPane',\n      markerPane: 'markerPane',\n      shadowPane: 'shadowPane',\n      tooltipPane: 'tooltipPane',\n      popupPane: 'popupPane',\n      legendExpanded: false,\n      slider: null,\n      drawControl: null,\n      renderTrashBin: false,\n      defaultMapOptions: {\n        attributionControl: false,\n        zoomControl: false,\n      },\n      dataLayerTime: null,\n      compareLayerTime: null,\n      dataLayerIndex: 0,\n      compareLayerIndex: 0,\n      dataFeaturesCount: 0,\n      compareFeaturesCount: 0,\n      selectedCountry: null,\n      selectedBorder: null,\n      selectedLayer: null,\n    };\n  },\n  computed: {\n    ...mapState('config', ['appConfig', 'baseConfig']),\n    ...mapGetters('indicators', [\n      'getIndicatorFilteredInputData',\n    ]),\n    countriesJson() {\n      return countries;\n    },\n    gsaJson() {\n      return gsaFile;\n    },\n    countriesStyle() {\n      return {\n        color: '#222',\n        weight: 1,\n        fillColor: '#fff',\n        opacity: 1,\n        fillOpacity: 0.5,\n      };\n    },\n    dataJsonComputed: {\n      // to avoid each of thousands of geojson features have its own\n      // getter/setter set by vue - freezing the app on large number of pts\n      // we manually rerender relevant vue components anyway\n      get: () => this.getDataF(),\n      set: (v) => {\n        dataF = v;\n      },\n    },\n    compareJsonComputed: {\n      get: () => this.getCompareF(),\n      set: (v) => {\n        compareF = v;\n      },\n    },\n    subAoiInverseStyle() {\n      return {\n        stroke: false,\n        fillColor: this.getIndicatorColor('primary'),\n        fillOpacity: this.mergedConfigs()[0].subAoiFillOpacity || 0.5,\n      };\n    },\n    baseLayers() {\n      // expects an array of objects\n      return this.mergedConfigs()[0].baseLayers || this.baseConfig.baseLayersRightMap;\n    },\n    overlayLayers() {\n      return this.mergedConfigs()[0].overlayLayers || this.baseConfig.overlayLayersRightMap;\n    },\n    mapDefaults() {\n      return {\n        ...this.baseConfig.mapDefaults,\n        ...this.mergedConfigs()[0],\n      };\n    },\n    countrySelection() {\n      return this.mergedConfigs()[0].countrySelection;\n    },\n    borderSelection() {\n      return this.mergedConfigs()[0].borderSelection;\n    },\n    indDefinition() {\n      return this.baseConfig.indicatorsDefinition[this.indicator.indicator];\n    },\n    additionalMapTimes() {\n      return this.baseConfig.additionalMapTimes && this.baseConfig.additionalMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    excludeMapTimes() {\n      return this.baseConfig.excludeMapTimes && this.baseConfig.excludeMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    replaceMapTimes() {\n      return this.baseConfig.replaceMapTimes && this.baseConfig.replaceMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    indicator() {\n      return this.getIndicatorFilteredInputData(this.currentIndicator || null);\n    },\n    showAoi() {\n      return this.aoi && (!this.subAoi || this.subAoi.features.length === 0);\n    },\n    validDrawnArea() {\n      // allows for further validation on area size etc.\n      return this.drawnArea !== null;\n    },\n    drawnArea() {\n      return this.$store.state.features.selectedArea;\n    },\n    customAreaFilter() {\n      return this.mergedConfigs()[0].customAreaFeatures\n        || this.mergedConfigs()[0].customAreaIndicator;\n    },\n    usedTimes() {\n      let times = this.indicator.time;\n      let eoSensor = Array.isArray(this.indicator.eoSensor) && this.indicator.eoSensor;\n      let inputData = Array.isArray(this.indicator.inputData) && this.indicator.inputData;\n      let colorCode = Array.isArray(this.indicator.colorCode) && this.indicator.colorCode;\n      // completely replace given times or eoSensor\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.time)) {\n        times = this.replaceMapTimes.time;\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.eoSensor)) {\n        eoSensor = this.replaceMapTimes.eoSensor; // just for display\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.inputData)) {\n        inputData = this.replaceMapTimes.inputData;\n        // needs to be used unless indicator.display is used (that overrides it)\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.colorCode)) {\n        colorCode = this.replaceMapTimes.colorCode;\n      }\n      if (this.additionalMapTimes) {\n        // add additional times and eoSensor to original arrays\n        // sort time ascending and sort arrays based on time array via helper list combining all\n        const dtObjects = this.additionalMapTimes.time.map((t) => DateTime.fromISO(t));\n        const mergedTimes = times.concat(dtObjects);\n        const mergedSensors = eoSensor.concat(this.additionalMapTimes.eoSensor);\n        const mergedInputData = inputData.concat(this.additionalMapTimes.inputData);\n        const mergedColorCode = colorCode.concat(this.additionalMapTimes.colorCode);\n        // combine the arrays\n        const list = [];\n        for (let j = 0; j < mergedTimes.length; j++) {\n          list.push({\n            time: mergedTimes[j],\n            eoSensor: mergedSensors[j],\n            inputData: mergedInputData[j],\n            colorCode: mergedColorCode[j],\n          });\n        }\n        // sort mapping by time asc\n        list.sort((a, b) => (a.time.toMillis() - b.time.toMillis()));\n        // separate them back out\n        for (let k = 0; k < list.length; k++) {\n          mergedTimes[k] = list[k].time;\n          mergedSensors[k] = list[k].eoSensor;\n          mergedInputData[k] = list[k].inputData;\n          mergedColorCode[k] = list[k].colorCode;\n        }\n        times = mergedTimes;\n        eoSensor = mergedSensors;\n        inputData = mergedInputData;\n        colorCode = mergedColorCode;\n      }\n      if (this.excludeMapTimes && Array.isArray(this.excludeMapTimes)) {\n        // exclude times and respective entries from other arrays\n        const dtObjects = this.excludeMapTimes.map((t) => DateTime.fromISO(t));\n        const indToDelete = times.reduce((a, e, i) => {\n          // find if any time is in to be deleted\n          const found = dtObjects.find((time) => time.toMillis() === e.toMillis());\n          if (typeof found !== 'undefined') {\n            // add its index to list\n            a.push(i);\n          }\n          return a;\n        }, []);\n        // set items in all arrays to null\n        indToDelete.forEach((i) => {\n          times[i] = null;\n          if (typeof eoSensor[i] !== 'undefined') {\n            eoSensor[i] = null;\n          }\n          if (typeof inputData[i] !== 'undefined') {\n            inputData[i] = null;\n          }\n          if (typeof colorCode[i] !== 'undefined') {\n            colorCode[i] = null;\n          }\n        });\n        // filter out nulls\n        times = times.filter((e) => e !== null);\n        eoSensor = eoSensor.filter((e) => e !== null);\n        inputData = inputData.filter((e) => e !== null);\n        colorCode = colorCode.filter((e) => e !== null);\n      }\n      return {\n        time: times, eoSensor, inputData, colorCode,\n      };\n    },\n    arrayOfObjects() {\n      const selectionOptions = [];\n      for (let i = 0; i < this.usedTimes.time.length; i += 1) {\n        let label = this.getTimeLabel(this.usedTimes.time[i]);\n        if (this.usedTimes.eoSensor) {\n          const eoSensor = this.usedTimes.eoSensor.length === 1\n            ? this.usedTimes.eoSensor[0]\n            : this.usedTimes.eoSensor[i];\n          label += ` - ${eoSensor}`;\n        }\n        selectionOptions.push({\n          value: this.usedTimes.time[i],\n          name: label,\n        });\n      }\n      return selectionOptions;\n    },\n    currentTime() {\n      let returnTime = this.usedTimes.time[this.usedTimes.time.length - 1];\n      if (this.dataLayerTime !== null) {\n        returnTime = this.dataLayerTime;\n      }\n      return returnTime;\n    },\n    currentCompareTime() {\n      let returnTime = this.getInitialCompareTime();\n      if (this.compareLayerTime !== null) {\n        returnTime = this.compareLayerTime;\n      }\n      if (this.indicator.compareDisplay) {\n        // shared time on both layers in case of compareDisplay being set\n        returnTime = this.dataLayerTime;\n      }\n      return returnTime;\n    },\n    aoi() {\n      return this.indicator.aoi;\n    },\n    subAoi() {\n      return this.indicator.subAoi;\n    },\n    subAoiInverse() {\n      // create an inverse of subaoi, using difference of whole world and subaoi\n      const subaoiInv = JSON.parse(JSON.stringify(this.subAoi));\n      // both Object.assign({}, this.subAoi) and { ...this.subAoi } create shallow copy\n      if (subaoiInv.features.length === 1) {\n        const globalBox = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]]],\n          },\n        };\n        const diff = turfDifference(globalBox, subaoiInv.features[0]);\n        subaoiInv.features[0] = diff;\n      }\n      return subaoiInv;\n    },\n    clusterOptions() {\n      return {\n        disableClusteringAtZoom: 13,\n        animate: false,\n        // zoomToBoundsOnClick: false,\n        iconCreateFunction(cluster) { // eslint-disable-line func-names\n          // modified selected cluster style\n          const childCount = cluster.getChildCount();\n          return new DivIcon({\n            html: `<div><span>${childCount}</span></div>`,\n            className: 'marker-cluster',\n            iconSize: new Point(40, 40),\n          });\n        },\n        polygonOptions: {\n          fillColor: this.appConfig.branding.primaryColor,\n          color: this.appConfig.branding.primaryColor,\n          weight: 0.5,\n          opacity: 1,\n          fillOpacity: 0.3,\n          dashArray: 4,\n        },\n      };\n    },\n    drawOptions() {\n      return {\n        position: 'topright',\n        draw: {\n          polyline: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polygon: {\n            shapeOptions: {\n              color: this.appConfig.branding.primaryColor,\n            },\n          },\n          rectangle: {\n            showArea: false,\n            shapeOptions: {\n              color: this.appConfig.branding.primaryColor,\n            },\n          },\n        },\n      };\n    },\n  },\n  mounted() {\n    this.dataLayerIndex = this.usedTimes.time.length - 1;\n    this.dataLayerTime = { value: this.usedTimes.time[this.dataLayerIndex] };\n    this.compareLayerTime = { value: this.getInitialCompareTime() };\n  },\n  methods: {\n    createLatLng(latlng) {\n      const llobj = latlng.split(',').map(Number);\n      console.log(llobj);\n      return llobj;\n    },\n    zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    onMapReady() {\n      this.map = this.$refs.map.mapObject;\n      const layerButtons = document.querySelectorAll('.leaflet-control-layers-toggle');\n      layerButtons.forEach((lB) => lB.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"${this.appConfig.branding.primaryColor}\" width=\"32px\" height=\"32px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"/></svg>`); // eslint-disable-line\n      // update leaflet controls\n      L.control.mousePosition({ // eslint-disable-line no-undef\n        emptyString: '',\n        formatter: (lon, lat) => `${lon.toFixed(3)}, ${lat.toFixed(3)}`,\n        position: 'bottomright',\n      }).addTo(this.map);\n      // hide attribution under icon\n      this.map.attributionControl._update = function () { // eslint-disable-line\n        const attribs = [];\n        const kk = Object.keys(this._attributions);\n        for (let i = 0; i < kk.length; i += 1) {\n          if (this._attributions[kk[i]]) {\n            attribs.push(kk[i]);\n          }\n        }\n        const prefixAndAttribs = [];\n        if (this.options.prefix) {\n          prefixAndAttribs.push(this.options.prefix);\n        }\n        if (attribs.length) {\n          prefixAndAttribs.push(attribs.join(', '));\n        }\n        this._container.innerHTML = `<div class='attribution-body'>${prefixAndAttribs.join(' | ')}</div><div class='attribution-icon'>ℹ</div>`;\n      };\n      this.map.attributionControl._update();\n      // add loading indicator\n      L.Control.loading({\n        position: 'bottomleft',\n        delayIndicator: 200,\n      }).addTo(this.map);\n      // add A/B slider\n      const leftLayers = this.extractActualLayers(this.$refs.compareLayers);\n      const rightLayers = this.extractActualLayers(this.$refs.dataLayers);\n      this.slider = L.control.sideBySide(leftLayers, rightLayers);\n      this.drawControl = new L.Control.Draw(this.drawOptions);\n      this.map.on(L.Draw.Event.CREATED, function (e) { // eslint-disable-line\n        // set global area geometry as json\n        this.$store.commit('features/SET_SELECTED_AREA', e.layer.toGeoJSON().geometry);\n      }.bind(this)); // eslint-disable-line\n      // only draw one feature at a time\n      this.map.on(L.Draw.Event.DRAWSTART, function () { // eslint-disable-line\n        this.clearCustomAreaFilter();\n      }.bind(this));\n\n      this.initialDrawSelectedArea();\n      this.onResize();\n      if (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea) {\n        this.fetchFeatures('data');\n      }\n      setTimeout(() => {\n        this.flyToBounds();\n      }, 100);\n    },\n    onResize() {\n      // to fix panel size for reference image window\n      if (this.map) {\n        setTimeout(() => {\n          this.map.invalidateSize();\n        }, 100);\n      }\n    },\n    initialDrawSelectedArea() {\n      if (this.customAreaFilter) {\n        // add draw controls\n        this.drawControl.addTo(this.map);\n        this.renderTrashBin = true;\n        this.updateSelectedAreaFeature();\n      }\n    },\n    updateSelectedAreaFeature() {\n      let ftrs = null;\n      if (this.validDrawnArea) {\n        this.fetchFeatures('data');\n        if (this.enableCompare) {\n          this.fetchFeatures('compare');\n        }\n        ftrs = { ...this.drawnArea };\n      }\n      if (ftrs) {\n        // add feature to be drawn into layer\n        this.$refs.customAreaFilterFeatures.mapObject.addLayer(geoJson(ftrs, {\n          style: {\n            color: this.appConfig.branding.primaryColor,\n          },\n        }));\n      } else {\n        this.$refs.customAreaFilterFeatures.mapObject.clearLayers();\n      }\n    },\n    countriesOptions() {\n      const currentIndicator = this.indicator;\n      return {\n        onEachFeature: function onEachFeature(feature, layer) {\n          layer.bindTooltip(\n            () => feature.properties.name,\n            { direction: 'top', sticky: true },\n          );\n\n          layer.on('click', () => {\n            const countryA2 = feature.properties.alpha2;\n            this.fetchMobilityData(countryA2, currentIndicator.aoiID);\n            if (this.selectedLayer !== null) {\n              this.selectedLayer.setStyle({\n                color: '#222',\n                weight: 1,\n                fillColor: '#fff',\n                opacity: 1,\n                fillOpacity: 0.5,\n              });\n            }\n            this.selectedCountry = countryA2;\n            this.selectedLayer = layer;\n            this.popupName = feature.properties.name;\n          });\n          layer.on('mouseover', (e) => {\n            const currLayer = e.target;\n            currLayer.setStyle({\n              weight: 2,\n              color: this.$vuetify.theme.currentTheme.primary,\n              fillColor: this.$vuetify.theme.currentTheme.primary,\n              fillOpacity: 0.7,\n            });\n\n            if (!L.Browser.ie && !L.Browser.opera) {\n              layer.bringToFront();\n            }\n          });\n          layer.on('mouseout', (e) => {\n            const currLayer = e.target;\n            if (this.selectedCountry !== feature.properties.alpha2) {\n              currLayer.setStyle({\n                color: '#222',\n                weight: 1,\n                fillColor: '#fff',\n                opacity: 1,\n                fillOpacity: 0.5,\n              });\n            }\n          });\n        }.bind(this),\n      };\n    },\n    featureOptions(side) {\n      const style = (this.mergedConfigs(side)[0].features && this.mergedConfigs(side)[0].features.style) ? this.mergedConfigs(side)[0].features.style : {}; // eslint-disable-line\n      return {\n        onEachFeature: function onEachFeature(feature, layer) {\n          // if featuresParameters available, show only properties from mapping, otherwise dump all\n          const allowedParams = this.mergedConfigs(side)[0].features ? this.mergedConfigs(side)[0].features.allowedParameters : null; // eslint-disable-line\n          const allKeys = Object.keys(feature.properties);\n          let tooltip = '';\n          for (let i = 0; i < allKeys.length; i++) {\n            if (!allowedParams || (typeof allowedParams === 'object' && Object.keys(allowedParams).includes(allKeys[i]))\n              || (Array.isArray(allowedParams) && allowedParams.includes(allKeys[i]))) {\n              tooltip += `<span><b>${allKeys[i]}</b>: ${feature.properties[allKeys[i]]}</span><br>`;\n            }\n          }\n          if (tooltip !== '') {\n            layer.bindTooltip(tooltip, { pane: this.popupPane });\n          }\n          // to make clustering work\n          if (this.mergedConfigs()[0].featuresClustering) {\n            layer.getLatLng = () => geoJson(feature).getBounds().getCenter(); //eslint-disable-line\n            layer.setLatLng = () => { }; //eslint-disable-line\n            layer._latlng = layer.getLatLng(); //eslint-disable-line\n          }\n        }.bind(this),\n        // point circle marker styling\n        pointToLayer: function (feature, latlng) { // eslint-disable-line\n          return circleMarker(latlng, {\n            radius: style.radius || 8,\n            color: style.color || '#FFA500',\n            weight: style.weight || 2,\n            opacity: style.opacity || 1,\n            dashArray: style.dashArray || null,\n            dashOffset: style.dashOffset || null,\n            fillOpacity: style.fillOpacity || 1,\n            fillColor: style.fillColor || '#FFA500',\n            fill: style.fill || true,\n            pane: side === 'data' ? this.tooltipPane : this.shadowPane,\n          });\n        }.bind(this),\n        // polygon and line styling\n        style: {\n          color: style.color || '#FFA500',\n          weight: style.weight || 2,\n          opacity: style.opacity || 1,\n          dashArray: style.dashArray || null,\n          dashOffset: style.dashOffset || null,\n          fillOpacity: style.fillOpacity || 0,\n          fillColor: style.fillColor || '#FFA500',\n          fill: style.fill || true,\n        },\n      };\n    },\n    getColorCode(side) {\n      const i = side === 'compare' ? this.compareLayerIndex : this.dataLayerIndex;\n      let currentValue = null;\n      // compensate for color code with only one entry, still showing it\n      if (this.usedTimes.colorCode) {\n        const colors = this.usedTimes.colorCode;\n        if (Array.isArray(colors) && colors.length === 1) {\n          currentValue = colors[0]; // eslint-disable-line prefer-destructuring\n        } else if (Array.isArray(colors) && colors[i]) {\n          currentValue = colors[i]; // eslint-disable-line prefer-destructuring\n        }\n      }\n      return currentValue;\n    },\n    getAoiFill(side) {\n      const currentValue = this.getColorCode(side);\n      return currentValue\n        ? this.getIndicatorColor(currentValue)\n        : this.appConfig.branding.primaryColor;\n    },\n    subAoiStyle(side) {\n      const currentValue = this.getColorCode(side);\n      return {\n        color: currentValue\n          ? this.getIndicatorColor(currentValue)\n          : this.appConfig.branding.primaryColor,\n        weight: 3,\n        fill: false,\n      };\n    },\n    configFromInputData(side) {\n      const i = side === 'compare' ? this.compareLayerIndex : this.dataLayerIndex;\n      const inputData = this.usedTimes.inputData.length === 1\n        ? this.usedTimes.inputData[0]\n        : this.usedTimes.inputData[i];\n      if (this.baseConfig.layerNameMapping.hasOwnProperty(inputData)) { // eslint-disable-line\n        let config = this.baseConfig.layerNameMapping[inputData];\n        if (!Array.isArray(config)) {\n          // assure array is returned\n          config = [config];\n        }\n        return config;\n      }\n      // empty config used later for merging\n      return [];\n    },\n    getCombinedWMSLayers(side) {\n      const combLayers = this.mergedConfigs(side).filter((l) => (\n        l.protocol === 'WMS' && Object.keys(l).indexOf('combinedLayers') !== -1\n      ));\n      return combLayers;\n    },\n    getSimpleWMSLayers(side) {\n      const combLayers = this.mergedConfigs(side).filter((l) => (\n        l.protocol === 'WMS' && Object.keys(l).indexOf('combinedLayers') === -1\n      ));\n      return combLayers;\n    },\n    mergedConfigs(side = 'data') {\n      // first check if special compare layer configured\n      let displayTmp = side === 'compare' && this.indicator.compareDisplay ? this.indicator.compareDisplay : this.indicator.display;\n      // following configuration merging is done:\n      // defaultLayersDisplay (to avoid having to configure it before)\n      // indDefinition - indicator code specific configuration\n      // display - coming from js configuration - esa.js OR\n      // configFromInputData - coming from input data reference from csvs\n\n      if (displayTmp) {\n        // from layer configuration\n        if (!Array.isArray(displayTmp)) {\n          // always make an Array of layer configurations\n          displayTmp = [displayTmp];\n        }\n      }\n      const finalConfigs = [];\n      let usedConfigForMerge = {};\n      let name = this.indicator.description;\n\n      if (!displayTmp && this.configFromInputData(side).length === 0) {\n        // no additional config specified, use defaults\n        usedConfigForMerge = [{ name }];\n      } else if (!displayTmp) {\n        // use configFromInputData\n        usedConfigForMerge = this.configFromInputData(side);\n      } else {\n        // use displayTmp even if configFromInputData set too\n        usedConfigForMerge = displayTmp;\n      }\n      usedConfigForMerge.forEach((item) => {\n        // merge configs for each layer\n        name = item.name || name;\n        // Check to see if we have grouped layers, if we do we need to add\n        // the default to them too\n        const extendedItem = item;\n        if (Object.keys(item).indexOf('combinedLayers') !== -1) {\n          for (let i = 0; i < item.combinedLayers.length; i += 1) {\n            extendedItem.combinedLayers[i] = {\n              ...this.baseConfig.defaultLayersDisplay,\n              ...this.indDefinition,\n              ...item.combinedLayers[i],\n            };\n          }\n        }\n        finalConfigs.push({\n          ...this.baseConfig.defaultLayersDisplay,\n          ...this.indDefinition,\n          ...extendedItem,\n          name,\n        });\n      });\n      return finalConfigs;\n    },\n    flyToBounds() {\n      // zooms to subaoi if present or area around aoi if not\n      const boundsPad = this.mergedConfigs()[0].largeSubAoi ? 5 : (this.mergedConfigs()[0].midSubAoi ? 1 : 0.15); // eslint-disable-line\n      if (this.subAoi && this.subAoi.features.length > 0) {\n        const viewBounds = this.mergedConfigs()[0].presetView\n          ? geoJson(this.mergedConfigs()[0].presetView).getBounds()\n          : geoJson(this.subAoi).getBounds();\n        const bounds = geoJson(this.subAoi).getBounds();\n        const cornerMax1 = latLng([bounds.getSouth() - boundsPad, bounds.getWest() - boundsPad]);\n        const cornerMax2 = latLng([bounds.getNorth() + boundsPad, bounds.getEast() + boundsPad]);\n        const boundsMax = latLngBounds(cornerMax1, cornerMax2);\n        this.map.fitBounds(viewBounds);\n        // limit user movement around map\n        this.map.setMaxBounds(boundsMax);\n        if (this.mergedConfigs()[0].largeSubAoi) {\n          this.map.setMinZoom(2);\n        } else if (this.mergedConfigs()[0].midSubAoi) {\n          this.map.setMinZoom(9);\n        } else {\n          this.map.setMinZoom(13);\n        }\n      } else if (this.mergedConfigs()[0].presetView) {\n        // if only preset view move map there without limiting movement\n        const viewBounds = geoJson(this.mergedConfigs()[0].presetView).getBounds();\n        this.map.fitBounds(viewBounds);\n      } else if (this.aoi) {\n        const cornerMax1 = latLng([this.aoi.lat - boundsPad, this.aoi.lng - boundsPad]);\n        const cornerMax2 = latLng([this.aoi.lat + boundsPad, this.aoi.lng + boundsPad]);\n        const boundsMax = latLngBounds(cornerMax1, cornerMax2);\n        this.map.setZoom(16);\n        this.map.panTo(this.aoi);\n        if (this.mergedConfigs()[0].largeSubAoi) {\n          this.map.setMinZoom(2);\n        } else if (this.mergedConfigs()[0].midSubAoi) {\n          this.map.setMinZoom(9);\n        } else {\n          this.map.setMinZoom(12);\n        }\n        // limit user movement around map\n        this.map.setMaxBounds(boundsMax);\n      } else {\n        // zoom to default bbox from config\n        this.map.setMinZoom(this.mapDefaults.minMapZoom);\n        this.map.setMaxBounds(null);\n        this.map.fitBounds(latLngBounds(this.mapDefaults.bounds));\n      }\n    },\n    getTimeLabel(time) {\n      if (Array.isArray(time) && time.length === 2) {\n        // show start - end\n        if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n          return time.map((d) => DateTime.fromISO(d).toISO({ suppressMilliseconds: true })).join(' - ');\n        }\n        return time.map((d) => DateTime.fromISO(d).toISODate()).join(' - ');\n      } else if (time instanceof DateTime) { // eslint-disable-line no-else-return\n        if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n          return time.toISO({ suppressMilliseconds: true });\n        }\n        return time.toISODate();\n      }\n      if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n        return DateTime.fromISO(time).toISO({ suppressMilliseconds: true });\n      }\n      return DateTime.fromISO(time).toISODate();\n    },\n    layerOptions(time, sourceOptionsObj) {\n      const additionalSettings = {};\n      if (Object.prototype.hasOwnProperty.call(sourceOptionsObj, 'siteMapping')) {\n        const currSite = sourceOptionsObj.siteMapping(\n          this.indicator.aoiID,\n        );\n        additionalSettings.site = currSite;\n      }\n      if (typeof sourceOptionsObj.minZoom !== 'undefined') {\n        additionalSettings.minZoom = sourceOptionsObj.minZoom;\n      }\n      if (typeof sourceOptionsObj.maxZoom !== 'undefined') {\n        additionalSettings.maxZoom = sourceOptionsObj.maxZoom;\n      }\n      if (typeof sourceOptionsObj.minNativeZoom !== 'undefined') {\n        additionalSettings.minNativeZoom = sourceOptionsObj.minNativeZoom;\n      }\n      if (typeof sourceOptionsObj.maxNativeZoom !== 'undefined') {\n        additionalSettings.maxNativeZoom = sourceOptionsObj.maxNativeZoom;\n      }\n      if (typeof sourceOptionsObj.bounds !== 'undefined') {\n        additionalSettings.bounds = sourceOptionsObj.bounds;\n      }\n      if (time !== null) {\n        // time as is gets automatically injected to WMS query OR xyz url {time} template\n        const fixTime = time.value || time;\n        additionalSettings.time = typeof sourceOptionsObj.dateFormatFunction === 'function'\n          ? sourceOptionsObj.dateFormatFunction(fixTime) : fixTime;\n        if (sourceOptionsObj.features) {\n          additionalSettings.featuresTime = typeof sourceOptionsObj.features.dateFormatFunction === 'function'\n            ? sourceOptionsObj.features.dateFormatFunction(fixTime) : fixTime;\n        }\n      }\n      return additionalSettings;\n    },\n    dataLayerTimeSelection(payload) {\n      // Different object returned either by arrow use or by dropdown use\n      if (Array.isArray(payload) || !(payload.value)) {\n        this.dataLayerTime = { value: payload, name: `${payload}` };\n      } else {\n        this.dataLayerTime = payload;\n      }\n      const newIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = newIndex;\n      this.refreshLayers('data');\n      this.$nextTick(() => {\n        this.slider.setRightLayers(\n          this.extractActualLayers(this.$refs.dataLayers),\n        );\n      });\n      if (this.indicator.compareDisplay) {\n        // shared time on both sides in case of compareDisplay being set\n        this.compareLayerTime = this.dataLayerTime;\n        this.compareLayerIndex = newIndex;\n        this.refreshLayers('compare');\n        this.$nextTick(() => {\n          this.slider.setLeftLayers(\n            this.extractActualLayers(this.$refs.compareLayers),\n          );\n        });\n      }\n    },\n    extractActualLayers(group) {\n      let actualLayers = [];\n      if (group.$children.length > 0) {\n        group.$children.forEach((child) => {\n          actualLayers = actualLayers.concat(this.extractActualLayers(child));\n        });\n      } else {\n        actualLayers.push(group.mapObject);\n      }\n      return actualLayers;\n    },\n    compareLayerTimeSelection(payload) {\n      // Different object returned either by arrow use or by dropdown use\n      if (Array.isArray(payload) || !(payload.value)) {\n        this.compareLayerTime = { value: payload, name: `${payload}` };\n      } else {\n        this.compareLayerTime = payload;\n      }\n      const newIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = newIndex;\n      this.refreshLayers('compare');\n      this.$nextTick(() => {\n        this.slider.setLeftLayers(\n          this.extractActualLayers(this.$refs.compareLayers),\n        );\n      });\n    },\n    dataLayerReduce() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = currentIndex - 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex - 1]);\n    },\n    dataLayerIncrease() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = currentIndex + 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex + 1]);\n    },\n    compareLayerReduce() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = currentIndex - 1;\n      this.compareLayerTimeSelection(this.arrayOfObjects[currentIndex - 1]);\n    },\n    compareLayerIncrease() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = currentIndex + 1;\n      this.compareLayerTimeSelection(this.arrayOfObjects[currentIndex + 1]);\n    },\n    getInitialCompareTime() {\n      // find closest entry one year before latest time\n      if (this.mergedConfigs()[0].largeTimeDuration) {\n        // if interval, use just start to get closest\n        const times = this.usedTimes.time.map((item) => (Array.isArray(item) ? item[0] : item));\n        const lastTimeEntry = DateTime.fromISO(times[times.length - 1]);\n        const oneYearBefore = lastTimeEntry.minus({ years: 1 });\n        // select closest to one year before\n        const closestOneYearBefore = times.find((item, i) => (\n          i === times.length - 1 || (\n            Math.abs(oneYearBefore.toMillis() - DateTime.fromISO(item).toMillis())\n            < Math.abs(oneYearBefore.toMillis() - DateTime.fromISO(times[i + 1]).toMillis())\n          )\n        ));\n        // Get index and return object from original times as there are also\n        // arrays of time tuple arrays\n        const foundIndex = times.indexOf(closestOneYearBefore);\n        return this.usedTimes.time[foundIndex];\n      }\n      // use first time\n      return this.usedTimes.time[0];\n    },\n    refreshGroup(group, time) {\n      // Group can also be an array depending on type\n      if (group) {\n        let toIterate;\n        if (Array.isArray(group)) {\n          toIterate = group;\n        } else {\n          toIterate = group.$children;\n        }\n        if (toIterate) {\n          toIterate.forEach((item) => {\n            // We check if we have a simple layer or a grouped layer\n            if (item.$children.length > 0) {\n              // This is a grouped layer, we iterate over the layers\n              item.$children.forEach((subItem) => {\n                // TODO: propsData do not have all the parameters we need (like dateFormatFunction)\n                // TODO extend this getting the mergedConfigs in a same way as when non-grouped\n                subItem.mapObject.setParams(this.layerOptions(\n                  time, subItem.$options.propsData,\n                ));\n                // force redraw of layer\n                subItem.$forceUpdate();\n              });\n            } else {\n              const originalConfig = this.mergedConfigs().find((config) => (\n                config.name === item.name\n              ));\n              item.mapObject.setParams(this.layerOptions(\n                time, originalConfig,\n              ));\n              // force redraw of layer\n              item.$forceUpdate();\n            }\n          });\n        }\n      }\n    },\n    refreshLayers(side) {\n      // compare(left) or data(right)\n      if (side === 'compare' || this.indicator.compareDisplay) {\n        this.refreshGroup(this.$refs.compareLayerArrayWMS, this.currentCompareTime);\n        if (this.$refs.compareLayerArrayXYZ) {\n          this.$refs.compareLayerArrayXYZ.forEach((item) => {\n            const originalIndex = parseInt(item.$attrs['data-key-originalindex'], 10);\n            this.compareLayerKeyXYZ[originalIndex] = Math.random();\n          });\n        }\n        if (!this.mergedConfigs()[0].featuresStatic\n          && (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea)) {\n          if (this.mergedConfigs()[0].featuresClustering) {\n            this.$refs.featuresCompareCluster.mapObject.clearLayers();\n          }\n          this.fetchFeatures('compare');\n        }\n      }\n      if (side === 'data') {\n        this.refreshGroup(this.$refs.dataLayerArrayWMS, this.currentTime);\n        if (this.$refs.dataLayerArrayXYZ) {\n          this.$refs.dataLayerArrayXYZ.forEach((item) => {\n            const originalIndex = parseInt(item.$attrs['data-key-originalindex'], 10);\n            this.dataLayerKeyXYZ[originalIndex] = Math.random();\n          });\n        }\n        if (!this.mergedConfigs()[0].featuresStatic\n          && (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea)) {\n          if (this.mergedConfigs()[0].featuresClustering) {\n            this.$refs.featuresDataCluster.mapObject.clearLayers();\n          }\n          this.fetchFeatures('data');\n        }\n      }\n    },\n    fetchFeatures(side) {\n      if (this.mergedConfigs(side)[0].features) {\n        const options = this.layerOptions(side === 'compare' ? this.currentCompareTime : this.currentTime,\n          this.mergedConfigs(side)[0]);\n        // add custom area if present\n        let customArea = {};\n        if (this.validDrawnArea) {\n          customArea = typeof this.mergedConfigs()[0].features.areaFormatFunction === 'function'\n            ? this.mergedConfigs()[0].features.areaFormatFunction(this.drawnArea)\n            : { area: JSON.stringify(this.drawnArea) };\n        }\n        const templateSubst = {\n          ...this.indicator,\n          ...options,\n          ...customArea,\n        };\n        const templateRe = /\\{ *([\\w_ -]+) *\\}/g;\n        const url = template(templateRe, this.mergedConfigs()[0].features.url, templateSubst);\n        let requestBody = null;\n        if (this.mergedConfigs()[0].features.requestBody) {\n          requestBody = {\n            ...this.mergedConfigs()[0].features.requestBody,\n          };\n          const params = Object.keys(requestBody);\n          for (let i = 0; i < params.length; i += 1) {\n            // substitute template strings with values\n            requestBody[params[i]] = template(templateRe, requestBody[params[i]], templateSubst);\n          }\n        }\n        const requestOpts = {\n          credentials: 'same-origin',\n          method: this.mergedConfigs()[0].features.requestMethod || 'GET',\n          headers: this.mergedConfigs()[0].features.requestHeaders || {},\n        };\n        if (requestBody) {\n          requestOpts.body = JSON.stringify(requestBody);\n        }\n        this.map.fireEvent('dataloading');\n        fetch(url, requestOpts).then((r) => r.json())\n          .then((rawdata) => {\n            // if custom response -> feature mapping function configured, apply it\n            if (typeof this.mergedConfigs()[0].features.callbackFunction === 'function') {\n              return this.mergedConfigs()[0].features.callbackFunction(rawdata);\n            }\n            return rawdata;\n          })\n          .then((data) => {\n            this.map.fireEvent('dataload');\n            this.updateJsonLayers(data, side);\n          })\n          .catch(() => {\n            this.map.fireEvent('dataload');\n            this.updateJsonLayers(emptyF, side);\n          });\n      } else {\n        this.updateJsonLayers(emptyF, side);\n      }\n    },\n    selectGSAIndicator(feature) {\n      this.selectedBorder = feature.borderId;\n      const dataUrl = `./eodash-data/internal/${feature.borderId}.json`;\n      this.map.fireEvent('dataloading');\n      fetch(dataUrl).then((r) => r.json())\n        .then((indicator) => {\n          const returnIndicator = {};\n          returnIndicator.values = { ...indicator };\n          returnIndicator.indicator = 'GSA';\n          // Get all times of available border crossings to allow finding min max\n          returnIndicator.time = [];\n          Object.keys(indicator).forEach((key) => {\n            const currVals = indicator[key].values;\n            for (let i = 0; i < currVals.length; i += 1) {\n              returnIndicator.time.push(DateTime.fromISO(currVals[i].timestamp));\n            }\n          });\n          returnIndicator.measurement = [0];\n          returnIndicator.title = feature.name;\n          returnIndicator.yAxis = this.indicator.yAxis;\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', returnIndicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          // It seems data could not be loaded lets show a no data found message\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', { isEmpty: true },\n          );\n          console.log(err);\n        });\n    },\n    fetchMobilityData(countryCode, aoiID) {\n      const dataUrl = `./eodash-data/internal/${countryCode}-${aoiID}.json`;\n      this.map.fireEvent('dataloading');\n      fetch(dataUrl).then((r) => r.json())\n        .then((indicator) => {\n          indicator.indicator = aoiID; // eslint-disable-line\n          indicator.time = indicator.Values.map((row) => DateTime.fromISO(row.date)); // eslint-disable-line\n          indicator.measurement = [0]; // eslint-disable-line\n          indicator.country = indicator.CountryCode; // eslint-disable-line\n          indicator.title = indicator.CountryName; // eslint-disable-line\n          indicator.yAxis = this.indicator.yAxis; // eslint-disable-line\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', indicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          // It seems data could not be loaded lets show a no data found message\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', { isEmpty: true },\n          );\n          console.log(err);\n        });\n    },\n    fetchCustomAreaIndicator() {\n      const options = this.layerOptions(this.currentTime, this.mergedConfigs()[0]);\n      // add custom area if present\n      let customArea = {};\n      if (this.validDrawnArea) {\n        customArea = typeof this.mergedConfigs()[0].areaIndicator.areaFormatFunction === 'function'\n          ? this.mergedConfigs()[0].areaIndicator.areaFormatFunction(this.drawnArea)\n          : { area: JSON.stringify(this.drawnArea) };\n      }\n      this.indicator.title = 'User defined area of interest';\n      const templateSubst = {\n        ...this.indicator,\n        ...options,\n        ...customArea,\n      };\n      const templateRe = /\\{ *([\\w_ -]+) *\\}/g;\n      const url = template(templateRe, this.mergedConfigs()[0].areaIndicator.url, templateSubst);\n      let requestBody = null;\n      if (this.mergedConfigs()[0].areaIndicator.requestBody) {\n        requestBody = {\n          ...this.mergedConfigs()[0].areaIndicator.requestBody,\n        };\n        const params = Object.keys(requestBody);\n        for (let i = 0; i < params.length; i += 1) {\n          // substitute template strings with values\n          if (typeof requestBody[params[i]] === 'string') {\n            requestBody[params[i]] = template(templateRe, requestBody[params[i]], templateSubst);\n          }\n          // Convert geojsons back to an object\n          if (params[i] === 'geojson') {\n            requestBody[params[i]] = JSON.parse(requestBody[params[i]]);\n          }\n        }\n      }\n      const requestOpts = {\n        credentials: 'same-origin',\n        method: this.mergedConfigs()[0].areaIndicator.requestMethod || 'GET',\n        headers: this.mergedConfigs()[0].areaIndicator.requestHeaders || {},\n      };\n      if (requestBody) {\n        requestOpts.body = JSON.stringify(requestBody);\n      }\n      this.map.fireEvent('dataloading');\n      fetch(url, requestOpts).then((r) => r.json())\n        .then((rawdata) => {\n          if (typeof this.mergedConfigs()[0].areaIndicator.callbackFunction === 'function') {\n            // merge data from current indicator data and new data from api\n            // returns new indicator object to set as custom area indicator\n            return this.mergedConfigs()[0].areaIndicator.callbackFunction(rawdata, this.indicator);\n          }\n          return rawdata;\n        })\n        .then((indicator) => {\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', indicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', null,\n          );\n          console.log(err);\n        });\n    },\n    clearCustomAreaFilter() {\n      this.$store.commit('features/SET_SELECTED_AREA', null);\n    },\n    getDataF() {\n      return dataF;\n    },\n    getCompareF() {\n      return compareF;\n    },\n    updateJsonLayers(ftrs, side) {\n      if (this.mergedConfigs()[0].featuresClustering) {\n        // markercluster needs manual adding of all geojsons it will show\n        // and cleanup of previous content\n        const geojsonFromData = geoJson(ftrs, {\n          ...this.featureOptions(side),\n          pane: side === 'data' ? this.tooltipPane : this.shadowPane,\n        });\n        if (this.$refs.featuresDataCluster) {\n          if (side === 'data') {\n            this.$refs.featuresDataCluster.mapObject.clearLayers();\n            this.$refs.featuresDataCluster.mapObject.addLayers([geojsonFromData]);\n            this.dataFeaturesCount = ftrs.features.length;\n          } else {\n            this.$refs.featuresCompareCluster.mapObject.clearLayers();\n            this.$refs.featuresCompareCluster.mapObject.addLayers([geojsonFromData]);\n            this.compareFeaturesCount = ftrs.features.length;\n          }\n        }\n      } else if (side === 'data') {\n        // normal geojson layer just needs manual refresh\n        this.dataJsonComputed = ftrs;\n        this.dataJsonKey = Math.random();\n        this.dataFeaturesCount = ftrs.features.length;\n      } else {\n        this.compareJsonComputed = ftrs;\n        this.compareJsonKey = Math.random();\n        this.compareFeaturesCount = ftrs.features.length;\n      }\n    },\n  },\n  watch: {\n    enableCompare(on) {\n      if (!on) {\n        if (this.slider !== null) {\n          this.map.removeControl(this.slider);\n          this.map.removeLayer(this.$refs.compareLayers.mapObject);\n        }\n      } else {\n        this.map.addLayer(this.$refs.compareLayers.mapObject);\n        if (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea) {\n          this.fetchFeatures('compare');\n        }\n        this.$nextTick(() => {\n          this.slider.setLeftLayers(\n            this.extractActualLayers(this.$refs.compareLayers),\n          );\n          this.slider.setRightLayers(\n            this.extractActualLayers(this.$refs.dataLayers),\n          );\n          this.slider.addTo(this.map);\n        });\n      }\n    },\n    drawnArea() {\n      // watch on drawn area prop change triggering update of draw layer, fetching custom features\n      this.updateSelectedAreaFeature();\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep .leaflet-tooltip-top {\n  background: #00000099;\n  border-radius: 3px;\n  color: #fff;\n  pointer-events: none;\n  white-space: nowrap;\n  border: none;\n  &:before {\n    border-top-color: #00000099;\n  }\n}\n::v-deep .leaflet-control-attribution:active :not(.attribution-icon),\n::v-deep .leaflet-control-attribution:hover :not(.attribution-icon),\n::v-deep .leaflet-control-attribution .attribution-icon {\n  display: inline-block;\n}\n::v-deep .leaflet-control-attribution :not(.attribution-icon),\n::v-deep .leaflet-control-attribution:active .attribution-icon,\n::v-deep .leaflet-control-attribution:hover .attribution-icon {\n  display: none;\n}\n::v-deep .attribution-icon {\n  font-size: 1.2em;\n  margin: 1px;\n}\n::v-deep .leaflet-control-mouseposition {\n  background-color: rgba(255, 255, 255, 0.8);\n  transform: translate3d(-8px, 32px, 0);\n  padding: 2px 4px;\n}\n::v-deep .leaflet-sbs-divider {\n  background-color: var(--v-primary-base);\n  opacity: 0.7;\n}\n::v-deep .leaflet-control-layers-toggle {\n  background-image: url('data:image/svg+xml;utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"%23003247\" width=\"32px\" height=\"32px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"/></svg>');\n}\n::v-deep .mdi-asterisk {\n  visibility: hidden;\n}\n::v-deep .leaflet-bar a, ::v-deep .leaflet-control-attribution {\n  color: var(--v-primary-base) !important;\n}\n::v-deep .leaflet-control-layers-toggle {\n  background-image: none;\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n::v-deep .leaflet-tooltip {\n  z-index: 700;\n}\n::v-deep .leaflet-draw-actions a {\n  background-color: var(--v-primary-base);\n  color: #fff;\n}\n::v-deep .marker-cluster {\n  background-color: rgba(#003247, 0.5);\n  div {\n    background-color: var(--v-primary-base);\n    span {\n      color: white;\n    }\n  }\n}\n.map-legend {\n  max-width: 20vw;\n  transition: max-width 0.5s ease-in-out;\n  cursor: pointer;\n}\n.map-legend-expanded {\n  width: initial;\n  max-width: 80%;\n}\n\n::v-deep .leaflet-top.leaflet-right {\n  margin-top: 45px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}