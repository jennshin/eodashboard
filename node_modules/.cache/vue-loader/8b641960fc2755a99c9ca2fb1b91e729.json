{"remainingRequest":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorFilters.vue?vue&type=style&index=0&id=6d55ddc8&lang=scss&scoped=true&","dependencies":[{"path":"/Users/8ps/Downloads/eodash-staging/app/src/components/IndicatorFilters.vue","mtime":1624532486000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/8ps/Downloads/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo6OnYtZGVlcCAudi1leHBhbnNpb24tcGFuZWwtY29udGVudF9fd3JhcCB7CiAgcGFkZGluZy1sZWZ0OiAwOwogIHBhZGRpbmctcmlnaHQ6IDA7Cn0KLnYtbGlzdC1pdGVtX19pY29uIC5mbGFnIHsKICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyYXk7CiAgYmFja2dyb3VuZC1wb3NpdGlvbi14OiAtMXB4Owp9Ci52LWFwcGxpY2F0aW9uLnRoZW1lLS1kYXJrIHsKICAudi1saXN0LWl0ZW1fX2ljb24gLmZsYWcgewogICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgfQp9Ci5pdGVtQWN0aXZlIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS12LXByaW1hcnktYmFzZSk7CiAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7CiAgLnYtbGlzdC1pdGVtX19pY29uIC5mbGFnIHsKICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OwogIH0KfQo6OnYtZGVlcCAuYXJjaGl2ZWQtaXRlbSB7CiAgb3BhY2l0eTogMC42NTsKfQo="},{"version":3,"sources":["IndicatorFilters.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IndicatorFilters.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div style=\"width: 100%\" class=\"fill-height\">\n    <v-tabs v-model=\"tab\" grow activeClass=\"tabActive\" icons-and-text>\n      <v-tab>\n        <v-badge\n          v-if=\"countrySelection !== 'all'\"\n          color=\"primary\"\n          icon=\"mdi-filter\"\n          offset-x=\"-37\"\n          offset-y=\"-26\"\n        >\n        </v-badge>\n        Countries\n        <v-icon class=\"mb-1\">mdi-flag-outline</v-icon>\n      </v-tab>\n      <v-tab>\n        <v-badge\n          v-if=\"indicatorSelection !== 'all'\"\n          color=\"primary\"\n          icon=\"mdi-filter\"\n          offset-x=\"-37\"\n          offset-y=\"-26\"\n        >\n        </v-badge>\n        Indicators\n        <v-icon class=\"mb-1\">mdi-lightbulb-on-outline</v-icon>\n      </v-tab>\n    </v-tabs>\n    <v-tabs-items\n      v-model=\"tab\"\n      :style=\"`height: calc(100% - 112px); overflow-y: auto`\"\n    >\n      <v-tab-item class=\"fill-height\">\n        <v-list\n          dense\n          :style=\"$vuetify.breakpoint.xsOnly && 'padding-bottom: 60px'\"\n        >\n          <v-list-item-group v-model=\"countrySelection\" color=\"primary\">\n            <v-list-item\n              :value=\"'all'\"\n              :disabled=\"countrySelection === 'all'\"\n              active-class=\"itemActive\"\n            >\n              <v-list-item-icon\n                v-if=\"appConfig.id !== 'trilateral'\"\n                class=\"d-flex align-center mr-2\"\n              >\n                <country-flag country=\"eu\" size=\"normal\" />\n              </v-list-item-icon>\n              <v-list-item-icon v-else class=\"d-flex align-center ml-5 mr-6\">\n                <v-icon\n                  :color=\"countrySelection === 'all' ? 'white' : 'primary'\"\n                  >mdi-earth</v-icon\n                >\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>Available countries</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n            <v-divider></v-divider>\n            <template v-for=\"region in uniqueRegions(countryItems)\">\n              <v-subheader v-if=\"region\" class=\"ml-5\" :key=\"region\">\n                {{ region.toUpperCase() }}\n              </v-subheader>\n              <v-list-item\n                v-for=\"country in countryItems.filter((cI) =>\n                  cI.region ? cI.region === region : true\n                )\"\n                :key=\"country.code\"\n                :value=\"country.code\"\n                :disabled=\"countrySelection === country.code\"\n                active-class=\"itemActive\"\n              >\n                <v-list-item-icon class=\"d-flex align-center mr-2\">\n                  <country-flag\n                    :country=\"country.code === 'all' ? 'eu' : country.code\"\n                    size=\"normal\"\n                  />\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title>{{ country.name }}</v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </template>\n          </v-list-item-group>\n        </v-list>\n      </v-tab-item>\n      <v-tab-item class=\"fill-height\">\n        <v-list\n          dense\n          :style=\"$vuetify.breakpoint.xsOnly && 'padding-bottom: 60px'\"\n        >\n          <v-list-item-group v-model=\"indicatorSelection\" color=\"primary\">\n            <v-list-item\n              :value=\"'all'\"\n              active-class=\"itemActive\"\n              :disabled=\"indicatorSelection === 'all'\"\n            >\n              <v-list-item-icon class=\"ml-3 mr-4\">\n                <v-icon>mdi-lightbulb-on-outline</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>Available indicators</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n            <v-divider></v-divider>\n            <template v-for=\"classId in Object.keys(uniqueClasses)\">\n              <v-subheader\n                class=\"ml-5\"\n                :key=\"classId\"\n                v-if=\"\n                  indicatorItems.filter((i) =>\n                    uniqueClasses[classId].includes(i.code)\n                  ).length > 0\n                \"\n              >\n                {{ classId.toUpperCase() }}\n              </v-subheader>\n              <v-list-item\n                v-for=\"indicator in indicatorItems.filter(\n                  (i) =>\n                    uniqueClasses[classId].includes(i.code) &&\n                    i.indicator !== ''\n                )\"\n                :key=\"indicator.code\"\n                :value=\"indicator.code\"\n                active-class=\"itemActive\"\n                :class=\"indicator.archived ? 'archived-item' : ''\"\n                :disabled=\"indicatorSelection === indicator.code\"\n              >\n                <v-list-item-icon class=\"ml-3 mr-4\">\n                  <v-icon>{{\n                    baseConfig.indicatorClassesIcons[classId]\n                      ? baseConfig.indicatorClassesIcons[classId]\n                      : \"mdi-lightbulb-on-outline\"\n                  }}</v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title v-if=\"indicator.indicatorOverwrite\"\n                    v-text=\"indicator.indicatorOverwrite\"\n                    style=\"\n                      text-overflow: unset;\n                      overflow: unset;\n                      white-space: pre-wrap;\n                    \"\n                  ></v-list-item-title>\n                  <v-list-item-title v-else\n                    v-text=\"indicator.indicator\"\n                    style=\"\n                      text-overflow: unset;\n                      overflow: unset;\n                      white-space: pre-wrap;\n                    \"\n                  ></v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </template>\n          </v-list-item-group>\n        </v-list>\n      </v-tab-item>\n    </v-tabs-items>\n    <v-sheet\n      class=\"d-flex align-center justify-center\"\n      :style=\"`width: 100%; height: 40px; ${$vuetify.breakpoint.xsOnly\n        ? 'position: absolute; bottom: 0;' : ''}`\">\n      <v-checkbox\n        :value=\"featureFilters.includeArchived\"\n        label=\"Show archived indicators\"\n        color=\"primary\"\n        dense\n        hide-details\n        class=\"ma-0\"\n        @change=\"\n          setFilter({ includeArchived: !featureFilters.includeArchived })\n        \"\n      >\n      </v-checkbox>\n    </v-sheet>\n  </div>\n</template>\n\n<script>\n// Utilities\nimport { mapGetters, mapState } from 'vuex';\n\nimport CountryFlag from 'vue-country-flag';\nimport countries from '@/assets/countries.json';\n\nexport default {\n  components: {\n    CountryFlag,\n  },\n  data: () => ({\n    tab: 0,\n    indicators: {\n      environment: 1,\n      economy: 0,\n      health: 0,\n    },\n    countrySelection: 'all',\n    indicatorSelection: 'all',\n    indicatorPanel: 0,\n  }),\n  computed: {\n    ...mapGetters('features', [\n      'getCountries',\n      'getIndicators',\n      'getCountryItems',\n    ]),\n    ...mapState('config', ['appConfig', 'baseConfig']),\n    ...mapState('features', ['featureFilters']),\n    countries() {\n      return countries;\n    },\n    countryItems() {\n      let countryItems;\n      if (this.appConfig.customCountryList) {\n        countryItems = this.appConfig.customCountryList\n          .filter((c) => this.getCountries.includes(c.code))\n          .map((c) => {\n            const item = countries.features.find(\n              (f) => f.properties.alpha2 === c.code,\n            );\n            return {\n              code: c.code,\n              name: item.properties.name,\n              region: c.region,\n            };\n          });\n      } else {\n        countryItems = this.getCountries\n          .filter((c) => c !== 'all')\n          .map((c) => {\n            if (Array.isArray(c)) {\n              return c.map((i) => {\n                const item = countries.features.find(\n                  (f) => f.properties.alpha2 === i,\n                );\n                return {\n                  code: i,\n                  name: item.properties.name,\n                  region: null,\n                };\n              });\n            }\n              //eslint-disable-line\n            const item = countries.features.find(\n              (f) => f.properties.alpha2 === c,\n            );\n            return {\n              code: c,\n              name: item.properties.name,\n              region: null,\n            };\n          })\n          // flatten the array\n          .flat()\n          // filter out duplicates\n          .filter(\n            (thing, index, self) => self.findIndex((t) => t.code === thing.code) === index,\n          )\n          .sort((a, b) => (a.name > b.name ? 1 : -1));\n      }\n      return countryItems;\n    },\n    uniqueClasses() {\n      const classes = {};\n      const indDef = this.baseConfig.indicatorsDefinition;\n      Object.keys(indDef)\n        .filter((key) => indDef[key].hideInFilters !== true)\n        .map((key) => {\n          if (typeof classes[indDef[key].class] === 'undefined') {\n            classes[indDef[key].class] = [key];\n          } else {\n            classes[indDef[key].class].push(key);\n          }\n          return null;\n        });\n      return classes;\n    },\n    indicatorItems() {\n      let indicators = this.getIndicators;\n      indicators = indicators\n        .filter((i) => !i.dummyFeature)\n        .filter(\n          (ind, index, self) => self.findIndex((t) => t.code === ind.code) === index,\n        );\n      indicators.sort((a, b) => {\n        const codeA = a.code;\n        const codeB = b.code;\n        if (codeA < codeB) return -1;\n        if (codeB > codeA) return 1;\n        return 0;\n      });\n      return indicators;\n    },\n  },\n  mounted() {\n    this.$store.subscribe((mutation) => {\n      if (\n        mutation.type === 'features/INIT_FEATURE_FILTER'\n        || mutation.type === 'features/SET_FEATURE_FILTER'\n      ) {\n        if (mutation.payload.countries) {\n          if (Array.isArray(mutation.payload.countries)) {\n            if (mutation.payload.countries.length === 0) {\n              this.countrySelection = 'all';\n            }\n          } else {\n            this.countrySelection = mutation.payload.countries;\n          }\n        }\n        if (mutation.payload.indicators) {\n          if (Array.isArray(mutation.payload.indicators)) {\n            if (mutation.payload.indicators.length === 0) {\n              this.indicatorSelection = 'all';\n            } else {\n              [this.indicatorSelection] = mutation.payload.indicators;\n            }\n          } else {\n            this.indicatorSelection = mutation.payload.indicators;\n          }\n        }\n      }\n    });\n  },\n  methods: {\n    selectCountry(selection) {\n      if (selection === 'all') {\n        this.setFilter({ countries: [] });\n      } else {\n        this.setFilter({ countries: selection });\n      }\n    },\n    selectIndicator(selection) {\n      this.setFilter({\n        indicators: selection === 'all' ? [] : [selection],\n      });\n    },\n    setFilter(filter) {\n      this.$store.commit('features/SET_FEATURE_FILTER', filter);\n    },\n    uniqueRegions(countryItems) {\n      return countryItems\n        .map((c) => c.region)\n        .filter(\n          (thing, index, self) => self.findIndex((t) => t === thing) === index,\n        );\n    },\n  },\n  watch: {\n    countrySelection(val) {\n      this.selectCountry(val);\n    },\n    indicatorSelection(val) {\n      this.selectIndicator(val);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep .v-expansion-panel-content__wrap {\n  padding-left: 0;\n  padding-right: 0;\n}\n.v-list-item__icon .flag {\n  border: 1px solid lightgray;\n  background-position-x: -1px;\n}\n.v-application.theme--dark {\n  .v-list-item__icon .flag {\n    border: 1px solid transparent;\n  }\n}\n.itemActive {\n  background: var(--v-primary-base);\n  color: white !important;\n  .v-list-item__icon .flag {\n    border: 1px solid transparent;\n  }\n}\n::v-deep .archived-item {\n  opacity: 0.65;\n}\n</style>\n"]}]}