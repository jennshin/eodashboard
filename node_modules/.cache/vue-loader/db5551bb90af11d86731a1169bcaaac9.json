{"remainingRequest":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/src/components/DataPanel.vue?vue&type=style&index=0&id=10438f7a&lang=scss&scoped=true&","dependencies":[{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/src/components/DataPanel.vue","mtime":1624532486000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/css-loader/dist/cjs.js","mtime":1624878752000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1624878753000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/postcss-loader/src/index.js","mtime":1624878752000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/sass-loader/dist/cjs.js","mtime":1624878756000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/_Github/github_upload/eodashboard/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKOjp2LWRlZXAgLnYtc2xpZGUtZ3JvdXBfX3ByZXYgewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKfQouY2hhcnQgewogIGJhY2tncm91bmQ6ICNmZmY7Cn0KCi52LWNhcmQuZnVsbHNjcmVlbkVsZW1lbnQgewogIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50OwogIHRvcDogMCAhaW1wb3J0YW50OwogIGxlZnQ6IDAgIWltcG9ydGFudDsKICByaWdodDogMCAhaW1wb3J0YW50OwogIGJvdHRvbTogMCAhaW1wb3J0YW50OwogIGhlaWdodDogMTAwdmggIWltcG9ydGFudDsKfQo="},{"version":3,"sources":["DataPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8xBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DataPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    :style=\"`${$vuetify.breakpoint.mdAndDown ? 'padding-bottom: 100px; height: auto;'\n    : 'height: calc(100% - 64px - ' + bannerHeight + 'px);'}`\"\n    ref=\"wrapper\"\n  >\n    <div class=\"pt-0 pb-0\" :style=\"expanded ? `width: 100%;` : ``\">\n      <v-row v-if=\"indicatorObject\">\n        <v-col\n          :cols=\"$vuetify.breakpoint.mdAndDown || !expanded ? 12 : 6\"\n          :style=\"`height: auto`\"\n        >\n          <v-tabs\n            v-if=\"multipleTabCompare\"\n            v-model=\"selectedSensorTab\"\n            grow\n          >\n            <v-tab\n              v-for=\"(sensorData, index) in multipleTabCompare.features\"\n              :key=\"sensorData.properties.indicatorObject.id\"\n              :class=\"multipleTabCompare.features.indexOf(sensorData) == selectedSensorTab\n                ? 'primary white--text'\n                : ''\"\n            >\n              {{ Array.isArray(multipleTabCompare.label)\n                ? multipleTabCompare.label[index]\n                : (Array.isArray(sensorData.properties.indicatorObject[multipleTabCompare.label])\n                ? sensorData.properties.indicatorObject[multipleTabCompare.label][0]\n                : sensorData.properties.indicatorObject[multipleTabCompare.label])\n              }}\n            </v-tab>\n          </v-tabs>\n          <v-tabs-items\n            v-if=\"multipleTabCompare\"\n            touchless\n            v-model=\"selectedSensorTab\"\n          >\n            <v-tab-item\n              v-for=\"sensorData in multipleTabCompare.features\"\n              :key=\"sensorData.properties.indicatorObject.id\"\n              :transition=\"false\" :reverse-transition=\"false\"\n            >\n              <v-card\n                class=\"fill-height\"\n                :style=\"`${!(!customAreaIndicator || expanded) ? 'display: none;' : ''}\n                height: ${$vuetify.breakpoint.mdAndUp ?\n                                  (expanded ? ( bannerHeight ? 60 : 70) : 40) : 60}vh;`\"\n              >\n                <full-screen-button />\n                <div\n                  style=\"height: 100%;z-index: 500; position: relative;\"\n                  v-if=\"$vuetify.breakpoint.mdAndDown && !dataInteract\"\n                  @click=\"dataInteract = true\"\n                  v-touch=\"{\n                    left: () => swipe(),\n                    right: () => swipe(),\n                    up: () => swipe(),\n                    down: () => swipe(),\n                }\">\n                </div>\n                <v-overlay :value=\"overlay\" absolute\n                  v-if=\"!dataInteract\"\n                  @click=\"dataInteract = true\">\n                  Tap to interact\n                </v-overlay>\n                <indicator-map\n                  ref=\"indicatorMap\"\n                  style=\"top: 0px; position: absolute;\"\n                  v-if=\"['all'].includes(sensorData.properties.indicatorObject.country) ||\n                  Array.isArray(sensorData.properties.indicatorObject.country)\"\n                  class=\"pt-0 fill-height\"\n                  :currentIndicator=\"sensorData.properties.indicatorObject\"\n                />\n                <indicator-data\n                  style=\"top: 0px; position: absolute;\"\n                  v-else\n                  class=\"pa-5 chart\"\n                  :currentIndicator=\"sensorData.properties.indicatorObject\"\n                />\n                <v-row class=\"mt-0\">\n                  <v-col cols=\"12\" sm=\"5\" ></v-col>\n                  <v-col\n                    cols=\"12\"\n                    sm=\"7\"\n                    v-if=\"!isFullScreen\"\n                    ref=\"customButtonRow\"\n                    style=\"margin-top: -12px;\"\n                  >\n                    <div :class=\"$vuetify.breakpoint.xsOnly ? 'text-center' : 'text-right'\">\n                      <v-btn\n                        color=\"primary\"\n                        text\n                        small\n                        :href=\"dataCustomHrefCSV\"\n                        :download=\"customAOIDownloadFilename\"\n                        target=\"_blank\"\n                        v-if=\"customAreaIndicator && !isFullScreen\"\n                      >\n                        <v-icon left>mdi-download</v-icon>\n                        download csv\n                      </v-btn>\n                    </div>\n                  </v-col>\n                </v-row>\n              </v-card>\n              <v-card\n                v-if=\"customAreaIndicator && !expanded\"\n                class=\"fill-height\"\n                :style=\"`height: ${$vuetify.breakpoint.mdAndUp ? 43 : 60}vh;`\"\n                style=\"border: none; !important\"\n                ref=\"indicatorData\"\n                outlined\n              >\n              <v-card-title\n                style=\"padding-top: 10px; padding-bottom: 0px;\">\n                  <v-btn\n                    icon\n                    @click=\"clearSelection\">\n                    <v-icon medium>mdi-close</v-icon>\n                  </v-btn>\n                  {{ customAreaIndicator.title }}\n              </v-card-title>\n              <v-card-title\n                style=\"padding-top: 5px\"\n                v-if=\"customAreaIndicator.isEmpty\">\n                  No data found for selection\n              </v-card-title>\n                <div\n                  style=\"height: 100%;z-index: 500; position: relative;\"\n                  v-if=\"$vuetify.breakpoint.mdAndDown && !dataInteract\"\n                  @click=\"dataInteract = true\"\n                  v-touch=\"{\n                    left: () => swipe(),\n                    right: () => swipe(),\n                    up: () => swipe(),\n                    down: () => swipe(),\n                }\">\n                </div>\n                <indicator-data\n                  v-if=\"!customAreaIndicator.isEmpty\"\n                  style=\"margin-top: 0px;\"\n                  :style=\"`height: ${mapPanelHeight - 15}px`\"\n                  class=\"px-5 py-0 chart\"\n                />\n              </v-card>\n              <v-row class=\"mt-0\">\n                <v-col cols=\"12\" sm=\"5\" ></v-col>\n                <v-col\n                  cols=\"12\"\n                  sm=\"7\"\n                  v-if=\"!isFullScreen\"\n                  ref=\"customButtonRow\"\n                  style=\"margin-top: -12px;\"\n                >\n                  <div :class=\"$vuetify.breakpoint.xsOnly ? 'text-center' : 'text-right'\">\n                    <v-btn\n                      color=\"primary\"\n                      text\n                      small\n                      :href=\"dataCustomHrefCSV\"\n                      :download=\"customAOIDownloadFilename\"\n                      target=\"_blank\"\n                      v-if=\"customAreaIndicator && !isFullScreen\"\n                    >\n                      <v-icon left>mdi-download</v-icon>\n                      download csv\n                    </v-btn>\n                  </div>\n                </v-col>\n              </v-row>\n            </v-tab-item>\n          </v-tabs-items>\n          <v-card\n            v-else-if=\"customAreaIndicator && !expanded\"\n            class=\"fill-height\"\n            :style=\"`height: ${$vuetify.breakpoint.mdAndUp ? 43 : 60}vh;`\"\n            style=\"border: none; !important\"\n            ref=\"indicatorData\"\n            outlined\n          >\n          <v-card-title\n            style=\"padding-top: 10px; padding-bottom: 0px;\">\n              <v-btn\n                icon\n                @click=\"clearSelection\">\n                <v-icon medium>mdi-close</v-icon>\n              </v-btn>\n              {{ customAreaIndicator.title }}\n          </v-card-title>\n          <v-card-title\n            style=\"padding-top: 5px\"\n            v-if=\"customAreaIndicator.isEmpty\">\n              No data found for selection\n          </v-card-title>\n            <div\n              style=\"height: 100%;z-index: 500; position: relative;\"\n              v-if=\"$vuetify.breakpoint.mdAndDown && !dataInteract\"\n              @click=\"dataInteract = true\"\n              v-touch=\"{\n                left: () => swipe(),\n                right: () => swipe(),\n                up: () => swipe(),\n                down: () => swipe(),\n            }\">\n            </div>\n            <indicator-map\n              ref=\"indicatorMap\"\n              style=\"top: 0px; position: absolute;\"\n              v-show=\"false\"\n              class=\"pt-0 fill-height\"\n            />\n            <indicator-data\n              v-if=\"!customAreaIndicator.isEmpty\"\n              style=\"margin-top: 0px;\"\n              class=\"pa-5 chart\"\n            />\n            <v-row class=\"mt-0\">\n                <v-col cols=\"12\" sm=\"5\" ></v-col>\n                <v-col\n                  cols=\"12\"\n                  sm=\"7\"\n                  v-if=\"!isFullScreen\"\n                  ref=\"customButtonRow\"\n                  style=\"margin-top: -30px;\"\n                >\n                  <div :class=\"$vuetify.breakpoint.xsOnly ? 'text-center' : 'text-right'\">\n                    <v-btn\n                      color=\"primary\"\n                      text\n                      small\n                      :href=\"dataCustomHrefCSV\"\n                      :download=\"customAOIDownloadFilename\"\n                      target=\"_blank\"\n                      v-if=\"customAreaIndicator && !isFullScreen\"\n                    >\n                      <v-icon left>mdi-download</v-icon>\n                      download csv\n                    </v-btn>\n                  </div>\n                </v-col>\n              </v-row>\n          </v-card>\n          <v-card\n            v-else\n            class=\"fill-height\"\n            :style=\"`height: ${$vuetify.breakpoint.mdAndUp ? (expanded\n                              ? (bannerHeight ? 65 : 70) : 40) : 60}vh;`\"\n            ref=\"mapPanel\"\n          >\n            <full-screen-button />\n            <div\n              style=\"height: 100%;z-index: 500; position: relative;\"\n              v-if=\"$vuetify.breakpoint.mdAndDown && !dataInteract\"\n              @click=\"dataInteract = true\"\n              v-touch=\"{\n                left: () => swipe(),\n                right: () => swipe(),\n                up: () => swipe(),\n                down: () => swipe(),\n            }\">\n            </div>\n            <v-overlay :value=\"overlay\" absolute\n              v-if=\"!dataInteract\"\n              @click=\"dataInteract = true\">\n              Tap to interact\n            </v-overlay>\n            <indicator-map\n              ref=\"indicatorMap\"\n              style=\"top: 0px; position: absolute;\"\n              v-if=\"showMap\"\n              class=\"pt-0 fill-height\"\n            />\n            <indicator-data\n              style=\"top: 0px; position: absolute;\"\n              v-else\n              class=\"pa-5 chart\"\n            />\n          </v-card>\n          <v-row\n            class=\"mt-0\"\n          >\n            <v-col\n              cols=\"12\"\n              sm=\"5\"\n              class=\"d-flex align-center\"\n              :class=\"$vuetify.breakpoint.xsOnly ? 'justify-center' : 'justify-space-between'\"\n              v-if=\"!isFullScreen\"\n            >\n              <small v-if=\"indicatorObject && indicatorObject.updateFrequency\">\n                <span\n                  v-if=\"indicatorObject.updateFrequency === 'Retired'\"\n                >This indicator is no longer updated</span>\n                <span\n                  v-else-if=\"indicatorObject.updateFrequency === 'EndSeason'\"\n                >Due to end of season, this indicator is no longer updated</span>\n                <span v-else>This data is updated: {{ indicatorObject.updateFrequency }}</span>\n              </small>\n              <small v-else> </small>\n            </v-col>\n            <v-col\n              cols=\"12\"\n              sm=\"7\"\n              v-if=\"!isFullScreen\"\n              ref=\"buttonRow\"\n            >\n              <div :class=\"$vuetify.breakpoint.xsOnly ? 'text-center' : 'text-right'\">\n                <v-btn\n                  color=\"primary\"\n                  text\n                  small\n                  :href=\"dataHrefCSV\"\n                  :download=\"downloadFileName\"\n                  target=\"_blank\"\n                  v-if=\"indicatorObject && !showMap && !isFullScreen\"\n                >\n                  <v-icon left>mdi-download</v-icon>\n                  download csv\n                </v-btn>\n                <iframe-button\n                  :indicatorObject=\"indicatorObject\"\n                  v-if=\"!customAreaIndicator || expanded\"\n                />\n              </div>\n            </v-col>\n          </v-row>\n        </v-col>\n        <v-col\n          :cols=\"$vuetify.breakpoint.mdAndDown || !expanded ? 12 : 6\"\n          :style=\"`padding-bottom: 0px; height: ${$vuetify.breakpoint.mdAndDown\n                  ? 'auto'\n                  : (expanded\n                    ? wrapperHeight + 'px'\n                    : wrapperHeight - mapPanelHeight - (showMap ? 40 : 0)\n                    - buttonRowHeight\n                    - (multipleTabCompare ? 48 : 0) + 'px') }`\"\n        >\n          <v-row\n            class=\"mt-0 fill-height scrollContainer\"\n          >\n            <v-col\n              cols=\"12\"\n              ref=\"customAreaIndicator\"\n              class=\"pa-0\"\n              v-if=\"!isFullScreen && customAreaIndicator && expanded\"\n            >\n              <v-card\n                v-if=\"customAreaIndicator\"\n                class=\"fill-height\"\n                :style=\"`height: ${$vuetify.breakpoint.mdAndUp ? 50 : 60}vh;`\"\n                style=\"border: none; !important\"\n                ref=\"indicatorData\"\n                outlined\n              >\n              <v-card-title\n                style=\"padding-top: 5px\"\n                v-if=\"customAreaIndicator.title\">\n                  {{ customAreaIndicator.title }}\n              </v-card-title>\n              <v-card-title\n                style=\"padding-top: 5px\"\n                v-if=\"customAreaIndicator.isEmpty\">\n                  No data found for selection\n              </v-card-title>\n                <div\n                  style=\"height: 100%;z-index: 500; position: relative;\"\n                  v-if=\"$vuetify.breakpoint.mdAndDown && !dataInteract\"\n                  @click=\"dataInteract = true\"\n                  v-touch=\"{\n                    left: () => swipe(),\n                    right: () => swipe(),\n                    up: () => swipe(),\n                    down: () => swipe(),\n                }\">\n                </div>\n                <indicator-data\n                  v-if=\"!customAreaIndicator.isEmpty\"\n                  style=\"margin-top: 0px;\"\n                  class=\"pa-5 chart\"\n                />\n              </v-card>\n              <v-row\n                class=\"mt-0\"\n              >\n                <v-col\n                  cols=\"12\"\n                  sm=\"5\"\n                >\n                </v-col>\n                <v-col\n                  cols=\"12\"\n                  sm=\"7\"\n                  v-if=\"!isFullScreen\"\n                  ref=\"customButtonRow\"\n                  style=\"margin-top: -30px;\"\n                >\n                  <div :class=\"$vuetify.breakpoint.xsOnly ? 'text-center' : 'text-right'\">\n                    <v-btn\n                      color=\"primary\"\n                      text\n                      small\n                      :href=\"dataCustomHrefCSV\"\n                      :download=\"customAOIDownloadFilename\"\n                      target=\"_blank\"\n                      v-if=\"customAreaIndicator && !isFullScreen\"\n                    >\n                      <v-icon left>mdi-download</v-icon>\n                      download csv\n                    </v-btn>\n                  </div>\n                </v-col>\n              </v-row>\n            </v-col>\n            <v-col\n              cols=\"12\"\n              class=\"pb-0\"\n              :style=\"`margin-top: ${customAreaIndicator && expanded ? '30px' : '0px'}`\"\n              v-if=\"!isFullScreen\"\n            >\n              <expandable-content\n                :minHeight=\"wrapperHeight - mapPanelHeight - (multipleTabCompare ? 48 : 0)\n                          - buttonRowHeight - eoDataBtnHeight - (showMap ? 40 : 0)\n                          - indicatorDataHeight - 60\"\n                :disableExpand=\"expanded || $vuetify.breakpoint.mdAndDown\"\n              >\n                <div\n                  v-html=\"story\"\n                  class=\"md-body\"\n                ></div>\n              </expandable-content>\n              <v-btn\n                v-if=\"eodataEnabled\"\n                @click=\"dialog = true\"\n                ref=\"EODataBtn\"\n                color=\"primary\"\n                large\n                block\n                class=\"my-1\"\n              ><span><v-icon left>mdi-satellite-variant</v-icon>EO Data</span>\n              </v-btn>\n              <v-btn\n                v-if=\"indicatorObject && externalData\"\n                :href= \"externalData.url\"\n                target=\"_blank\"\n                color=\"primary\"\n                ref=\"externalDataBtn\"\n                large\n                block\n                class=\"my-1\"\n              ><span><v-icon left>mdi-open-in-new</v-icon>{{externalData.label}}</span>\n              </v-btn>\n              <v-dialog\n                v-model=\"dialog\"\n                fullscreen\n                hide-overlay\n                transition=\"dialog-bottom-transition\"\n              >\n                <v-toolbar dark color=\"primary\">\n                  <v-toolbar-title >\n                    <span\n                    >Reference Images</span>\n                  </v-toolbar-title>\n                  <v-spacer></v-spacer>\n                  <v-btn icon dark @click=\"dialog = false\">\n                    <v-icon>mdi-close</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              <indicator-map\n                ref=\"referenceMap\"\n                :style=\"`height: calc(100% - ${$vuetify.application.top}px)`\"\n              />\n              </v-dialog>\n            </v-col>\n          </v-row>\n        </v-col>\n      </v-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  mapGetters,\n  mapState,\n} from 'vuex';\n\nimport { Wkt } from 'wicket';\nimport { loadIndicatorData } from '@/utils';\nimport { DateTime } from 'luxon';\nimport dialogMixin from '@/mixins/dialogMixin';\n\nimport ExpandableContent from '@/components/ExpandableContent.vue';\nimport IndicatorData from '@/components/IndicatorData.vue';\nimport IndicatorMap from '@/components/IndicatorMap.vue';\nimport FullScreenButton from '@/components/FullScreenButton.vue';\nimport IframeButton from '@/components/IframeButton.vue';\n\nexport default {\n  mixins: [dialogMixin],\n  props: [\n    'expanded',\n    'newsBanner',\n  ],\n  components: {\n    ExpandableContent,\n    IndicatorData,\n    IndicatorMap,\n    FullScreenButton,\n    IframeButton,\n  },\n  data: () => ({\n    dialog: false,\n    overlay: false,\n    dataInteract: false,\n    mounted: false,\n    selectedSensorTab: 0,\n    multipleTabCompare: null,\n  }),\n  computed: {\n    ...mapGetters('features', [\n      'getCountries',\n      'getIndicators',\n      'getLatestUpdate',\n    ]),\n    ...mapState('config', [\n      'appConfig',\n      'baseConfig',\n    ]),\n    ...mapState(['isFullScreen']),\n    story() {\n      let markdown;\n      try {\n        markdown = require(`../../public${this.appConfig.storyPath}${this.getLocationCode(this.indicatorObject)}.md`);\n      } catch {\n        try {\n          markdown = require(`../../public${this.baseConfig.indicatorsDefinition[this.indicatorObject.indicator].story}.md`);\n        } catch {\n          markdown = { default: '' };\n        }\n      }\n      return this.$marked(markdown.default);\n    },\n    indicatorObject() {\n      let indicatorObject;\n      if (this.multipleTabCompare) {\n        const feature = this.multipleTabCompare.features[this.selectedSensorTab];\n        indicatorObject = feature && feature.properties.indicatorObject;\n      } else {\n        indicatorObject = this.$store.state.indicators.selectedIndicator;\n      }\n      return indicatorObject;\n    },\n    dataHrefCSV() {\n      let dataHref = 'data:text/csv;charset=utf-8,';\n      const exportKeys = [\n        'time', 'aoi', 'measurement',\n        'indicatorValue', 'referenceTime', /* 'referenceValue', */\n        'dataProvider', 'eoSensor', 'colorCode', 'inputData',\n      ];\n      const header = `${exportKeys.join()}\\n`;\n      let csv = header;\n      for (let i = 0; i < this.indicatorObject.time.length; i++) {\n        let row = '';\n        for (let kk = 0; kk < exportKeys.length; kk++) {\n          const cKey = exportKeys[kk];\n          let txtVal = '';\n          if (cKey === 'aoi') {\n            txtVal = `\"${this.indicatorObject[cKey]}\",`;\n          } else {\n            txtVal = `\"${this.indicatorObject[cKey][i]}\",`;\n          }\n          row += txtVal;\n        }\n        row = `${row.slice(0, -1)}\\n`;\n        csv += row;\n      }\n      dataHref += encodeURI(csv);\n      return dataHref;\n    },\n    dataCustomHrefCSV() {\n      let dataHref = 'data:text/csv;charset=utf-8,';\n      const exportKeys = [\n        'time', 'aoi', 'measurement',\n      ];\n      // TODO: Separate data arrays in referenceValue and add them as columns\n      // let referenceKeys = [];\n      const wkt = new Wkt();\n      const header = `${exportKeys.join()}\\n`;\n      let csv = header;\n      for (let i = 0; i < this.customAreaIndicator.time.length; i++) {\n        let row = '';\n        for (let kk = 0; kk < exportKeys.length; kk++) {\n          const cKey = exportKeys[kk];\n          let txtVal = '';\n          if (cKey === 'aoi') {\n            if (i === 0 && this.$store.state.features.selectedArea !== null) {\n              txtVal = `\"${wkt.read(JSON.stringify(this.$store.state.features.selectedArea)).write()}\",`;\n            } else {\n              txtVal = ',';\n            }\n          } else {\n            txtVal = `\"${this.customAreaIndicator[cKey][i]}\",`;\n          }\n          row += txtVal;\n        }\n        row = `${row.slice(0, -1)}\\n`;\n        csv += row;\n      }\n      dataHref += encodeURI(csv);\n      return dataHref;\n    },\n    downloadFileName() {\n      const currDate = DateTime.utc().toFormat('yyyy-LL-dd');\n      const currInd = this.indicatorObject;\n      return `${currInd.city}_${currDate}_${currInd.aoiID}-${currInd.indicator}.csv`;\n    },\n    customAOIDownloadFilename() {\n      const currDate = DateTime.utc().toFormat('yyyy-LL-dd');\n      return `user_AOI_${currDate}_${this.indicatorObject.indicator}.csv`;\n    },\n    customAreaIndicator() {\n      return this.$store.state.indicators.customAreaIndicator;\n    },\n    layerNameMapping() {\n      return this.baseConfig.layerNameMapping;\n    },\n    showMap() {\n      // if returns true, we are showing map, if false we show chart\n      return ['all'].includes(this.indicatorObject.country) || Array.isArray(this.indicatorObject.country);\n    },\n    externalData() {\n      const dataFromDefinition = this.baseConfig.indicatorsDefinition[\n        this.indicatorObject.indicator\n      ].externalData;\n      const dataFromIndicator = this.indicatorObject.externalData;\n      if (dataFromDefinition) {\n        return dataFromDefinition;\n      }\n      if (dataFromIndicator) {\n        return dataFromIndicator;\n      }\n      return null;\n    },\n    eodataEnabled() {\n      const lastInputData = (this.indicatorObject && this.indicatorObject.inputData)\n        ? this.indicatorObject.inputData[this.indicatorObject.inputData.length - 1] : null;\n      // search configuration mapping if layer is configured\n      return (!this.showMap && lastInputData) ? this.layerNameMapping.hasOwnProperty(lastInputData) : false; // eslint-disable-line\n    },\n    wrapperHeight() {\n      if (this.mounted) {\n        return this.$refs.wrapper.clientHeight;\n      }\n      return 0;\n    },\n    buttonRowHeight() {\n      if (this.mounted && this.$refs.buttonRow != null) {\n        return this.$refs.buttonRow.clientHeight;\n      }\n      return 0;\n    },\n    eoDataBtnHeight() {\n      if (this.mounted) {\n        if (this.$refs.EODataBtn != null) {\n          return this.$refs.EODataBtn.$el.clientHeight;\n        }\n        if (this.$refs.externalDataBtn != null) {\n          return this.$refs.externalDataBtn.$el.clientHeight;\n        }\n      }\n      return 0;\n    },\n    mapPanelHeight() {\n      if (this.mounted && this.$refs.mapPanel != null) {\n        return this.$refs.mapPanel.$el.clientHeight;\n      }\n      return 0;\n    },\n    indicatorDataHeight() {\n      if (this.mounted && this.$refs.indicatorData != null) {\n        return this.$refs.indicatorData.$el.clientHeight;\n      }\n      return 0;\n    },\n    bannerHeight() {\n      if (this.newsBanner != null) {\n        return this.newsBanner.$el.clientHeight;\n      }\n      return 0;\n    },\n  },\n  mounted() {\n    this.mounted = true;\n    this.init();\n  },\n  methods: {\n    async init() {\n      await this.checkMultipleTabCompare();\n      this.selectedSensorTab = this.multipleTabCompare\n        ? this.multipleTabCompare.features\n          .indexOf(this.multipleTabCompare.features\n            .find((s) => this.getLocationCode(s.properties.indicatorObject)\n              === this.$route.query.poi))\n        : 0;\n    },\n    async checkMultipleTabCompare() {\n      let compare;\n      const { selectedIndicator } = this.$store.state.indicators;\n      const hasGrouping = this.appConfig.featureGrouping && this.appConfig.featureGrouping\n        .find((g) => g.features.find((i) => i.includes(this.getLocationCode(selectedIndicator))));\n      if (hasGrouping) {\n        compare = {};\n        compare.label = hasGrouping.label;\n        compare.features = hasGrouping.features;\n        // Pre-load all indicators to populate tab items\n        await Promise.all(compare.features.map(async (f) => {\n          const feature = this.$store.state.features.allFeatures\n            .find((i) => this.getLocationCode(i.properties.indicatorObject) === f);\n          await loadIndicatorData(this.baseConfig, feature.properties.indicatorObject);\n        }));\n        compare.features = compare.features.map((f) => this.$store.state.features.allFeatures\n          .find((i) => this.getLocationCode(i.properties.indicatorObject) === f));\n      }\n      this.multipleTabCompare = compare;\n    },\n    swipe() {\n      this.overlay = true;\n      setTimeout(() => { this.overlay = false; }, 2000);\n    },\n    scrollToCustomAreaIndicator() {\n      this.$vuetify.goTo(this.$refs.customAreaIndicator, { container: document.querySelector('.data-panel') });\n    },\n    clearSelection() {\n      const refMap = Array.isArray(this.$refs.indicatorMap)\n        ? this.$refs.indicatorMap[this.selectedSensorTab]\n        : this.$refs.indicatorMap;\n      refMap.selectedCountry = null;\n      refMap.selecectedLayer = null;\n      this.$store.state.indicators.customAreaIndicator = null;\n      this.$store.commit('indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', null);\n      refMap.onResize();\n    },\n  },\n  watch: {\n    selectedSensorTab(index) {\n      if (this.multipleTabCompare.features[index]) {\n        const poi = this.getLocationCode(this.multipleTabCompare.features[index]\n          .properties.indicatorObject);\n        this.$router.replace({ query: { ...this.$route.query, poi } }).catch(() => {});\n        let currCountry = null;\n        let currID = null;\n        if (this.customAreaIndicator !== null) {\n          currCountry = this.customAreaIndicator.country;\n          currID = this.customAreaIndicator.indicator;\n        }\n        this.$store.commit('indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', null);\n        if (this.$refs.indicatorMap\n          && this.$refs.indicatorMap.length > 0\n          && ['CV', 'OW'].includes(currID)) {\n          // For now we only refetch data when switching tabs for CV and OW data\n          // Check if a country is selected for the customAreaIndicator\n          const refMap = this.$refs.indicatorMap[index];\n          if (currCountry && currID) {\n            if (refMap) {\n              refMap.fetchMobilityData(\n                currCountry,\n                this.$refs.indicatorMap[index].indicator.aoiID,\n              );\n            } else {\n              // TODO: There should be a better way of doing this\n              setTimeout(() => {\n                this.$refs.indicatorMap[index].fetchMobilityData(\n                  currCountry, this.$refs.indicatorMap[index].indicator.aoiID,\n                );\n              }, 500);\n            }\n          }\n        }\n      }\n      if (this.$refs.indicatorMap\n        && this.$refs.indicatorMap.length > 0\n        && this.$refs.indicatorMap[index]) {\n        const refMap = this.$refs.indicatorMap[index];\n        refMap.onResize();\n      }\n    },\n    dialog(open) {\n      if (open && this.$refs.referenceMap) {\n        this.$refs.referenceMap.onResize();\n        setTimeout(() => {\n          this.$refs.referenceMap.flyToBounds();\n        }, 200);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep .v-slide-group__prev {\n  display: none !important;\n}\n.chart {\n  background: #fff;\n}\n\n.v-card.fullscreenElement {\n  position: fixed !important;\n  top: 0 !important;\n  left: 0 !important;\n  right: 0 !important;\n  bottom: 0 !important;\n  height: 100vh !important;\n}\n</style>\n"]}]}