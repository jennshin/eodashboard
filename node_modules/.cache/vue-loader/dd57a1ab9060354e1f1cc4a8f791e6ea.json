{"remainingRequest":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/src/components/IndicatorMap.vue","mtime":1624532486000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/babel-loader/lib/index.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/cache-loader/dist/cjs.js","mtime":1624878747000},{"path":"/Volumes/WD_Elements_25A1_Media/Google Drive/___Public/__2021-Hackathon-EOD/eodash-staging/app/node_modules/vue-loader/lib/index.js","mtime":1624878753000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["IndicatorMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAybfile":"IndicatorMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <l-map\n    ref=\"map\"\n    style=\"height: 100%; width: 100%; background: #cad2d3; z-index: 1;\"\n    :options=\"defaultMapOptions\"\n    :maxZoom=\"mapDefaults.maxMapZoom\"\n    :minZoom=\"mapDefaults.minMapZoom\"\n    @update:zoom=\"zoomUpdated\"\n    @update:center=\"centerUpdated\"\n    @update:bounds=\"boundsUpdated\"\n    v-resize=\"onResize\"\n    @ready=\"onMapReady()\"\n  >\n    <l-control-zoom position=\"topright\"></l-control-zoom>\n    <l-feature-group ref=\"customAreaFilterFeatures\"></l-feature-group>\n    <l-control position=\"topright\"\n      v-if=\"customAreaFilter && validDrawnArea && renderTrashBin\">\n      <v-tooltip left>\n        <template v-slot:activator=\"{ on }\">\n          <div v-on=\"on\" class=\"d-inline-block\">\n            <v-btn\n              color=\"error\"\n              x-small\n              fab\n              class=\"pa-0\"\n              :style=\"`${$vuetify.breakpoint.mdAndDown\n                ? 'width: 30px; height: 30px;'\n                : 'width: 26px; height: 26px;'} border-radius: 4px`\"\n              @click=\"clearCustomAreaFilter\"\n            >\n              <v-icon small>mdi-delete</v-icon>\n            </v-btn>\n          </div>\n        </template>\n          <span>Clear selection</span>\n      </v-tooltip>\n    </l-control>\n    <l-control position=\"topright\"\n      v-if=\"mergedConfigs()[0].customAreaIndicator && validDrawnArea && renderTrashBin\">\n      <v-tooltip left>\n        <template v-slot:activator=\"{ on }\">\n          <div v-on=\"on\" class=\"d-inline-block\"\n          :style=\"`border: 3px solid ${appConfig.branding.primaryColor};\n          border-radius: 6px;`\">\n            <v-btn\n              color=\"white\"\n              x-small\n              fab\n              depressed\n              class=\"pa-0\"\n              :style=\"`${$vuetify.breakpoint.mdAndDown\n                ? 'width: 36px; height: 36px;'\n                : 'width: 30px; height: 30px;'}\n                border-radius: 4px;\n                color: ${appConfig.branding.primaryColor};`\"\n              @click=\"fetchCustomAreaIndicator\"\n            >\n              <v-icon small>mdi-poll</v-icon>\n            </v-btn>\n          </div>\n        </template>\n          <span>Draw chart from sub-area</span>\n      </v-tooltip>\n    </l-control>\n    <LTileLayer\n      v-for=\"layer in baseLayers.filter(b => b.protocol === 'xyz')\"\n      v-bind=\"layer\"\n      ref=\"baseLayers\"\n      layer-type=\"base\"\n      :key=\"layer.name\"\n      :opacity=\"opacityTerrain[zoom]\"\n      :options=\"layerOptions(null, layer)\"\n    >\n    </LTileLayer>\n    <LWMSTileLayer\n      v-for=\"layer in baseLayers.filter(b => b.protocol === 'WMS')\"\n      :key=\"layer.name\"\n      v-bind=\"layer\"\n      :options=\"layerOptions(null, layer)\"\n      layer-type=\"base\"\n    >\n    </LWMSTileLayer>\n    <l-geo-json\n    :geojson=\"subAoiInverse\"\n    :pane=\"popupPane\"\n    layer-type=\"overlay\"\n    name='Reference area overlay'\n    :optionsStyle=\"subAoiInverseStyle\"\n    >\n    </l-geo-json>\n    <l-layer-group ref=\"dataLayers\">\n      <l-geo-json\n      :geojson=\"indicator.subAoi\"\n      :pane=\"tooltipPane\"\n      :optionsStyle=\"subAoiStyle('data')\"\n      >\n      </l-geo-json>\n      <l-marker-cluster v-if=\"mergedConfigs()[0].featuresClustering\"\n        ref=\"featuresDataCluster\"\n        :options=\"clusterOptions\"\n        >\n      </l-marker-cluster>\n      <l-geo-json\n          v-else\n          ref=\"featureJsonData\"\n          :geojson=\"getDataF().features\"\n          :options=\"featureOptions('data')\"\n          :pane=\"tooltipPane\"\n          :key=\"dataJsonKey\"\n        >\n      </l-geo-json>\n      <l-circle-marker\n        v-if=\"showAoi\"\n        :lat-lng=\"aoi\"\n        :radius=\"12\"\n        :color=\"appConfig.branding.primaryColor\"\n        :weight=\"2\"\n        :dashArray=\"'3'\"\n        :fill=\"true\"\n        :fillColor=\"getAoiFill('data')\"\n        :fillOpacity=\"1\"\n        :pane=\"tooltipPane\"\n      >\n      </l-circle-marker>\n      <!-- XYZ grouping is not implemented yet -->\n      <LTileLayer\n      v-for=\"(layerConfig, i) in mergedConfigs().filter(l => l.protocol === 'xyz')\"\n        ref=\"dataLayerArrayXYZ\"\n        :data-key-originalindex=\"i\"\n        :key=\"dataLayerKeyXYZ[i]\"\n        v-bind=\"layerConfig\"\n        :options=\"layerOptions(currentTime, layerConfig)\"\n        :pane=\"overlayPane\"\n        layer-type=\"overlay\"\n      >\n      </LTileLayer>\n      <template v-if=\"getCombinedWMSLayers().length > 0\">\n        <l-layer-group ref=\"dataLayerArrayWMS\">\n          <l-layer-group\n          v-for=\"combLayer in this.getCombinedWMSLayers()\"\n            :key=\"combLayer.name\"\n            :name=\"combLayer.name\"\n            layer-type=\"overlay\"\n          >\n            <LWMSTileLayer\n            v-for=\"cLayerConfig in combLayer.combinedLayers\"\n              :key=\"cLayerConfig.name\"\n              v-bind=\"cLayerConfig\"\n              :options=\"layerOptions(currentTime, cLayerConfig)\"\n              :pane=\"overlayPane\"\n            >\n            </LWMSTileLayer>\n          </l-layer-group>\n          <LWMSTileLayer\n          v-for=\"layerConfig in this.getSimpleWMSLayers()\"\n            :key=\"layerConfig.name\"\n            v-bind=\"layerConfig\"\n            :options=\"layerOptions(currentTime, layerConfig)\"\n            :pane=\"overlayPane\"\n            layer-type=\"overlay\"\n          >\n          </LWMSTileLayer>\n        </l-layer-group>\n      </template>\n      <template v-else>\n        <LWMSTileLayer\n        v-for=\"layerConfig in this.getSimpleWMSLayers()\"\n          ref=\"dataLayerArrayWMS\"\n          :key=\"layerConfig.name\"\n          v-bind=\"layerConfig\"\n          :options=\"layerOptions(currentTime, layerConfig)\"\n          :pane=\"overlayPane\"\n          layer-type=\"overlay\"\n        >\n        </LWMSTileLayer>\n      </template>\n    </l-layer-group>\n    <l-layer-group ref=\"compareLayers\">\n      <!-- XYZ grouping is not implemented yet -->\n      <LTileLayer\n      v-for=\"(layerConfig, i) in mergedConfigs('compare').filter(l => l.protocol === 'xyz')\"\n        ref=\"compareLayerArrayXYZ\"\n        :data-key-originalindex=\"i\"\n        :key=\"compareLayerKeyXYZ[i]\"\n        v-bind=\"layerConfig\"\n        :visible=\"enableCompare\"\n        :options=\"layerOptions(currentCompareTime, layerConfig)\"\n        :pane=\"overlayPane\"\n      >\n      </LTileLayer>\n      <template v-if=\"getCombinedWMSLayers('compare').length > 0\">\n        <l-layer-group ref=\"compareLayerArrayWMS\">\n          <l-layer-group\n          v-for=\"combLayer in this.getCombinedWMSLayers('compare')\"\n            :key=\"combLayer.name\"\n          >\n            <LWMSTileLayer\n            v-for=\"cLayerConfig in combLayer.combinedLayers\"\n              :key=\"cLayerConfig.name\"\n              v-bind=\"cLayerConfig\"\n              :visible=\"enableCompare\"\n              :options=\"layerOptions(currentCompareTime, cLayerConfig)\"\n              :pane=\"overlayPane\"\n            >\n            </LWMSTileLayer>\n          </l-layer-group>\n          <LWMSTileLayer\n          v-for=\"layerConfig in this.getSimpleWMSLayers('compare')\"\n            :key=\"layerConfig.name\"\n            v-bind=\"layerConfig\"\n            :visible=\"enableCompare\"\n            :options=\"layerOptions(currentCompareTime, layerConfig)\"\n            :pane=\"overlayPane\"\n          >\n          </LWMSTileLayer>\n        </l-layer-group>\n      </template>\n      <template v-else>\n        <LWMSTileLayer\n        v-for=\"layerConfig in this.getSimpleWMSLayers('compare')\"\n          ref=\"compareLayerArrayWMS\"\n          :key=\"layerConfig.name\"\n          v-bind=\"layerConfig\"\n          :visible=\"enableCompare\"\n          :options=\"layerOptions(currentCompareTime, layerConfig)\"\n          :pane=\"overlayPane\"\n        >\n        </LWMSTileLayer>\n      </template>\n      <l-geo-json\n        :geojson=\"indicator.subAoi\"\n        :pane=\"shadowPane\"\n        :visible=\"enableCompare\"\n        :optionsStyle=\"subAoiStyle('compare')\"\n      >\n      </l-geo-json>\n      <l-marker-cluster v-if=\"mergedConfigs()[0].featuresClustering\"\n        ref=\"featuresCompareCluster\" :options=\"clusterOptions\">\n      </l-marker-cluster>\n      <l-geo-json\n        v-else\n        ref=\"featureJsonCompare\"\n        :visible=\"enableCompare\"\n        :geojson=\"getCompareF().features\"\n        :options=\"featureOptions('compare')\"\n        :pane=\"shadowPane\"\n        :key=\"compareJsonKey\"\n      >\n      </l-geo-json>\n      <l-circle-marker\n        v-if=\"showAoi\"\n        :lat-lng=\"aoi\"\n        :visible=\"enableCompare\"\n        :radius=\"12\"\n        :color=\"appConfig.branding.primaryColor\"\n        :weight=\"2\"\n        :dashArray=\"3\"\n        :fill=\"true\"\n        :fillColor=\"getAoiFill('compare')\"\n        :fillOpacity=\"1\"\n        :pane=\"shadowPane\"\n      >\n      </l-circle-marker>\n    </l-layer-group>\n    <l-layer-group ref=\"overlayLayers\" v-if=\"!countrySelection\">\n      <LTileLayer\n        v-for=\"layer in overlayLayers.filter(b => b.protocol === 'xyz')\"\n        :key=\"layer.name\"\n        v-bind=\"layer\"\n        :pane=\"markerPane\"\n        :opacity=\"opacityOverlay[zoom]\"\n        :options=\"layerOptions(null, layer)\"\n        layer-type=\"overlay\"\n      >\n      </LTileLayer>\n      <LWMSTileLayer\n        v-for=\"layer in overlayLayers.filter(b => b.protocol === 'WMS')\"\n        v-bind=\"layer\"\n        :key=\"layer.name\"\n        :options=\"layerOptions(null, layer)\"\n        :pane=\"markerPane\"\n        :opacity=\"opacityOverlay[zoom]\"\n        layer-type=\"overlay\"\n      >\n      </LWMSTileLayer>\n    </l-layer-group>\n    <l-geo-json\n    v-if=\"countrySelection\"\n    :geojson=\"countriesJson\"\n    :optionsStyle=\"countriesStyle\"\n    :options=\"countriesOptions()\"\n    name=\"Country vectors\"\n    layer-type=\"overlay\"\n    >\n    </l-geo-json>\n    <l-feature-group ref=\"gsaLayer\"\n      v-if=\"borderSelection\">\n      <l-circle-marker v-for=\"(feature) in gsaJson\"\n        :key=\"feature.id\"\n        ref=\"markers\"\n        :lat-lng=\"feature.AOI.split(',').map(Number)\"\n        :name=\"feature.name\"\n        color=\"#fff\"\n        :radius=\"selectedBorder === feature.borderId ? 6 : 4\"\n        :fillColor=\"selectedBorder === feature.borderId ?\n          appConfig.branding.secondaryColor : appConfig.branding.primaryColor\"\n        :weight=\"selectedBorder === feature.borderId ? 2 : 1\"\n        :opacity=\"selectedBorder === feature.borderId ? 1.0 : 0.8\"\n        :fillOpacity=\"selectedBorder === feature.borderId ? 1.0 : 0.9\"\n        @click=\"selectGSAIndicator(feature)\"\n      >\n      <l-tooltip class=\"tooltip text-center\" :options=\"{ direction: 'top' }\">\n          <p class=\"ma-0\">\n            <strong>{{ feature.name }}</strong>\n          </p>\n        </l-tooltip>\n      </l-circle-marker>\n    </l-feature-group>\n    <div\n    :style=\"`position: absolute; z-index: 700; top: 10px; left: 10px;`\">\n      <img v-if=\"mergedConfigs()[0].legendUrl\"\n      :src=\"mergedConfigs()[0].legendUrl\" alt=\"\"\n      :class=\"`map-legend ${$vuetify.breakpoint.xsOnly ? 'map-legend-expanded' :\n      (legendExpanded && 'map-legend-expanded')}`\"\n      @click=\"legendExpanded = !legendExpanded\"\n      :style=\"`background: rgba(255, 255, 255, 0.8);`\">\n      <div\n      v-if=\"mergedConfigs()[0].customAreaFeatures &&\n      (mergedConfigs()[0].features.featureLimit === dataFeaturesCount ||\n      mergedConfigs()[0].features.featureLimit === compareFeaturesCount)\"\n      :style=\"`width: fit-content; background: rgba(255, 255, 255, 0.8);`\"\n      >\n        <h3 :class=\"`brand-${appConfig.id} px-3 py-2`\">\n          Limit of drawn features is for performance reasons set to\n          <span :style=\"`font-size: 17px;`\">{{mergedConfigs()[0].features.featureLimit}}\n          </span>\n        </h3>\n      </div>\n    </div>\n    <div\n      class=\"d-flex justify-center\"\n      style=\"position: relative; width: 100%; height: 100%;\"\n      @click.stop=\"\"\n      @dblclick.stop=\"\"\n    >\n      <h3 :class=\"`brand-${appConfig.id} px-3 py-1`\"\n        v-if=\"enableCompare && indicator.compareDisplay && indicator.compareDisplay.mapLabel\"\n        style=\"position:absolute; z-index:1000; right: 0px; bottom: 45%;\n        background: rgba(255, 255, 255, 0.6); font-size: 16px; pointer-events: none;\">\n          {{indicator.display.mapLabel}}\n      </h3>\n      <h3 :class=\"`brand-${appConfig.id} px-3 py-1`\"\n        v-if=\"enableCompare && indicator.compareDisplay && indicator.display.mapLabel\"\n        style=\"position:absolute; z-index:1000; left: 0px; bottom: 45%;\n        background: rgba(255, 255, 255, 0.6); font-size: 16px; pointer-events: none;\">\n          {{indicator.compareDisplay.mapLabel}}\n      </h3>\n      <v-sheet\n        v-if=\"!mergedConfigs()[0].disableTimeSelection\"\n        class=\"row justify-center align-center\"\n        style=\"position: absolute; bottom: 30px; z-index: 1000; width: auto; max-width: 100%;\"\n      >\n        <v-col\n          v-if=\"enableCompare && !indicator.compareDisplay\"\n          cols=\"6\"\n          class=\"pr-0\"\n        >\n          <v-select\n            v-if=\"enableCompare\"\n            outlined\n            dense\n            autofocus\n            hide-details\n            :prepend-inner-icon=\"(arrayOfObjects && compareLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(compareLayerTime.value) > 0\n                ? 'mdi-arrow-left-drop-circle'\n                : 'mdi-asterisk')\"\n            :append-icon=\"(arrayOfObjects && compareLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(compareLayerTime.value) < arrayOfObjects.length - 1\n                ? 'mdi-arrow-right-drop-circle'\n                : 'mdi-asterisk')\"\n            menu-props=\"auto\"\n            :items=\"arrayOfObjects\"\n            item-value=\"value\"\n            item-text=\"name\"\n            v-model=\"compareLayerTime\"\n            @change=\"compareLayerTimeSelection\"\n            @click:prepend-inner=\"compareLayerReduce\"\n            @click:append=\"compareLayerIncrease\"\n          ></v-select>\n        </v-col>\n        <v-col\n          :cols=\"enableCompare && !indicator.compareDisplay ? 6 : 12\"\n        >\n          <v-select\n            outlined\n            dense\n            autofocus\n            hide-details\n            :prepend-inner-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime.value) > 0\n                ? 'mdi-arrow-left-drop-circle'\n                : 'mdi-asterisk')\"\n            :append-icon=\"(arrayOfObjects && dataLayerTime) && (arrayOfObjects\n              .map((i) => i.value)\n              .indexOf(dataLayerTime.value) < arrayOfObjects.length - 1\n                ? 'mdi-arrow-right-drop-circle'\n                : 'mdi-asterisk')\"\n            menu-props=\"auto\"\n            :items=\"arrayOfObjects\"\n            item-value=\"value\"\n            item-text=\"name\"\n            v-model=\"dataLayerTime\"\n            @change=\"dataLayerTimeSelection\"\n            @click:prepend-inner=\"dataLayerReduce\"\n            @click:append=\"dataLayerIncrease\"\n          >\n            <template v-slot:prepend\n            v-if=\"!mergedConfigs()[0].disableCompare\">\n              <v-tooltip\n                bottom\n              >\n                <template v-slot:activator=\"{ on }\">\n                  <v-icon v-on=\"on\" @click=\"enableCompare = !enableCompare\">mdi-compare</v-icon>\n                </template>\n                Compare two images\n              </v-tooltip>\n            </template>\n          </v-select>\n        </v-col>\n      </v-sheet>\n    </div>\n    <l-control-attribution position=\"bottomright\" prefix=''></l-control-attribution>\n    <l-control-layers position=\"topright\" ref=\"layersControl\"></l-control-layers>\n  </l-map>\n</template>\n\n<script>\n// Utilities\nimport {\n  mapState,\n  mapGetters,\n} from 'vuex';\nimport {\n  geoJson, latLngBounds, latLng, circleMarker, DivIcon, Point,\n} from 'leaflet';\nimport { template } from '@/utils';\nimport {\n  LMap, LTileLayer, LWMSTileLayer, LGeoJson, LCircleMarker,\n  LControlLayers, LControlAttribution, LControlZoom, LLayerGroup,\n  LFeatureGroup, LControl, LTooltip,\n} from 'vue2-leaflet';\nimport { DateTime } from 'luxon';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-mouse-position';\nimport 'leaflet-side-by-side';\nimport 'leaflet-loading';\nimport 'leaflet-loading/src/Control.Loading.css';\nimport 'leaflet-draw';\nimport 'leaflet-draw/dist/leaflet.draw.css';\n\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css'; // eslint-disable-line import/no-extraneous-dependencies\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'; // eslint-disable-line import/no-extraneous-dependencies\nimport turfDifference from '@turf/difference';\n\nimport countries from '@/assets/countries.json';\nimport gsaFile from '@/assets/gsa_data.json';\n\n\nconst emptyF = {\n  type: 'FeatureCollection',\n  features: [],\n};\nlet dataF = emptyF;\nlet compareF = emptyF;\n\nexport default {\n  props: [\n    'currentIndicator',\n  ],\n  components: {\n    LMap,\n    LTileLayer,\n    LWMSTileLayer,\n    LGeoJson,\n    LCircleMarker,\n    LControlLayers,\n    LControlAttribution,\n    LControlZoom,\n    LLayerGroup,\n    LFeatureGroup,\n    LControl,\n    LTooltip,\n    'l-marker-cluster': Vue2LeafletMarkerCluster,\n  },\n  data() {\n    return {\n      map: null,\n      compareLayerKeyXYZ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n      dataLayerKeyXYZ: [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55],\n      dataJsonKey: 0,\n      compareJsonKey: -1,\n      zoom: null,\n      center: null,\n      bounds: null,\n      enableCompare: false,\n      opacityTerrain: [1],\n      opacityOverlay: [1],\n      tilePane: 'tilePane',\n      overlayPane: 'overlayPane',\n      markerPane: 'markerPane',\n      shadowPane: 'shadowPane',\n      tooltipPane: 'tooltipPane',\n      popupPane: 'popupPane',\n      legendExpanded: false,\n      slider: null,\n      drawControl: null,\n      renderTrashBin: false,\n      defaultMapOptions: {\n        attributionControl: false,\n        zoomControl: false,\n      },\n      dataLayerTime: null,\n      compareLayerTime: null,\n      dataLayerIndex: 0,\n      compareLayerIndex: 0,\n      dataFeaturesCount: 0,\n      compareFeaturesCount: 0,\n      selectedCountry: null,\n      selectedBorder: null,\n      selectedLayer: null,\n    };\n  },\n  computed: {\n    ...mapState('config', ['appConfig', 'baseConfig']),\n    ...mapGetters('indicators', [\n      'getIndicatorFilteredInputData',\n    ]),\n    countriesJson() {\n      return countries;\n    },\n    gsaJson() {\n      return gsaFile;\n    },\n    countriesStyle() {\n      return {\n        color: '#222',\n        weight: 1,\n        fillColor: '#fff',\n        opacity: 1,\n        fillOpacity: 0.5,\n      };\n    },\n    dataJsonComputed: {\n      // to avoid each of thousands of geojson features have its own\n      // getter/setter set by vue - freezing the app on large number of pts\n      // we manually rerender relevant vue components anyway\n      get: () => this.getDataF(),\n      set: (v) => {\n        dataF = v;\n      },\n    },\n    compareJsonComputed: {\n      get: () => this.getCompareF(),\n      set: (v) => {\n        compareF = v;\n      },\n    },\n    subAoiInverseStyle() {\n      return {\n        stroke: false,\n        fillColor: this.getIndicatorColor('primary'),\n        fillOpacity: this.mergedConfigs()[0].subAoiFillOpacity || 0.5,\n      };\n    },\n    baseLayers() {\n      // expects an array of objects\n      return this.mergedConfigs()[0].baseLayers || this.baseConfig.baseLayersRightMap;\n    },\n    overlayLayers() {\n      return this.mergedConfigs()[0].overlayLayers || this.baseConfig.overlayLayersRightMap;\n    },\n    mapDefaults() {\n      return {\n        ...this.baseConfig.mapDefaults,\n        ...this.mergedConfigs()[0],\n      };\n    },\n    countrySelection() {\n      return this.mergedConfigs()[0].countrySelection;\n    },\n    borderSelection() {\n      return this.mergedConfigs()[0].borderSelection;\n    },\n    indDefinition() {\n      return this.baseConfig.indicatorsDefinition[this.indicator.indicator];\n    },\n    additionalMapTimes() {\n      return this.baseConfig.additionalMapTimes && this.baseConfig.additionalMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    excludeMapTimes() {\n      return this.baseConfig.excludeMapTimes && this.baseConfig.excludeMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    replaceMapTimes() {\n      return this.baseConfig.replaceMapTimes && this.baseConfig.replaceMapTimes[`${this.indicator.aoiID}-${this.indicator.indicator}`];\n    },\n    indicator() {\n      return this.getIndicatorFilteredInputData(this.currentIndicator || null);\n    },\n    showAoi() {\n      return this.aoi && (!this.subAoi || this.subAoi.features.length === 0);\n    },\n    validDrawnArea() {\n      // allows for further validation on area size etc.\n      return this.drawnArea !== null;\n    },\n    drawnArea() {\n      return this.$store.state.features.selectedArea;\n    },\n    customAreaFilter() {\n      return this.mergedConfigs()[0].customAreaFeatures\n        || this.mergedConfigs()[0].customAreaIndicator;\n    },\n    usedTimes() {\n      let times = this.indicator.time;\n      let eoSensor = Array.isArray(this.indicator.eoSensor) && this.indicator.eoSensor;\n      let inputData = Array.isArray(this.indicator.inputData) && this.indicator.inputData;\n      let colorCode = Array.isArray(this.indicator.colorCode) && this.indicator.colorCode;\n      // completely replace given times or eoSensor\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.time)) {\n        times = this.replaceMapTimes.time;\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.eoSensor)) {\n        eoSensor = this.replaceMapTimes.eoSensor; // just for display\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.inputData)) {\n        inputData = this.replaceMapTimes.inputData;\n        // needs to be used unless indicator.display is used (that overrides it)\n      }\n      if (this.replaceMapTimes && Array.isArray(this.replaceMapTimes.colorCode)) {\n        colorCode = this.replaceMapTimes.colorCode;\n      }\n      if (this.additionalMapTimes) {\n        // add additional times and eoSensor to original arrays\n        // sort time ascending and sort arrays based on time array via helper list combining all\n        const dtObjects = this.additionalMapTimes.time.map((t) => DateTime.fromISO(t));\n        const mergedTimes = times.concat(dtObjects);\n        const mergedSensors = eoSensor.concat(this.additionalMapTimes.eoSensor);\n        const mergedInputData = inputData.concat(this.additionalMapTimes.inputData);\n        const mergedColorCode = colorCode.concat(this.additionalMapTimes.colorCode);\n        // combine the arrays\n        const list = [];\n        for (let j = 0; j < mergedTimes.length; j++) {\n          list.push({\n            time: mergedTimes[j],\n            eoSensor: mergedSensors[j],\n            inputData: mergedInputData[j],\n            colorCode: mergedColorCode[j],\n          });\n        }\n        // sort mapping by time asc\n        list.sort((a, b) => (a.time.toMillis() - b.time.toMillis()));\n        // separate them back out\n        for (let k = 0; k < list.length; k++) {\n          mergedTimes[k] = list[k].time;\n          mergedSensors[k] = list[k].eoSensor;\n          mergedInputData[k] = list[k].inputData;\n          mergedColorCode[k] = list[k].colorCode;\n        }\n        times = mergedTimes;\n        eoSensor = mergedSensors;\n        inputData = mergedInputData;\n        colorCode = mergedColorCode;\n      }\n      if (this.excludeMapTimes && Array.isArray(this.excludeMapTimes)) {\n        // exclude times and respective entries from other arrays\n        const dtObjects = this.excludeMapTimes.map((t) => DateTime.fromISO(t));\n        const indToDelete = times.reduce((a, e, i) => {\n          // find if any time is in to be deleted\n          const found = dtObjects.find((time) => time.toMillis() === e.toMillis());\n          if (typeof found !== 'undefined') {\n            // add its index to list\n            a.push(i);\n          }\n          return a;\n        }, []);\n        // set items in all arrays to null\n        indToDelete.forEach((i) => {\n          times[i] = null;\n          if (typeof eoSensor[i] !== 'undefined') {\n            eoSensor[i] = null;\n          }\n          if (typeof inputData[i] !== 'undefined') {\n            inputData[i] = null;\n          }\n          if (typeof colorCode[i] !== 'undefined') {\n            colorCode[i] = null;\n          }\n        });\n        // filter out nulls\n        times = times.filter((e) => e !== null);\n        eoSensor = eoSensor.filter((e) => e !== null);\n        inputData = inputData.filter((e) => e !== null);\n        colorCode = colorCode.filter((e) => e !== null);\n      }\n      return {\n        time: times, eoSensor, inputData, colorCode,\n      };\n    },\n    arrayOfObjects() {\n      const selectionOptions = [];\n      for (let i = 0; i < this.usedTimes.time.length; i += 1) {\n        let label = this.getTimeLabel(this.usedTimes.time[i]);\n        if (this.usedTimes.eoSensor) {\n          const eoSensor = this.usedTimes.eoSensor.length === 1\n            ? this.usedTimes.eoSensor[0]\n            : this.usedTimes.eoSensor[i];\n          label += ` - ${eoSensor}`;\n        }\n        selectionOptions.push({\n          value: this.usedTimes.time[i],\n          name: label,\n        });\n      }\n      return selectionOptions;\n    },\n    currentTime() {\n      let returnTime = this.usedTimes.time[this.usedTimes.time.length - 1];\n      if (this.dataLayerTime !== null) {\n        returnTime = this.dataLayerTime;\n      }\n      return returnTime;\n    },\n    currentCompareTime() {\n      let returnTime = this.getInitialCompareTime();\n      if (this.compareLayerTime !== null) {\n        returnTime = this.compareLayerTime;\n      }\n      if (this.indicator.compareDisplay) {\n        // shared time on both layers in case of compareDisplay being set\n        returnTime = this.dataLayerTime;\n      }\n      return returnTime;\n    },\n    aoi() {\n      return this.indicator.aoi;\n    },\n    subAoi() {\n      return this.indicator.subAoi;\n    },\n    subAoiInverse() {\n      // create an inverse of subaoi, using difference of whole world and subaoi\n      const subaoiInv = JSON.parse(JSON.stringify(this.subAoi));\n      // both Object.assign({}, this.subAoi) and { ...this.subAoi } create shallow copy\n      if (subaoiInv.features.length === 1) {\n        const globalBox = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Polygon',\n            coordinates: [[[-180, -90], [180, -90], [180, 90], [-180, 90], [-180, -90]]],\n          },\n        };\n        const diff = turfDifference(globalBox, subaoiInv.features[0]);\n        subaoiInv.features[0] = diff;\n      }\n      return subaoiInv;\n    },\n    clusterOptions() {\n      return {\n        disableClusteringAtZoom: 13,\n        animate: false,\n        // zoomToBoundsOnClick: false,\n        iconCreateFunction(cluster) { // eslint-disable-line func-names\n          // modified selected cluster style\n          const childCount = cluster.getChildCount();\n          return new DivIcon({\n            html: `<div><span>${childCount}</span></div>`,\n            className: 'marker-cluster',\n            iconSize: new Point(40, 40),\n          });\n        },\n        polygonOptions: {\n          fillColor: this.appConfig.branding.primaryColor,\n          color: this.appConfig.branding.primaryColor,\n          weight: 0.5,\n          opacity: 1,\n          fillOpacity: 0.3,\n          dashArray: 4,\n        },\n      };\n    },\n    drawOptions() {\n      return {\n        position: 'topright',\n        draw: {\n          polyline: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          polygon: {\n            shapeOptions: {\n              color: this.appConfig.branding.primaryColor,\n            },\n          },\n          rectangle: {\n            showArea: false,\n            shapeOptions: {\n              color: this.appConfig.branding.primaryColor,\n            },\n          },\n        },\n      };\n    },\n  },\n  mounted() {\n    this.dataLayerIndex = this.usedTimes.time.length - 1;\n    this.dataLayerTime = { value: this.usedTimes.time[this.dataLayerIndex] };\n    this.compareLayerTime = { value: this.getInitialCompareTime() };\n  },\n  methods: {\n    createLatLng(latlng) {\n      const llobj = latlng.split(',').map(Number);\n      console.log(llobj);\n      return llobj;\n    },\n    zoomUpdated(zoom) {\n      this.zoom = zoom;\n    },\n    centerUpdated(center) {\n      this.center = center;\n    },\n    boundsUpdated(bounds) {\n      this.bounds = bounds;\n    },\n    onMapReady() {\n      this.map = this.$refs.map.mapObject;\n      const layerButtons = document.querySelectorAll('.leaflet-control-layers-toggle');\n      layerButtons.forEach((lB) => lB.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"${this.appConfig.branding.primaryColor}\" width=\"32px\" height=\"32px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"/></svg>`); // eslint-disable-line\n      // update leaflet controls\n      L.control.mousePosition({ // eslint-disable-line no-undef\n        emptyString: '',\n        formatter: (lon, lat) => `${lon.toFixed(3)}, ${lat.toFixed(3)}`,\n        position: 'bottomright',\n      }).addTo(this.map);\n      // hide attribution under icon\n      this.map.attributionControl._update = function () { // eslint-disable-line\n        const attribs = [];\n        const kk = Object.keys(this._attributions);\n        for (let i = 0; i < kk.length; i += 1) {\n          if (this._attributions[kk[i]]) {\n            attribs.push(kk[i]);\n          }\n        }\n        const prefixAndAttribs = [];\n        if (this.options.prefix) {\n          prefixAndAttribs.push(this.options.prefix);\n        }\n        if (attribs.length) {\n          prefixAndAttribs.push(attribs.join(', '));\n        }\n        this._container.innerHTML = `<div class='attribution-body'>${prefixAndAttribs.join(' | ')}</div><div class='attribution-icon'>ℹ</div>`;\n      };\n      this.map.attributionControl._update();\n      // add loading indicator\n      L.Control.loading({\n        position: 'bottomleft',\n        delayIndicator: 200,\n      }).addTo(this.map);\n      // add A/B slider\n      const leftLayers = this.extractActualLayers(this.$refs.compareLayers);\n      const rightLayers = this.extractActualLayers(this.$refs.dataLayers);\n      this.slider = L.control.sideBySide(leftLayers, rightLayers);\n      this.drawControl = new L.Control.Draw(this.drawOptions);\n      this.map.on(L.Draw.Event.CREATED, function (e) { // eslint-disable-line\n        // set global area geometry as json\n        this.$store.commit('features/SET_SELECTED_AREA', e.layer.toGeoJSON().geometry);\n      }.bind(this)); // eslint-disable-line\n      // only draw one feature at a time\n      this.map.on(L.Draw.Event.DRAWSTART, function () { // eslint-disable-line\n        this.clearCustomAreaFilter();\n      }.bind(this));\n\n      this.initialDrawSelectedArea();\n      this.onResize();\n      if (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea) {\n        this.fetchFeatures('data');\n      }\n      setTimeout(() => {\n        this.flyToBounds();\n      }, 100);\n    },\n    onResize() {\n      // to fix panel size for reference image window\n      if (this.map) {\n        setTimeout(() => {\n          this.map.invalidateSize();\n        }, 100);\n      }\n    },\n    initialDrawSelectedArea() {\n      if (this.customAreaFilter) {\n        // add draw controls\n        this.drawControl.addTo(this.map);\n        this.renderTrashBin = true;\n        this.updateSelectedAreaFeature();\n      }\n    },\n    updateSelectedAreaFeature() {\n      let ftrs = null;\n      if (this.validDrawnArea) {\n        this.fetchFeatures('data');\n        if (this.enableCompare) {\n          this.fetchFeatures('compare');\n        }\n        ftrs = { ...this.drawnArea };\n      }\n      if (ftrs) {\n        // add feature to be drawn into layer\n        this.$refs.customAreaFilterFeatures.mapObject.addLayer(geoJson(ftrs, {\n          style: {\n            color: this.appConfig.branding.primaryColor,\n          },\n        }));\n      } else {\n        this.$refs.customAreaFilterFeatures.mapObject.clearLayers();\n      }\n    },\n    countriesOptions() {\n      const currentIndicator = this.indicator;\n      return {\n        onEachFeature: function onEachFeature(feature, layer) {\n          layer.bindTooltip(\n            () => feature.properties.name,\n            { direction: 'top', sticky: true },\n          );\n\n          layer.on('click', () => {\n            const countryA2 = feature.properties.alpha2;\n            this.fetchMobilityData(countryA2, currentIndicator.aoiID);\n            if (this.selectedLayer !== null) {\n              this.selectedLayer.setStyle({\n                color: '#222',\n                weight: 1,\n                fillColor: '#fff',\n                opacity: 1,\n                fillOpacity: 0.5,\n              });\n            }\n            this.selectedCountry = countryA2;\n            this.selectedLayer = layer;\n            this.popupName = feature.properties.name;\n          });\n          layer.on('mouseover', (e) => {\n            const currLayer = e.target;\n            currLayer.setStyle({\n              weight: 2,\n              color: this.$vuetify.theme.currentTheme.primary,\n              fillColor: this.$vuetify.theme.currentTheme.primary,\n              fillOpacity: 0.7,\n            });\n\n            if (!L.Browser.ie && !L.Browser.opera) {\n              layer.bringToFront();\n            }\n          });\n          layer.on('mouseout', (e) => {\n            const currLayer = e.target;\n            if (this.selectedCountry !== feature.properties.alpha2) {\n              currLayer.setStyle({\n                color: '#222',\n                weight: 1,\n                fillColor: '#fff',\n                opacity: 1,\n                fillOpacity: 0.5,\n              });\n            }\n          });\n        }.bind(this),\n      };\n    },\n    featureOptions(side) {\n      const style = (this.mergedConfigs(side)[0].features && this.mergedConfigs(side)[0].features.style) ? this.mergedConfigs(side)[0].features.style : {}; // eslint-disable-line\n      return {\n        onEachFeature: function onEachFeature(feature, layer) {\n          // if featuresParameters available, show only properties from mapping, otherwise dump all\n          const allowedParams = this.mergedConfigs(side)[0].features ? this.mergedConfigs(side)[0].features.allowedParameters : null; // eslint-disable-line\n          const allKeys = Object.keys(feature.properties);\n          let tooltip = '';\n          for (let i = 0; i < allKeys.length; i++) {\n            if (!allowedParams || (typeof allowedParams === 'object' && Object.keys(allowedParams).includes(allKeys[i]))\n              || (Array.isArray(allowedParams) && allowedParams.includes(allKeys[i]))) {\n              tooltip += `<span><b>${allKeys[i]}</b>: ${feature.properties[allKeys[i]]}</span><br>`;\n            }\n          }\n          if (tooltip !== '') {\n            layer.bindTooltip(tooltip, { pane: this.popupPane });\n          }\n          // to make clustering work\n          if (this.mergedConfigs()[0].featuresClustering) {\n            layer.getLatLng = () => geoJson(feature).getBounds().getCenter(); //eslint-disable-line\n            layer.setLatLng = () => { }; //eslint-disable-line\n            layer._latlng = layer.getLatLng(); //eslint-disable-line\n          }\n        }.bind(this),\n        // point circle marker styling\n        pointToLayer: function (feature, latlng) { // eslint-disable-line\n          return circleMarker(latlng, {\n            radius: style.radius || 8,\n            color: style.color || '#FFA500',\n            weight: style.weight || 2,\n            opacity: style.opacity || 1,\n            dashArray: style.dashArray || null,\n            dashOffset: style.dashOffset || null,\n            fillOpacity: style.fillOpacity || 1,\n            fillColor: style.fillColor || '#FFA500',\n            fill: style.fill || true,\n            pane: side === 'data' ? this.tooltipPane : this.shadowPane,\n          });\n        }.bind(this),\n        // polygon and line styling\n        style: {\n          color: style.color || '#FFA500',\n          weight: style.weight || 2,\n          opacity: style.opacity || 1,\n          dashArray: style.dashArray || null,\n          dashOffset: style.dashOffset || null,\n          fillOpacity: style.fillOpacity || 0,\n          fillColor: style.fillColor || '#FFA500',\n          fill: style.fill || true,\n        },\n      };\n    },\n    getColorCode(side) {\n      const i = side === 'compare' ? this.compareLayerIndex : this.dataLayerIndex;\n      let currentValue = null;\n      // compensate for color code with only one entry, still showing it\n      if (this.usedTimes.colorCode) {\n        const colors = this.usedTimes.colorCode;\n        if (Array.isArray(colors) && colors.length === 1) {\n          currentValue = colors[0]; // eslint-disable-line prefer-destructuring\n        } else if (Array.isArray(colors) && colors[i]) {\n          currentValue = colors[i]; // eslint-disable-line prefer-destructuring\n        }\n      }\n      return currentValue;\n    },\n    getAoiFill(side) {\n      const currentValue = this.getColorCode(side);\n      return currentValue\n        ? this.getIndicatorColor(currentValue)\n        : this.appConfig.branding.primaryColor;\n    },\n    subAoiStyle(side) {\n      const currentValue = this.getColorCode(side);\n      return {\n        color: currentValue\n          ? this.getIndicatorColor(currentValue)\n          : this.appConfig.branding.primaryColor,\n        weight: 3,\n        fill: false,\n      };\n    },\n    configFromInputData(side) {\n      const i = side === 'compare' ? this.compareLayerIndex : this.dataLayerIndex;\n      const inputData = this.usedTimes.inputData.length === 1\n        ? this.usedTimes.inputData[0]\n        : this.usedTimes.inputData[i];\n      if (this.baseConfig.layerNameMapping.hasOwnProperty(inputData)) { // eslint-disable-line\n        let config = this.baseConfig.layerNameMapping[inputData];\n        if (!Array.isArray(config)) {\n          // assure array is returned\n          config = [config];\n        }\n        return config;\n      }\n      // empty config used later for merging\n      return [];\n    },\n    getCombinedWMSLayers(side) {\n      const combLayers = this.mergedConfigs(side).filter((l) => (\n        l.protocol === 'WMS' && Object.keys(l).indexOf('combinedLayers') !== -1\n      ));\n      return combLayers;\n    },\n    getSimpleWMSLayers(side) {\n      const combLayers = this.mergedConfigs(side).filter((l) => (\n        l.protocol === 'WMS' && Object.keys(l).indexOf('combinedLayers') === -1\n      ));\n      return combLayers;\n    },\n    mergedConfigs(side = 'data') {\n      // first check if special compare layer configured\n      let displayTmp = side === 'compare' && this.indicator.compareDisplay ? this.indicator.compareDisplay : this.indicator.display;\n      // following configuration merging is done:\n      // defaultLayersDisplay (to avoid having to configure it before)\n      // indDefinition - indicator code specific configuration\n      // display - coming from js configuration - esa.js OR\n      // configFromInputData - coming from input data reference from csvs\n\n      if (displayTmp) {\n        // from layer configuration\n        if (!Array.isArray(displayTmp)) {\n          // always make an Array of layer configurations\n          displayTmp = [displayTmp];\n        }\n      }\n      const finalConfigs = [];\n      let usedConfigForMerge = {};\n      let name = this.indicator.description;\n\n      if (!displayTmp && this.configFromInputData(side).length === 0) {\n        // no additional config specified, use defaults\n        usedConfigForMerge = [{ name }];\n      } else if (!displayTmp) {\n        // use configFromInputData\n        usedConfigForMerge = this.configFromInputData(side);\n      } else {\n        // use displayTmp even if configFromInputData set too\n        usedConfigForMerge = displayTmp;\n      }\n      usedConfigForMerge.forEach((item) => {\n        // merge configs for each layer\n        name = item.name || name;\n        // Check to see if we have grouped layers, if we do we need to add\n        // the default to them too\n        const extendedItem = item;\n        if (Object.keys(item).indexOf('combinedLayers') !== -1) {\n          for (let i = 0; i < item.combinedLayers.length; i += 1) {\n            extendedItem.combinedLayers[i] = {\n              ...this.baseConfig.defaultLayersDisplay,\n              ...this.indDefinition,\n              ...item.combinedLayers[i],\n            };\n          }\n        }\n        finalConfigs.push({\n          ...this.baseConfig.defaultLayersDisplay,\n          ...this.indDefinition,\n          ...extendedItem,\n          name,\n        });\n      });\n      return finalConfigs;\n    },\n    flyToBounds() {\n      // zooms to subaoi if present or area around aoi if not\n      const boundsPad = this.mergedConfigs()[0].largeSubAoi ? 5 : (this.mergedConfigs()[0].midSubAoi ? 1 : 0.15); // eslint-disable-line\n      if (this.subAoi && this.subAoi.features.length > 0) {\n        const viewBounds = this.mergedConfigs()[0].presetView\n          ? geoJson(this.mergedConfigs()[0].presetView).getBounds()\n          : geoJson(this.subAoi).getBounds();\n        const bounds = geoJson(this.subAoi).getBounds();\n        const cornerMax1 = latLng([bounds.getSouth() - boundsPad, bounds.getWest() - boundsPad]);\n        const cornerMax2 = latLng([bounds.getNorth() + boundsPad, bounds.getEast() + boundsPad]);\n        const boundsMax = latLngBounds(cornerMax1, cornerMax2);\n        this.map.fitBounds(viewBounds);\n        // limit user movement around map\n        this.map.setMaxBounds(boundsMax);\n        if (this.mergedConfigs()[0].largeSubAoi) {\n          this.map.setMinZoom(2);\n        } else if (this.mergedConfigs()[0].midSubAoi) {\n          this.map.setMinZoom(9);\n        } else {\n          this.map.setMinZoom(13);\n        }\n      } else if (this.mergedConfigs()[0].presetView) {\n        // if only preset view move map there without limiting movement\n        const viewBounds = geoJson(this.mergedConfigs()[0].presetView).getBounds();\n        this.map.fitBounds(viewBounds);\n      } else if (this.aoi) {\n        const cornerMax1 = latLng([this.aoi.lat - boundsPad, this.aoi.lng - boundsPad]);\n        const cornerMax2 = latLng([this.aoi.lat + boundsPad, this.aoi.lng + boundsPad]);\n        const boundsMax = latLngBounds(cornerMax1, cornerMax2);\n        this.map.setZoom(16);\n        this.map.panTo(this.aoi);\n        if (this.mergedConfigs()[0].largeSubAoi) {\n          this.map.setMinZoom(2);\n        } else if (this.mergedConfigs()[0].midSubAoi) {\n          this.map.setMinZoom(9);\n        } else {\n          this.map.setMinZoom(12);\n        }\n        // limit user movement around map\n        this.map.setMaxBounds(boundsMax);\n      } else {\n        // zoom to default bbox from config\n        this.map.setMinZoom(this.mapDefaults.minMapZoom);\n        this.map.setMaxBounds(null);\n        this.map.fitBounds(latLngBounds(this.mapDefaults.bounds));\n      }\n    },\n    getTimeLabel(time) {\n      if (Array.isArray(time) && time.length === 2) {\n        // show start - end\n        if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n          return time.map((d) => DateTime.fromISO(d).toISO({ suppressMilliseconds: true })).join(' - ');\n        }\n        return time.map((d) => DateTime.fromISO(d).toISODate()).join(' - ');\n      } else if (time instanceof DateTime) { // eslint-disable-line no-else-return\n        if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n          return time.toISO({ suppressMilliseconds: true });\n        }\n        return time.toISODate();\n      }\n      if (this.mergedConfigs()[0].mapTimeLabelExtended) {\n        return DateTime.fromISO(time).toISO({ suppressMilliseconds: true });\n      }\n      return DateTime.fromISO(time).toISODate();\n    },\n    layerOptions(time, sourceOptionsObj) {\n      const additionalSettings = {};\n      if (Object.prototype.hasOwnProperty.call(sourceOptionsObj, 'siteMapping')) {\n        const currSite = sourceOptionsObj.siteMapping(\n          this.indicator.aoiID,\n        );\n        additionalSettings.site = currSite;\n      }\n      if (typeof sourceOptionsObj.minZoom !== 'undefined') {\n        additionalSettings.minZoom = sourceOptionsObj.minZoom;\n      }\n      if (typeof sourceOptionsObj.maxZoom !== 'undefined') {\n        additionalSettings.maxZoom = sourceOptionsObj.maxZoom;\n      }\n      if (typeof sourceOptionsObj.minNativeZoom !== 'undefined') {\n        additionalSettings.minNativeZoom = sourceOptionsObj.minNativeZoom;\n      }\n      if (typeof sourceOptionsObj.maxNativeZoom !== 'undefined') {\n        additionalSettings.maxNativeZoom = sourceOptionsObj.maxNativeZoom;\n      }\n      if (typeof sourceOptionsObj.bounds !== 'undefined') {\n        additionalSettings.bounds = sourceOptionsObj.bounds;\n      }\n      if (time !== null) {\n        // time as is gets automatically injected to WMS query OR xyz url {time} template\n        const fixTime = time.value || time;\n        additionalSettings.time = typeof sourceOptionsObj.dateFormatFunction === 'function'\n          ? sourceOptionsObj.dateFormatFunction(fixTime) : fixTime;\n        if (sourceOptionsObj.features) {\n          additionalSettings.featuresTime = typeof sourceOptionsObj.features.dateFormatFunction === 'function'\n            ? sourceOptionsObj.features.dateFormatFunction(fixTime) : fixTime;\n        }\n      }\n      return additionalSettings;\n    },\n    dataLayerTimeSelection(payload) {\n      // Different object returned either by arrow use or by dropdown use\n      if (Array.isArray(payload) || !(payload.value)) {\n        this.dataLayerTime = { value: payload, name: `${payload}` };\n      } else {\n        this.dataLayerTime = payload;\n      }\n      const newIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = newIndex;\n      this.refreshLayers('data');\n      this.$nextTick(() => {\n        this.slider.setRightLayers(\n          this.extractActualLayers(this.$refs.dataLayers),\n        );\n      });\n      if (this.indicator.compareDisplay) {\n        // shared time on both sides in case of compareDisplay being set\n        this.compareLayerTime = this.dataLayerTime;\n        this.compareLayerIndex = newIndex;\n        this.refreshLayers('compare');\n        this.$nextTick(() => {\n          this.slider.setLeftLayers(\n            this.extractActualLayers(this.$refs.compareLayers),\n          );\n        });\n      }\n    },\n    extractActualLayers(group) {\n      let actualLayers = [];\n      if (group.$children.length > 0) {\n        group.$children.forEach((child) => {\n          actualLayers = actualLayers.concat(this.extractActualLayers(child));\n        });\n      } else {\n        actualLayers.push(group.mapObject);\n      }\n      return actualLayers;\n    },\n    compareLayerTimeSelection(payload) {\n      // Different object returned either by arrow use or by dropdown use\n      if (Array.isArray(payload) || !(payload.value)) {\n        this.compareLayerTime = { value: payload, name: `${payload}` };\n      } else {\n        this.compareLayerTime = payload;\n      }\n      const newIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = newIndex;\n      this.refreshLayers('compare');\n      this.$nextTick(() => {\n        this.slider.setLeftLayers(\n          this.extractActualLayers(this.$refs.compareLayers),\n        );\n      });\n    },\n    dataLayerReduce() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = currentIndex - 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex - 1]);\n    },\n    dataLayerIncrease() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.dataLayerTime.value ? this.dataLayerTime.value : this.dataLayerTime);\n      this.dataLayerIndex = currentIndex + 1;\n      this.dataLayerTimeSelection(this.arrayOfObjects[currentIndex + 1]);\n    },\n    compareLayerReduce() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = currentIndex - 1;\n      this.compareLayerTimeSelection(this.arrayOfObjects[currentIndex - 1]);\n    },\n    compareLayerIncrease() {\n      const currentIndex = this.arrayOfObjects\n        .map((i) => i.value)\n        .indexOf(this.compareLayerTime.value ? this.compareLayerTime.value : this.compareLayerTime);\n      this.compareLayerIndex = currentIndex + 1;\n      this.compareLayerTimeSelection(this.arrayOfObjects[currentIndex + 1]);\n    },\n    getInitialCompareTime() {\n      // find closest entry one year before latest time\n      if (this.mergedConfigs()[0].largeTimeDuration) {\n        // if interval, use just start to get closest\n        const times = this.usedTimes.time.map((item) => (Array.isArray(item) ? item[0] : item));\n        const lastTimeEntry = DateTime.fromISO(times[times.length - 1]);\n        const oneYearBefore = lastTimeEntry.minus({ years: 1 });\n        // select closest to one year before\n        const closestOneYearBefore = times.find((item, i) => (\n          i === times.length - 1 || (\n            Math.abs(oneYearBefore.toMillis() - DateTime.fromISO(item).toMillis())\n            < Math.abs(oneYearBefore.toMillis() - DateTime.fromISO(times[i + 1]).toMillis())\n          )\n        ));\n        // Get index and return object from original times as there are also\n        // arrays of time tuple arrays\n        const foundIndex = times.indexOf(closestOneYearBefore);\n        return this.usedTimes.time[foundIndex];\n      }\n      // use first time\n      return this.usedTimes.time[0];\n    },\n    refreshGroup(group, time) {\n      // Group can also be an array depending on type\n      if (group) {\n        let toIterate;\n        if (Array.isArray(group)) {\n          toIterate = group;\n        } else {\n          toIterate = group.$children;\n        }\n        if (toIterate) {\n          toIterate.forEach((item) => {\n            // We check if we have a simple layer or a grouped layer\n            if (item.$children.length > 0) {\n              // This is a grouped layer, we iterate over the layers\n              item.$children.forEach((subItem) => {\n                // TODO: propsData do not have all the parameters we need (like dateFormatFunction)\n                // TODO extend this getting the mergedConfigs in a same way as when non-grouped\n                subItem.mapObject.setParams(this.layerOptions(\n                  time, subItem.$options.propsData,\n                ));\n                // force redraw of layer\n                subItem.$forceUpdate();\n              });\n            } else {\n              const originalConfig = this.mergedConfigs().find((config) => (\n                config.name === item.name\n              ));\n              item.mapObject.setParams(this.layerOptions(\n                time, originalConfig,\n              ));\n              // force redraw of layer\n              item.$forceUpdate();\n            }\n          });\n        }\n      }\n    },\n    refreshLayers(side) {\n      // compare(left) or data(right)\n      if (side === 'compare' || this.indicator.compareDisplay) {\n        this.refreshGroup(this.$refs.compareLayerArrayWMS, this.currentCompareTime);\n        if (this.$refs.compareLayerArrayXYZ) {\n          this.$refs.compareLayerArrayXYZ.forEach((item) => {\n            const originalIndex = parseInt(item.$attrs['data-key-originalindex'], 10);\n            this.compareLayerKeyXYZ[originalIndex] = Math.random();\n          });\n        }\n        if (!this.mergedConfigs()[0].featuresStatic\n          && (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea)) {\n          if (this.mergedConfigs()[0].featuresClustering) {\n            this.$refs.featuresCompareCluster.mapObject.clearLayers();\n          }\n          this.fetchFeatures('compare');\n        }\n      }\n      if (side === 'data') {\n        this.refreshGroup(this.$refs.dataLayerArrayWMS, this.currentTime);\n        if (this.$refs.dataLayerArrayXYZ) {\n          this.$refs.dataLayerArrayXYZ.forEach((item) => {\n            const originalIndex = parseInt(item.$attrs['data-key-originalindex'], 10);\n            this.dataLayerKeyXYZ[originalIndex] = Math.random();\n          });\n        }\n        if (!this.mergedConfigs()[0].featuresStatic\n          && (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea)) {\n          if (this.mergedConfigs()[0].featuresClustering) {\n            this.$refs.featuresDataCluster.mapObject.clearLayers();\n          }\n          this.fetchFeatures('data');\n        }\n      }\n    },\n    fetchFeatures(side) {\n      if (this.mergedConfigs(side)[0].features) {\n        const options = this.layerOptions(side === 'compare' ? this.currentCompareTime : this.currentTime,\n          this.mergedConfigs(side)[0]);\n        // add custom area if present\n        let customArea = {};\n        if (this.validDrawnArea) {\n          customArea = typeof this.mergedConfigs()[0].features.areaFormatFunction === 'function'\n            ? this.mergedConfigs()[0].features.areaFormatFunction(this.drawnArea)\n            : { area: JSON.stringify(this.drawnArea) };\n        }\n        const templateSubst = {\n          ...this.indicator,\n          ...options,\n          ...customArea,\n        };\n        const templateRe = /\\{ *([\\w_ -]+) *\\}/g;\n        const url = template(templateRe, this.mergedConfigs()[0].features.url, templateSubst);\n        let requestBody = null;\n        if (this.mergedConfigs()[0].features.requestBody) {\n          requestBody = {\n            ...this.mergedConfigs()[0].features.requestBody,\n          };\n          const params = Object.keys(requestBody);\n          for (let i = 0; i < params.length; i += 1) {\n            // substitute template strings with values\n            requestBody[params[i]] = template(templateRe, requestBody[params[i]], templateSubst);\n          }\n        }\n        const requestOpts = {\n          credentials: 'same-origin',\n          method: this.mergedConfigs()[0].features.requestMethod || 'GET',\n          headers: this.mergedConfigs()[0].features.requestHeaders || {},\n        };\n        if (requestBody) {\n          requestOpts.body = JSON.stringify(requestBody);\n        }\n        this.map.fireEvent('dataloading');\n        fetch(url, requestOpts).then((r) => r.json())\n          .then((rawdata) => {\n            // if custom response -> feature mapping function configured, apply it\n            if (typeof this.mergedConfigs()[0].features.callbackFunction === 'function') {\n              return this.mergedConfigs()[0].features.callbackFunction(rawdata);\n            }\n            return rawdata;\n          })\n          .then((data) => {\n            this.map.fireEvent('dataload');\n            this.updateJsonLayers(data, side);\n          })\n          .catch(() => {\n            this.map.fireEvent('dataload');\n            this.updateJsonLayers(emptyF, side);\n          });\n      } else {\n        this.updateJsonLayers(emptyF, side);\n      }\n    },\n    selectGSAIndicator(feature) {\n      this.selectedBorder = feature.borderId;\n      const dataUrl = `./eodash-data/internal/${feature.borderId}.json`;\n      this.map.fireEvent('dataloading');\n      fetch(dataUrl).then((r) => r.json())\n        .then((indicator) => {\n          const returnIndicator = {};\n          returnIndicator.values = { ...indicator };\n          returnIndicator.indicator = 'GSA';\n          // Get all times of available border crossings to allow finding min max\n          returnIndicator.time = [];\n          Object.keys(indicator).forEach((key) => {\n            const currVals = indicator[key].values;\n            for (let i = 0; i < currVals.length; i += 1) {\n              returnIndicator.time.push(DateTime.fromISO(currVals[i].timestamp));\n            }\n          });\n          returnIndicator.measurement = [0];\n          returnIndicator.title = feature.name;\n          returnIndicator.yAxis = this.indicator.yAxis;\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', returnIndicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          // It seems data could not be loaded lets show a no data found message\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', { isEmpty: true },\n          );\n          console.log(err);\n        });\n    },\n    fetchMobilityData(countryCode, aoiID) {\n      const dataUrl = `./eodash-data/internal/${countryCode}-${aoiID}.json`;\n      this.map.fireEvent('dataloading');\n      fetch(dataUrl).then((r) => r.json())\n        .then((indicator) => {\n          indicator.indicator = aoiID; // eslint-disable-line\n          indicator.time = indicator.Values.map((row) => DateTime.fromISO(row.date)); // eslint-disable-line\n          indicator.measurement = [0]; // eslint-disable-line\n          indicator.country = indicator.CountryCode; // eslint-disable-line\n          indicator.title = indicator.CountryName; // eslint-disable-line\n          indicator.yAxis = this.indicator.yAxis; // eslint-disable-line\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', indicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          // It seems data could not be loaded lets show a no data found message\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', { isEmpty: true },\n          );\n          console.log(err);\n        });\n    },\n    fetchCustomAreaIndicator() {\n      const options = this.layerOptions(this.currentTime, this.mergedConfigs()[0]);\n      // add custom area if present\n      let customArea = {};\n      if (this.validDrawnArea) {\n        customArea = typeof this.mergedConfigs()[0].areaIndicator.areaFormatFunction === 'function'\n          ? this.mergedConfigs()[0].areaIndicator.areaFormatFunction(this.drawnArea)\n          : { area: JSON.stringify(this.drawnArea) };\n      }\n      this.indicator.title = 'User defined area of interest';\n      const templateSubst = {\n        ...this.indicator,\n        ...options,\n        ...customArea,\n      };\n      const templateRe = /\\{ *([\\w_ -]+) *\\}/g;\n      const url = template(templateRe, this.mergedConfigs()[0].areaIndicator.url, templateSubst);\n      let requestBody = null;\n      if (this.mergedConfigs()[0].areaIndicator.requestBody) {\n        requestBody = {\n          ...this.mergedConfigs()[0].areaIndicator.requestBody,\n        };\n        const params = Object.keys(requestBody);\n        for (let i = 0; i < params.length; i += 1) {\n          // substitute template strings with values\n          if (typeof requestBody[params[i]] === 'string') {\n            requestBody[params[i]] = template(templateRe, requestBody[params[i]], templateSubst);\n          }\n          // Convert geojsons back to an object\n          if (params[i] === 'geojson') {\n            requestBody[params[i]] = JSON.parse(requestBody[params[i]]);\n          }\n        }\n      }\n      const requestOpts = {\n        credentials: 'same-origin',\n        method: this.mergedConfigs()[0].areaIndicator.requestMethod || 'GET',\n        headers: this.mergedConfigs()[0].areaIndicator.requestHeaders || {},\n      };\n      if (requestBody) {\n        requestOpts.body = JSON.stringify(requestBody);\n      }\n      this.map.fireEvent('dataloading');\n      fetch(url, requestOpts).then((r) => r.json())\n        .then((rawdata) => {\n          if (typeof this.mergedConfigs()[0].areaIndicator.callbackFunction === 'function') {\n            // merge data from current indicator data and new data from api\n            // returns new indicator object to set as custom area indicator\n            return this.mergedConfigs()[0].areaIndicator.callbackFunction(rawdata, this.indicator);\n          }\n          return rawdata;\n        })\n        .then((indicator) => {\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', indicator,\n          );\n          this.$emit('fetchCustomAreaIndicator');\n        })\n        .catch((err) => {\n          this.map.fireEvent('dataload');\n          this.$store.commit(\n            'indicators/CUSTOM_AREA_INDICATOR_LOAD_FINISHED', null,\n          );\n          console.log(err);\n        });\n    },\n    clearCustomAreaFilter() {\n      this.$store.commit('features/SET_SELECTED_AREA', null);\n    },\n    getDataF() {\n      return dataF;\n    },\n    getCompareF() {\n      return compareF;\n    },\n    updateJsonLayers(ftrs, side) {\n      if (this.mergedConfigs()[0].featuresClustering) {\n        // markercluster needs manual adding of all geojsons it will show\n        // and cleanup of previous content\n        const geojsonFromData = geoJson(ftrs, {\n          ...this.featureOptions(side),\n          pane: side === 'data' ? this.tooltipPane : this.shadowPane,\n        });\n        if (this.$refs.featuresDataCluster) {\n          if (side === 'data') {\n            this.$refs.featuresDataCluster.mapObject.clearLayers();\n            this.$refs.featuresDataCluster.mapObject.addLayers([geojsonFromData]);\n            this.dataFeaturesCount = ftrs.features.length;\n          } else {\n            this.$refs.featuresCompareCluster.mapObject.clearLayers();\n            this.$refs.featuresCompareCluster.mapObject.addLayers([geojsonFromData]);\n            this.compareFeaturesCount = ftrs.features.length;\n          }\n        }\n      } else if (side === 'data') {\n        // normal geojson layer just needs manual refresh\n        this.dataJsonComputed = ftrs;\n        this.dataJsonKey = Math.random();\n        this.dataFeaturesCount = ftrs.features.length;\n      } else {\n        this.compareJsonComputed = ftrs;\n        this.compareJsonKey = Math.random();\n        this.compareFeaturesCount = ftrs.features.length;\n      }\n    },\n  },\n  watch: {\n    enableCompare(on) {\n      if (!on) {\n        if (this.slider !== null) {\n          this.map.removeControl(this.slider);\n          this.map.removeLayer(this.$refs.compareLayers.mapObject);\n        }\n      } else {\n        this.map.addLayer(this.$refs.compareLayers.mapObject);\n        if (!this.mergedConfigs()[0].customAreaFeatures || this.validDrawnArea) {\n          this.fetchFeatures('compare');\n        }\n        this.$nextTick(() => {\n          this.slider.setLeftLayers(\n            this.extractActualLayers(this.$refs.compareLayers),\n          );\n          this.slider.setRightLayers(\n            this.extractActualLayers(this.$refs.dataLayers),\n          );\n          this.slider.addTo(this.map);\n        });\n      }\n    },\n    drawnArea() {\n      // watch on drawn area prop change triggering update of draw layer, fetching custom features\n      this.updateSelectedAreaFeature();\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n::v-deep .leaflet-tooltip-top {\n  background: #00000099;\n  border-radius: 3px;\n  color: #fff;\n  pointer-events: none;\n  white-space: nowrap;\n  border: none;\n  &:before {\n    border-top-color: #00000099;\n  }\n}\n::v-deep .leaflet-control-attribution:active :not(.attribution-icon),\n::v-deep .leaflet-control-attribution:hover :not(.attribution-icon),\n::v-deep .leaflet-control-attribution .attribution-icon {\n  display: inline-block;\n}\n::v-deep .leaflet-control-attribution :not(.attribution-icon),\n::v-deep .leaflet-control-attribution:active .attribution-icon,\n::v-deep .leaflet-control-attribution:hover .attribution-icon {\n  display: none;\n}\n::v-deep .attribution-icon {\n  font-size: 1.2em;\n  margin: 1px;\n}\n::v-deep .leaflet-control-mouseposition {\n  background-color: rgba(255, 255, 255, 0.8);\n  transform: translate3d(-8px, 32px, 0);\n  padding: 2px 4px;\n}\n::v-deep .leaflet-sbs-divider {\n  background-color: var(--v-primary-base);\n  opacity: 0.7;\n}\n::v-deep .leaflet-control-layers-toggle {\n  background-image: url('data:image/svg+xml;utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"%23003247\" width=\"32px\" height=\"32px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"/></svg>');\n}\n::v-deep .mdi-asterisk {\n  visibility: hidden;\n}\n::v-deep .leaflet-bar a, ::v-deep .leaflet-control-attribution {\n  color: var(--v-primary-base) !important;\n}\n::v-deep .leaflet-control-layers-toggle {\n  background-image: none;\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n::v-deep .leaflet-tooltip {\n  z-index: 700;\n}\n::v-deep .leaflet-draw-actions a {\n  background-color: var(--v-primary-base);\n  color: #fff;\n}\n::v-deep .marker-cluster {\n  background-color: rgba(#003247, 0.5);\n  div {\n    background-color: var(--v-primary-base);\n    span {\n      color: white;\n    }\n  }\n}\n.map-legend {\n  max-width: 20vw;\n  transition: max-width 0.5s ease-in-out;\n  cursor: pointer;\n}\n.map-legend-expanded {\n  width: initial;\n  max-width: 80%;\n}\n\n::v-deep .leaflet-top.leaflet-right {\n  margin-top: 45px;\n}\n</style>\n"]}]}